// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request-reply.proto

package org.apache.flink.generated;

/**
 * <pre>
 * The following section contains messages sent from a remote function back to Flink. 
 * </pre>
 *
 * Protobuf type {@code io.statefun.sdk.reqreply.FromFunction}
 */
@javax.annotation.Generated("proto") public  final class FromFunction extends
    org.apache.flink.com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:io.statefun.sdk.reqreply.FromFunction)
    FromFunctionOrBuilder {
private static final long serialVersionUID = 0L;
  // Use FromFunction.newBuilder() to construct.
  private FromFunction(org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private FromFunction() {
  }

  @Override
  public final org.apache.flink.com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private FromFunction(
      org.apache.flink.com.google.protobuf.CodedInputStream input,
      org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    int mutable_bitField0_ = 0;
    org.apache.flink.com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        org.apache.flink.com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 802: {
            FromFunction.InvocationResponse.Builder subBuilder = null;
            if (responseCase_ == 100) {
              subBuilder = ((FromFunction.InvocationResponse) response_).toBuilder();
            }
            response_ =
                input.readMessage(FromFunction.InvocationResponse.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((FromFunction.InvocationResponse) response_);
              response_ = subBuilder.buildPartial();
            }
            responseCase_ = 100;
            break;
          }
          case 810: {
            FromFunction.IncompleteInvocationContext.Builder subBuilder = null;
            if (responseCase_ == 101) {
              subBuilder = ((FromFunction.IncompleteInvocationContext) response_).toBuilder();
            }
            response_ =
                input.readMessage(FromFunction.IncompleteInvocationContext.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((FromFunction.IncompleteInvocationContext) response_);
              response_ = subBuilder.buildPartial();
            }
            responseCase_ = 101;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.apache.flink.com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_descriptor;
  }

  @Override
  protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            FromFunction.class, FromFunction.Builder.class);
  }

  public interface PersistedValueMutationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation)
      org.apache.flink.com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.MutationType mutation_type = 1;</code>
     */
    int getMutationTypeValue();
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.MutationType mutation_type = 1;</code>
     */
    FromFunction.PersistedValueMutation.MutationType getMutationType();

    /**
     * <code>string state_name = 2;</code>
     */
    String getStateName();
    /**
     * <code>string state_name = 2;</code>
     */
    org.apache.flink.com.google.protobuf.ByteString
        getStateNameBytes();

    /**
     * <code>.io.statefun.sdk.reqreply.TypedValue state_value = 3;</code>
     */
    boolean hasStateValue();
    /**
     * <code>.io.statefun.sdk.reqreply.TypedValue state_value = 3;</code>
     */
    TypedValue getStateValue();
    /**
     * <code>.io.statefun.sdk.reqreply.TypedValue state_value = 3;</code>
     */
    TypedValueOrBuilder getStateValueOrBuilder();
  }
  /**
   * <pre>
   * MutatePersistedValueCommand represents a command sent from a remote function to Flink,
   * requesting a change to a persisted value.
   * </pre>
   *
   * Protobuf type {@code io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation}
   */
  @javax.annotation.Generated("proto") public  static final class PersistedValueMutation extends
      org.apache.flink.com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation)
      PersistedValueMutationOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use PersistedValueMutation.newBuilder() to construct.
    private PersistedValueMutation(org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PersistedValueMutation() {
      mutationType_ = 0;
      stateName_ = "";
    }

    @Override
    public final org.apache.flink.com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private PersistedValueMutation(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      org.apache.flink.com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          org.apache.flink.com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              mutationType_ = rawValue;
              break;
            }
            case 18: {
              String s = input.readStringRequireUtf8();

              stateName_ = s;
              break;
            }
            case 26: {
              TypedValue.Builder subBuilder = null;
              if (stateValue_ != null) {
                subBuilder = stateValue_.toBuilder();
              }
              stateValue_ = input.readMessage(TypedValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stateValue_);
                stateValue_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.apache.flink.com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_PersistedValueMutation_descriptor;
    }

    @Override
    protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_PersistedValueMutation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              FromFunction.PersistedValueMutation.class, FromFunction.PersistedValueMutation.Builder.class);
    }

    /**
     * Protobuf enum {@code io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.MutationType}
     */
    public enum MutationType
        implements org.apache.flink.com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>DELETE = 0;</code>
       */
      DELETE(0),
      /**
       * <code>MODIFY = 1;</code>
       */
      MODIFY(1),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>DELETE = 0;</code>
       */
      public static final int DELETE_VALUE = 0;
      /**
       * <code>MODIFY = 1;</code>
       */
      public static final int MODIFY_VALUE = 1;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @Deprecated
      public static MutationType valueOf(int value) {
        return forNumber(value);
      }

      public static MutationType forNumber(int value) {
        switch (value) {
          case 0: return DELETE;
          case 1: return MODIFY;
          default: return null;
        }
      }

      public static org.apache.flink.com.google.protobuf.Internal.EnumLiteMap<MutationType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.apache.flink.com.google.protobuf.Internal.EnumLiteMap<
          MutationType> internalValueMap =
            new org.apache.flink.com.google.protobuf.Internal.EnumLiteMap<MutationType>() {
              public MutationType findValueByNumber(int number) {
                return MutationType.forNumber(number);
              }
            };

      public final org.apache.flink.com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final org.apache.flink.com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final org.apache.flink.com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return FromFunction.PersistedValueMutation.getDescriptor().getEnumTypes().get(0);
      }

      private static final MutationType[] VALUES = values();

      public static MutationType valueOf(
          org.apache.flink.com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private MutationType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.MutationType)
    }

    public static final int MUTATION_TYPE_FIELD_NUMBER = 1;
    private int mutationType_;
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.MutationType mutation_type = 1;</code>
     */
    public int getMutationTypeValue() {
      return mutationType_;
    }
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.MutationType mutation_type = 1;</code>
     */
    public FromFunction.PersistedValueMutation.MutationType getMutationType() {
      @SuppressWarnings("deprecation")
      FromFunction.PersistedValueMutation.MutationType result = FromFunction.PersistedValueMutation.MutationType.valueOf(mutationType_);
      return result == null ? FromFunction.PersistedValueMutation.MutationType.UNRECOGNIZED : result;
    }

    public static final int STATE_NAME_FIELD_NUMBER = 2;
    private volatile Object stateName_;
    /**
     * <code>string state_name = 2;</code>
     */
    public String getStateName() {
      Object ref = stateName_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        org.apache.flink.com.google.protobuf.ByteString bs = 
            (org.apache.flink.com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        stateName_ = s;
        return s;
      }
    }
    /**
     * <code>string state_name = 2;</code>
     */
    public org.apache.flink.com.google.protobuf.ByteString
        getStateNameBytes() {
      Object ref = stateName_;
      if (ref instanceof String) {
        org.apache.flink.com.google.protobuf.ByteString b = 
            org.apache.flink.com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        stateName_ = b;
        return b;
      } else {
        return (org.apache.flink.com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STATE_VALUE_FIELD_NUMBER = 3;
    private TypedValue stateValue_;
    /**
     * <code>.io.statefun.sdk.reqreply.TypedValue state_value = 3;</code>
     */
    public boolean hasStateValue() {
      return stateValue_ != null;
    }
    /**
     * <code>.io.statefun.sdk.reqreply.TypedValue state_value = 3;</code>
     */
    public TypedValue getStateValue() {
      return stateValue_ == null ? TypedValue.getDefaultInstance() : stateValue_;
    }
    /**
     * <code>.io.statefun.sdk.reqreply.TypedValue state_value = 3;</code>
     */
    public TypedValueOrBuilder getStateValueOrBuilder() {
      return getStateValue();
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(org.apache.flink.com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (mutationType_ != FromFunction.PersistedValueMutation.MutationType.DELETE.getNumber()) {
        output.writeEnum(1, mutationType_);
      }
      if (!getStateNameBytes().isEmpty()) {
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.writeString(output, 2, stateName_);
      }
      if (stateValue_ != null) {
        output.writeMessage(3, getStateValue());
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (mutationType_ != FromFunction.PersistedValueMutation.MutationType.DELETE.getNumber()) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, mutationType_);
      }
      if (!getStateNameBytes().isEmpty()) {
        size += org.apache.flink.com.google.protobuf.GeneratedMessageV3.computeStringSize(2, stateName_);
      }
      if (stateValue_ != null) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getStateValue());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof FromFunction.PersistedValueMutation)) {
        return super.equals(obj);
      }
      FromFunction.PersistedValueMutation other = (FromFunction.PersistedValueMutation) obj;

      if (mutationType_ != other.mutationType_) return false;
      if (!getStateName()
          .equals(other.getStateName())) return false;
      if (hasStateValue() != other.hasStateValue()) return false;
      if (hasStateValue()) {
        if (!getStateValue()
            .equals(other.getStateValue())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + MUTATION_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + mutationType_;
      hash = (37 * hash) + STATE_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getStateName().hashCode();
      if (hasStateValue()) {
        hash = (37 * hash) + STATE_VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getStateValue().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static FromFunction.PersistedValueMutation parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.PersistedValueMutation parseFrom(
        java.nio.ByteBuffer data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.PersistedValueMutation parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.PersistedValueMutation parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.PersistedValueMutation parseFrom(byte[] data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.PersistedValueMutation parseFrom(
        byte[] data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.PersistedValueMutation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static FromFunction.PersistedValueMutation parseFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static FromFunction.PersistedValueMutation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static FromFunction.PersistedValueMutation parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static FromFunction.PersistedValueMutation parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static FromFunction.PersistedValueMutation parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(FromFunction.PersistedValueMutation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * MutatePersistedValueCommand represents a command sent from a remote function to Flink,
     * requesting a change to a persisted value.
     * </pre>
     *
     * Protobuf type {@code io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation}
     */
    @javax.annotation.Generated("proto") public static final class Builder extends
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation)
        FromFunction.PersistedValueMutationOrBuilder {
      public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_PersistedValueMutation_descriptor;
      }

      @Override
      protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_PersistedValueMutation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                FromFunction.PersistedValueMutation.class, FromFunction.PersistedValueMutation.Builder.class);
      }

      // Construct using generated.FromFunction.PersistedValueMutation.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.flink.com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        mutationType_ = 0;

        stateName_ = "";

        if (stateValueBuilder_ == null) {
          stateValue_ = null;
        } else {
          stateValue_ = null;
          stateValueBuilder_ = null;
        }
        return this;
      }

      @Override
      public org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_PersistedValueMutation_descriptor;
      }

      @Override
      public FromFunction.PersistedValueMutation getDefaultInstanceForType() {
        return FromFunction.PersistedValueMutation.getDefaultInstance();
      }

      @Override
      public FromFunction.PersistedValueMutation build() {
        FromFunction.PersistedValueMutation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public FromFunction.PersistedValueMutation buildPartial() {
        FromFunction.PersistedValueMutation result = new FromFunction.PersistedValueMutation(this);
        result.mutationType_ = mutationType_;
        result.stateName_ = stateName_;
        if (stateValueBuilder_ == null) {
          result.stateValue_ = stateValue_;
        } else {
          result.stateValue_ = stateValueBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          org.apache.flink.com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(org.apache.flink.com.google.protobuf.Message other) {
        if (other instanceof FromFunction.PersistedValueMutation) {
          return mergeFrom((FromFunction.PersistedValueMutation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(FromFunction.PersistedValueMutation other) {
        if (other == FromFunction.PersistedValueMutation.getDefaultInstance()) return this;
        if (other.mutationType_ != 0) {
          setMutationTypeValue(other.getMutationTypeValue());
        }
        if (!other.getStateName().isEmpty()) {
          stateName_ = other.stateName_;
          onChanged();
        }
        if (other.hasStateValue()) {
          mergeStateValue(other.getStateValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        FromFunction.PersistedValueMutation parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (FromFunction.PersistedValueMutation) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int mutationType_ = 0;
      /**
       * <code>.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.MutationType mutation_type = 1;</code>
       */
      public int getMutationTypeValue() {
        return mutationType_;
      }
      /**
       * <code>.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.MutationType mutation_type = 1;</code>
       */
      public Builder setMutationTypeValue(int value) {
        mutationType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.MutationType mutation_type = 1;</code>
       */
      public FromFunction.PersistedValueMutation.MutationType getMutationType() {
        @SuppressWarnings("deprecation")
        FromFunction.PersistedValueMutation.MutationType result = FromFunction.PersistedValueMutation.MutationType.valueOf(mutationType_);
        return result == null ? FromFunction.PersistedValueMutation.MutationType.UNRECOGNIZED : result;
      }
      /**
       * <code>.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.MutationType mutation_type = 1;</code>
       */
      public Builder setMutationType(FromFunction.PersistedValueMutation.MutationType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        mutationType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation.MutationType mutation_type = 1;</code>
       */
      public Builder clearMutationType() {
        
        mutationType_ = 0;
        onChanged();
        return this;
      }

      private Object stateName_ = "";
      /**
       * <code>string state_name = 2;</code>
       */
      public String getStateName() {
        Object ref = stateName_;
        if (!(ref instanceof String)) {
          org.apache.flink.com.google.protobuf.ByteString bs =
              (org.apache.flink.com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          stateName_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <code>string state_name = 2;</code>
       */
      public org.apache.flink.com.google.protobuf.ByteString
          getStateNameBytes() {
        Object ref = stateName_;
        if (ref instanceof String) {
          org.apache.flink.com.google.protobuf.ByteString b = 
              org.apache.flink.com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          stateName_ = b;
          return b;
        } else {
          return (org.apache.flink.com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string state_name = 2;</code>
       */
      public Builder setStateName(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        stateName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string state_name = 2;</code>
       */
      public Builder clearStateName() {
        
        stateName_ = getDefaultInstance().getStateName();
        onChanged();
        return this;
      }
      /**
       * <code>string state_name = 2;</code>
       */
      public Builder setStateNameBytes(
          org.apache.flink.com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        stateName_ = value;
        onChanged();
        return this;
      }

      private TypedValue stateValue_;
      private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
              TypedValue, TypedValue.Builder, TypedValueOrBuilder> stateValueBuilder_;
      /**
       * <code>.io.statefun.sdk.reqreply.TypedValue state_value = 3;</code>
       */
      public boolean hasStateValue() {
        return stateValueBuilder_ != null || stateValue_ != null;
      }
      /**
       * <code>.io.statefun.sdk.reqreply.TypedValue state_value = 3;</code>
       */
      public TypedValue getStateValue() {
        if (stateValueBuilder_ == null) {
          return stateValue_ == null ? TypedValue.getDefaultInstance() : stateValue_;
        } else {
          return stateValueBuilder_.getMessage();
        }
      }
      /**
       * <code>.io.statefun.sdk.reqreply.TypedValue state_value = 3;</code>
       */
      public Builder setStateValue(TypedValue value) {
        if (stateValueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stateValue_ = value;
          onChanged();
        } else {
          stateValueBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.io.statefun.sdk.reqreply.TypedValue state_value = 3;</code>
       */
      public Builder setStateValue(
          TypedValue.Builder builderForValue) {
        if (stateValueBuilder_ == null) {
          stateValue_ = builderForValue.build();
          onChanged();
        } else {
          stateValueBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.io.statefun.sdk.reqreply.TypedValue state_value = 3;</code>
       */
      public Builder mergeStateValue(TypedValue value) {
        if (stateValueBuilder_ == null) {
          if (stateValue_ != null) {
            stateValue_ =
              TypedValue.newBuilder(stateValue_).mergeFrom(value).buildPartial();
          } else {
            stateValue_ = value;
          }
          onChanged();
        } else {
          stateValueBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.io.statefun.sdk.reqreply.TypedValue state_value = 3;</code>
       */
      public Builder clearStateValue() {
        if (stateValueBuilder_ == null) {
          stateValue_ = null;
          onChanged();
        } else {
          stateValue_ = null;
          stateValueBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.io.statefun.sdk.reqreply.TypedValue state_value = 3;</code>
       */
      public TypedValue.Builder getStateValueBuilder() {
        
        onChanged();
        return getStateValueFieldBuilder().getBuilder();
      }
      /**
       * <code>.io.statefun.sdk.reqreply.TypedValue state_value = 3;</code>
       */
      public TypedValueOrBuilder getStateValueOrBuilder() {
        if (stateValueBuilder_ != null) {
          return stateValueBuilder_.getMessageOrBuilder();
        } else {
          return stateValue_ == null ?
              TypedValue.getDefaultInstance() : stateValue_;
        }
      }
      /**
       * <code>.io.statefun.sdk.reqreply.TypedValue state_value = 3;</code>
       */
      private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
              TypedValue, TypedValue.Builder, TypedValueOrBuilder> 
          getStateValueFieldBuilder() {
        if (stateValueBuilder_ == null) {
          stateValueBuilder_ = new org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
                  TypedValue, TypedValue.Builder, TypedValueOrBuilder>(
                  getStateValue(),
                  getParentForChildren(),
                  isClean());
          stateValue_ = null;
        }
        return stateValueBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation)
    }

    // @@protoc_insertion_point(class_scope:io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation)
    private static final FromFunction.PersistedValueMutation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new FromFunction.PersistedValueMutation();
    }

    public static FromFunction.PersistedValueMutation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.flink.com.google.protobuf.Parser<PersistedValueMutation>
        PARSER = new org.apache.flink.com.google.protobuf.AbstractParser<PersistedValueMutation>() {
      @Override
      public PersistedValueMutation parsePartialFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
        return new PersistedValueMutation(input, extensionRegistry);
      }
    };

    public static org.apache.flink.com.google.protobuf.Parser<PersistedValueMutation> parser() {
      return PARSER;
    }

    @Override
    public org.apache.flink.com.google.protobuf.Parser<PersistedValueMutation> getParserForType() {
      return PARSER;
    }

    @Override
    public FromFunction.PersistedValueMutation getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InvocationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:io.statefun.sdk.reqreply.FromFunction.Invocation)
      org.apache.flink.com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The target function to invoke 
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.Address target = 1;</code>
     */
    boolean hasTarget();
    /**
     * <pre>
     * The target function to invoke 
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.Address target = 1;</code>
     */
    Address getTarget();
    /**
     * <pre>
     * The target function to invoke 
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.Address target = 1;</code>
     */
    AddressOrBuilder getTargetOrBuilder();

    /**
     * <pre>
     * The invocation argument (aka the message sent to the target function)
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.TypedValue argument = 2;</code>
     */
    boolean hasArgument();
    /**
     * <pre>
     * The invocation argument (aka the message sent to the target function)
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.TypedValue argument = 2;</code>
     */
    TypedValue getArgument();
    /**
     * <pre>
     * The invocation argument (aka the message sent to the target function)
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.TypedValue argument = 2;</code>
     */
    TypedValueOrBuilder getArgumentOrBuilder();
  }
  /**
   * <pre>
   * Invocation represents a remote function call, it associated with a (mandatory) target address,
   * and an argument. 
   * </pre>
   *
   * Protobuf type {@code io.statefun.sdk.reqreply.FromFunction.Invocation}
   */
  @javax.annotation.Generated("proto") public  static final class Invocation extends
      org.apache.flink.com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:io.statefun.sdk.reqreply.FromFunction.Invocation)
      InvocationOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Invocation.newBuilder() to construct.
    private Invocation(org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Invocation() {
    }

    @Override
    public final org.apache.flink.com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Invocation(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      org.apache.flink.com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          org.apache.flink.com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              Address.Builder subBuilder = null;
              if (target_ != null) {
                subBuilder = target_.toBuilder();
              }
              target_ = input.readMessage(Address.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(target_);
                target_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              TypedValue.Builder subBuilder = null;
              if (argument_ != null) {
                subBuilder = argument_.toBuilder();
              }
              argument_ = input.readMessage(TypedValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(argument_);
                argument_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.apache.flink.com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_Invocation_descriptor;
    }

    @Override
    protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_Invocation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              FromFunction.Invocation.class, FromFunction.Invocation.Builder.class);
    }

    public static final int TARGET_FIELD_NUMBER = 1;
    private Address target_;
    /**
     * <pre>
     * The target function to invoke 
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.Address target = 1;</code>
     */
    public boolean hasTarget() {
      return target_ != null;
    }
    /**
     * <pre>
     * The target function to invoke 
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.Address target = 1;</code>
     */
    public Address getTarget() {
      return target_ == null ? Address.getDefaultInstance() : target_;
    }
    /**
     * <pre>
     * The target function to invoke 
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.Address target = 1;</code>
     */
    public AddressOrBuilder getTargetOrBuilder() {
      return getTarget();
    }

    public static final int ARGUMENT_FIELD_NUMBER = 2;
    private TypedValue argument_;
    /**
     * <pre>
     * The invocation argument (aka the message sent to the target function)
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.TypedValue argument = 2;</code>
     */
    public boolean hasArgument() {
      return argument_ != null;
    }
    /**
     * <pre>
     * The invocation argument (aka the message sent to the target function)
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.TypedValue argument = 2;</code>
     */
    public TypedValue getArgument() {
      return argument_ == null ? TypedValue.getDefaultInstance() : argument_;
    }
    /**
     * <pre>
     * The invocation argument (aka the message sent to the target function)
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.TypedValue argument = 2;</code>
     */
    public TypedValueOrBuilder getArgumentOrBuilder() {
      return getArgument();
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(org.apache.flink.com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (target_ != null) {
        output.writeMessage(1, getTarget());
      }
      if (argument_ != null) {
        output.writeMessage(2, getArgument());
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (target_ != null) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTarget());
      }
      if (argument_ != null) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getArgument());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof FromFunction.Invocation)) {
        return super.equals(obj);
      }
      FromFunction.Invocation other = (FromFunction.Invocation) obj;

      if (hasTarget() != other.hasTarget()) return false;
      if (hasTarget()) {
        if (!getTarget()
            .equals(other.getTarget())) return false;
      }
      if (hasArgument() != other.hasArgument()) return false;
      if (hasArgument()) {
        if (!getArgument()
            .equals(other.getArgument())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTarget()) {
        hash = (37 * hash) + TARGET_FIELD_NUMBER;
        hash = (53 * hash) + getTarget().hashCode();
      }
      if (hasArgument()) {
        hash = (37 * hash) + ARGUMENT_FIELD_NUMBER;
        hash = (53 * hash) + getArgument().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static FromFunction.Invocation parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.Invocation parseFrom(
        java.nio.ByteBuffer data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.Invocation parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.Invocation parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.Invocation parseFrom(byte[] data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.Invocation parseFrom(
        byte[] data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.Invocation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static FromFunction.Invocation parseFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static FromFunction.Invocation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static FromFunction.Invocation parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static FromFunction.Invocation parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static FromFunction.Invocation parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(FromFunction.Invocation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Invocation represents a remote function call, it associated with a (mandatory) target address,
     * and an argument. 
     * </pre>
     *
     * Protobuf type {@code io.statefun.sdk.reqreply.FromFunction.Invocation}
     */
    @javax.annotation.Generated("proto") public static final class Builder extends
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:io.statefun.sdk.reqreply.FromFunction.Invocation)
        FromFunction.InvocationOrBuilder {
      public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_Invocation_descriptor;
      }

      @Override
      protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_Invocation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                FromFunction.Invocation.class, FromFunction.Invocation.Builder.class);
      }

      // Construct using generated.FromFunction.Invocation.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.flink.com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        if (targetBuilder_ == null) {
          target_ = null;
        } else {
          target_ = null;
          targetBuilder_ = null;
        }
        if (argumentBuilder_ == null) {
          argument_ = null;
        } else {
          argument_ = null;
          argumentBuilder_ = null;
        }
        return this;
      }

      @Override
      public org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_Invocation_descriptor;
      }

      @Override
      public FromFunction.Invocation getDefaultInstanceForType() {
        return FromFunction.Invocation.getDefaultInstance();
      }

      @Override
      public FromFunction.Invocation build() {
        FromFunction.Invocation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public FromFunction.Invocation buildPartial() {
        FromFunction.Invocation result = new FromFunction.Invocation(this);
        if (targetBuilder_ == null) {
          result.target_ = target_;
        } else {
          result.target_ = targetBuilder_.build();
        }
        if (argumentBuilder_ == null) {
          result.argument_ = argument_;
        } else {
          result.argument_ = argumentBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          org.apache.flink.com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(org.apache.flink.com.google.protobuf.Message other) {
        if (other instanceof FromFunction.Invocation) {
          return mergeFrom((FromFunction.Invocation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(FromFunction.Invocation other) {
        if (other == FromFunction.Invocation.getDefaultInstance()) return this;
        if (other.hasTarget()) {
          mergeTarget(other.getTarget());
        }
        if (other.hasArgument()) {
          mergeArgument(other.getArgument());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        FromFunction.Invocation parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (FromFunction.Invocation) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private Address target_;
      private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
              Address, Address.Builder, AddressOrBuilder> targetBuilder_;
      /**
       * <pre>
       * The target function to invoke 
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.Address target = 1;</code>
       */
      public boolean hasTarget() {
        return targetBuilder_ != null || target_ != null;
      }
      /**
       * <pre>
       * The target function to invoke 
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.Address target = 1;</code>
       */
      public Address getTarget() {
        if (targetBuilder_ == null) {
          return target_ == null ? Address.getDefaultInstance() : target_;
        } else {
          return targetBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The target function to invoke 
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.Address target = 1;</code>
       */
      public Builder setTarget(Address value) {
        if (targetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          targetBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The target function to invoke 
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.Address target = 1;</code>
       */
      public Builder setTarget(
          Address.Builder builderForValue) {
        if (targetBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          targetBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The target function to invoke 
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.Address target = 1;</code>
       */
      public Builder mergeTarget(Address value) {
        if (targetBuilder_ == null) {
          if (target_ != null) {
            target_ =
              Address.newBuilder(target_).mergeFrom(value).buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          targetBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The target function to invoke 
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.Address target = 1;</code>
       */
      public Builder clearTarget() {
        if (targetBuilder_ == null) {
          target_ = null;
          onChanged();
        } else {
          target_ = null;
          targetBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The target function to invoke 
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.Address target = 1;</code>
       */
      public Address.Builder getTargetBuilder() {
        
        onChanged();
        return getTargetFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The target function to invoke 
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.Address target = 1;</code>
       */
      public AddressOrBuilder getTargetOrBuilder() {
        if (targetBuilder_ != null) {
          return targetBuilder_.getMessageOrBuilder();
        } else {
          return target_ == null ?
              Address.getDefaultInstance() : target_;
        }
      }
      /**
       * <pre>
       * The target function to invoke 
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.Address target = 1;</code>
       */
      private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
              Address, Address.Builder, AddressOrBuilder> 
          getTargetFieldBuilder() {
        if (targetBuilder_ == null) {
          targetBuilder_ = new org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
                  Address, Address.Builder, AddressOrBuilder>(
                  getTarget(),
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        return targetBuilder_;
      }

      private TypedValue argument_;
      private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
              TypedValue, TypedValue.Builder, TypedValueOrBuilder> argumentBuilder_;
      /**
       * <pre>
       * The invocation argument (aka the message sent to the target function)
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 2;</code>
       */
      public boolean hasArgument() {
        return argumentBuilder_ != null || argument_ != null;
      }
      /**
       * <pre>
       * The invocation argument (aka the message sent to the target function)
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 2;</code>
       */
      public TypedValue getArgument() {
        if (argumentBuilder_ == null) {
          return argument_ == null ? TypedValue.getDefaultInstance() : argument_;
        } else {
          return argumentBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The invocation argument (aka the message sent to the target function)
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 2;</code>
       */
      public Builder setArgument(TypedValue value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          argument_ = value;
          onChanged();
        } else {
          argumentBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The invocation argument (aka the message sent to the target function)
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 2;</code>
       */
      public Builder setArgument(
          TypedValue.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          argument_ = builderForValue.build();
          onChanged();
        } else {
          argumentBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The invocation argument (aka the message sent to the target function)
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 2;</code>
       */
      public Builder mergeArgument(TypedValue value) {
        if (argumentBuilder_ == null) {
          if (argument_ != null) {
            argument_ =
              TypedValue.newBuilder(argument_).mergeFrom(value).buildPartial();
          } else {
            argument_ = value;
          }
          onChanged();
        } else {
          argumentBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The invocation argument (aka the message sent to the target function)
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 2;</code>
       */
      public Builder clearArgument() {
        if (argumentBuilder_ == null) {
          argument_ = null;
          onChanged();
        } else {
          argument_ = null;
          argumentBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The invocation argument (aka the message sent to the target function)
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 2;</code>
       */
      public TypedValue.Builder getArgumentBuilder() {
        
        onChanged();
        return getArgumentFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The invocation argument (aka the message sent to the target function)
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 2;</code>
       */
      public TypedValueOrBuilder getArgumentOrBuilder() {
        if (argumentBuilder_ != null) {
          return argumentBuilder_.getMessageOrBuilder();
        } else {
          return argument_ == null ?
              TypedValue.getDefaultInstance() : argument_;
        }
      }
      /**
       * <pre>
       * The invocation argument (aka the message sent to the target function)
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 2;</code>
       */
      private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
              TypedValue, TypedValue.Builder, TypedValueOrBuilder> 
          getArgumentFieldBuilder() {
        if (argumentBuilder_ == null) {
          argumentBuilder_ = new org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
                  TypedValue, TypedValue.Builder, TypedValueOrBuilder>(
                  getArgument(),
                  getParentForChildren(),
                  isClean());
          argument_ = null;
        }
        return argumentBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:io.statefun.sdk.reqreply.FromFunction.Invocation)
    }

    // @@protoc_insertion_point(class_scope:io.statefun.sdk.reqreply.FromFunction.Invocation)
    private static final FromFunction.Invocation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new FromFunction.Invocation();
    }

    public static FromFunction.Invocation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.flink.com.google.protobuf.Parser<Invocation>
        PARSER = new org.apache.flink.com.google.protobuf.AbstractParser<Invocation>() {
      @Override
      public Invocation parsePartialFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
        return new Invocation(input, extensionRegistry);
      }
    };

    public static org.apache.flink.com.google.protobuf.Parser<Invocation> parser() {
      return PARSER;
    }

    @Override
    public org.apache.flink.com.google.protobuf.Parser<Invocation> getParserForType() {
      return PARSER;
    }

    @Override
    public FromFunction.Invocation getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DelayedInvocationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:io.statefun.sdk.reqreply.FromFunction.DelayedInvocation)
      org.apache.flink.com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * a boolean value (default false) that indicates rather this is a regular delayed message, or (true) a message
     * cancellation request.
     * in case of a regular delayed message all other fields are expected to be preset, otherwise only the
     * cancellation_token is expected
     * </pre>
     *
     * <code>bool is_cancellation_request = 10;</code>
     */
    boolean getIsCancellationRequest();

    /**
     * <pre>
     * an optional cancellation token that can be used to request the "unsending" of a delayed message.
     * </pre>
     *
     * <code>string cancellation_token = 11;</code>
     */
    String getCancellationToken();
    /**
     * <pre>
     * an optional cancellation token that can be used to request the "unsending" of a delayed message.
     * </pre>
     *
     * <code>string cancellation_token = 11;</code>
     */
    org.apache.flink.com.google.protobuf.ByteString
        getCancellationTokenBytes();

    /**
     * <pre>
     * the amount of milliseconds to wait before sending this message
     * </pre>
     *
     * <code>int64 delay_in_ms = 1;</code>
     */
    long getDelayInMs();

    /**
     * <pre>
     * the target address to send this message to
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.Address target = 2;</code>
     */
    boolean hasTarget();
    /**
     * <pre>
     * the target address to send this message to
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.Address target = 2;</code>
     */
    Address getTarget();
    /**
     * <pre>
     * the target address to send this message to
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.Address target = 2;</code>
     */
    AddressOrBuilder getTargetOrBuilder();

    /**
     * <pre>
     * the invocation argument
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
     */
    boolean hasArgument();
    /**
     * <pre>
     * the invocation argument
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
     */
    TypedValue getArgument();
    /**
     * <pre>
     * the invocation argument
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
     */
    TypedValueOrBuilder getArgumentOrBuilder();
  }
  /**
   * <pre>
   * DelayedInvocation represents a delayed remote function call with a target address, an argument
   * and a delay in milliseconds, after which this message to be sent.
   * </pre>
   *
   * Protobuf type {@code io.statefun.sdk.reqreply.FromFunction.DelayedInvocation}
   */
  @javax.annotation.Generated("proto") public  static final class DelayedInvocation extends
      org.apache.flink.com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:io.statefun.sdk.reqreply.FromFunction.DelayedInvocation)
      DelayedInvocationOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DelayedInvocation.newBuilder() to construct.
    private DelayedInvocation(org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DelayedInvocation() {
      cancellationToken_ = "";
    }

    @Override
    public final org.apache.flink.com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DelayedInvocation(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      org.apache.flink.com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          org.apache.flink.com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              delayInMs_ = input.readInt64();
              break;
            }
            case 18: {
              Address.Builder subBuilder = null;
              if (target_ != null) {
                subBuilder = target_.toBuilder();
              }
              target_ = input.readMessage(Address.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(target_);
                target_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              TypedValue.Builder subBuilder = null;
              if (argument_ != null) {
                subBuilder = argument_.toBuilder();
              }
              argument_ = input.readMessage(TypedValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(argument_);
                argument_ = subBuilder.buildPartial();
              }

              break;
            }
            case 80: {

              isCancellationRequest_ = input.readBool();
              break;
            }
            case 90: {
              String s = input.readStringRequireUtf8();

              cancellationToken_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.apache.flink.com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_DelayedInvocation_descriptor;
    }

    @Override
    protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_DelayedInvocation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              FromFunction.DelayedInvocation.class, FromFunction.DelayedInvocation.Builder.class);
    }

    public static final int IS_CANCELLATION_REQUEST_FIELD_NUMBER = 10;
    private boolean isCancellationRequest_;
    /**
     * <pre>
     * a boolean value (default false) that indicates rather this is a regular delayed message, or (true) a message
     * cancellation request.
     * in case of a regular delayed message all other fields are expected to be preset, otherwise only the
     * cancellation_token is expected
     * </pre>
     *
     * <code>bool is_cancellation_request = 10;</code>
     */
    public boolean getIsCancellationRequest() {
      return isCancellationRequest_;
    }

    public static final int CANCELLATION_TOKEN_FIELD_NUMBER = 11;
    private volatile Object cancellationToken_;
    /**
     * <pre>
     * an optional cancellation token that can be used to request the "unsending" of a delayed message.
     * </pre>
     *
     * <code>string cancellation_token = 11;</code>
     */
    public String getCancellationToken() {
      Object ref = cancellationToken_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        org.apache.flink.com.google.protobuf.ByteString bs = 
            (org.apache.flink.com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        cancellationToken_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * an optional cancellation token that can be used to request the "unsending" of a delayed message.
     * </pre>
     *
     * <code>string cancellation_token = 11;</code>
     */
    public org.apache.flink.com.google.protobuf.ByteString
        getCancellationTokenBytes() {
      Object ref = cancellationToken_;
      if (ref instanceof String) {
        org.apache.flink.com.google.protobuf.ByteString b = 
            org.apache.flink.com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        cancellationToken_ = b;
        return b;
      } else {
        return (org.apache.flink.com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DELAY_IN_MS_FIELD_NUMBER = 1;
    private long delayInMs_;
    /**
     * <pre>
     * the amount of milliseconds to wait before sending this message
     * </pre>
     *
     * <code>int64 delay_in_ms = 1;</code>
     */
    public long getDelayInMs() {
      return delayInMs_;
    }

    public static final int TARGET_FIELD_NUMBER = 2;
    private Address target_;
    /**
     * <pre>
     * the target address to send this message to
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.Address target = 2;</code>
     */
    public boolean hasTarget() {
      return target_ != null;
    }
    /**
     * <pre>
     * the target address to send this message to
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.Address target = 2;</code>
     */
    public Address getTarget() {
      return target_ == null ? Address.getDefaultInstance() : target_;
    }
    /**
     * <pre>
     * the target address to send this message to
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.Address target = 2;</code>
     */
    public AddressOrBuilder getTargetOrBuilder() {
      return getTarget();
    }

    public static final int ARGUMENT_FIELD_NUMBER = 3;
    private TypedValue argument_;
    /**
     * <pre>
     * the invocation argument
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
     */
    public boolean hasArgument() {
      return argument_ != null;
    }
    /**
     * <pre>
     * the invocation argument
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
     */
    public TypedValue getArgument() {
      return argument_ == null ? TypedValue.getDefaultInstance() : argument_;
    }
    /**
     * <pre>
     * the invocation argument
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
     */
    public TypedValueOrBuilder getArgumentOrBuilder() {
      return getArgument();
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(org.apache.flink.com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (delayInMs_ != 0L) {
        output.writeInt64(1, delayInMs_);
      }
      if (target_ != null) {
        output.writeMessage(2, getTarget());
      }
      if (argument_ != null) {
        output.writeMessage(3, getArgument());
      }
      if (isCancellationRequest_ != false) {
        output.writeBool(10, isCancellationRequest_);
      }
      if (!getCancellationTokenBytes().isEmpty()) {
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.writeString(output, 11, cancellationToken_);
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (delayInMs_ != 0L) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, delayInMs_);
      }
      if (target_ != null) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getTarget());
      }
      if (argument_ != null) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getArgument());
      }
      if (isCancellationRequest_ != false) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, isCancellationRequest_);
      }
      if (!getCancellationTokenBytes().isEmpty()) {
        size += org.apache.flink.com.google.protobuf.GeneratedMessageV3.computeStringSize(11, cancellationToken_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof FromFunction.DelayedInvocation)) {
        return super.equals(obj);
      }
      FromFunction.DelayedInvocation other = (FromFunction.DelayedInvocation) obj;

      if (getIsCancellationRequest()
          != other.getIsCancellationRequest()) return false;
      if (!getCancellationToken()
          .equals(other.getCancellationToken())) return false;
      if (getDelayInMs()
          != other.getDelayInMs()) return false;
      if (hasTarget() != other.hasTarget()) return false;
      if (hasTarget()) {
        if (!getTarget()
            .equals(other.getTarget())) return false;
      }
      if (hasArgument() != other.hasArgument()) return false;
      if (hasArgument()) {
        if (!getArgument()
            .equals(other.getArgument())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + IS_CANCELLATION_REQUEST_FIELD_NUMBER;
      hash = (53 * hash) + org.apache.flink.com.google.protobuf.Internal.hashBoolean(
          getIsCancellationRequest());
      hash = (37 * hash) + CANCELLATION_TOKEN_FIELD_NUMBER;
      hash = (53 * hash) + getCancellationToken().hashCode();
      hash = (37 * hash) + DELAY_IN_MS_FIELD_NUMBER;
      hash = (53 * hash) + org.apache.flink.com.google.protobuf.Internal.hashLong(
          getDelayInMs());
      if (hasTarget()) {
        hash = (37 * hash) + TARGET_FIELD_NUMBER;
        hash = (53 * hash) + getTarget().hashCode();
      }
      if (hasArgument()) {
        hash = (37 * hash) + ARGUMENT_FIELD_NUMBER;
        hash = (53 * hash) + getArgument().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static FromFunction.DelayedInvocation parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.DelayedInvocation parseFrom(
        java.nio.ByteBuffer data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.DelayedInvocation parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.DelayedInvocation parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.DelayedInvocation parseFrom(byte[] data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.DelayedInvocation parseFrom(
        byte[] data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.DelayedInvocation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static FromFunction.DelayedInvocation parseFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static FromFunction.DelayedInvocation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static FromFunction.DelayedInvocation parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static FromFunction.DelayedInvocation parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static FromFunction.DelayedInvocation parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(FromFunction.DelayedInvocation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * DelayedInvocation represents a delayed remote function call with a target address, an argument
     * and a delay in milliseconds, after which this message to be sent.
     * </pre>
     *
     * Protobuf type {@code io.statefun.sdk.reqreply.FromFunction.DelayedInvocation}
     */
    @javax.annotation.Generated("proto") public static final class Builder extends
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:io.statefun.sdk.reqreply.FromFunction.DelayedInvocation)
        FromFunction.DelayedInvocationOrBuilder {
      public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_DelayedInvocation_descriptor;
      }

      @Override
      protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_DelayedInvocation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                FromFunction.DelayedInvocation.class, FromFunction.DelayedInvocation.Builder.class);
      }

      // Construct using generated.FromFunction.DelayedInvocation.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.flink.com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        isCancellationRequest_ = false;

        cancellationToken_ = "";

        delayInMs_ = 0L;

        if (targetBuilder_ == null) {
          target_ = null;
        } else {
          target_ = null;
          targetBuilder_ = null;
        }
        if (argumentBuilder_ == null) {
          argument_ = null;
        } else {
          argument_ = null;
          argumentBuilder_ = null;
        }
        return this;
      }

      @Override
      public org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_DelayedInvocation_descriptor;
      }

      @Override
      public FromFunction.DelayedInvocation getDefaultInstanceForType() {
        return FromFunction.DelayedInvocation.getDefaultInstance();
      }

      @Override
      public FromFunction.DelayedInvocation build() {
        FromFunction.DelayedInvocation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public FromFunction.DelayedInvocation buildPartial() {
        FromFunction.DelayedInvocation result = new FromFunction.DelayedInvocation(this);
        result.isCancellationRequest_ = isCancellationRequest_;
        result.cancellationToken_ = cancellationToken_;
        result.delayInMs_ = delayInMs_;
        if (targetBuilder_ == null) {
          result.target_ = target_;
        } else {
          result.target_ = targetBuilder_.build();
        }
        if (argumentBuilder_ == null) {
          result.argument_ = argument_;
        } else {
          result.argument_ = argumentBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          org.apache.flink.com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(org.apache.flink.com.google.protobuf.Message other) {
        if (other instanceof FromFunction.DelayedInvocation) {
          return mergeFrom((FromFunction.DelayedInvocation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(FromFunction.DelayedInvocation other) {
        if (other == FromFunction.DelayedInvocation.getDefaultInstance()) return this;
        if (other.getIsCancellationRequest() != false) {
          setIsCancellationRequest(other.getIsCancellationRequest());
        }
        if (!other.getCancellationToken().isEmpty()) {
          cancellationToken_ = other.cancellationToken_;
          onChanged();
        }
        if (other.getDelayInMs() != 0L) {
          setDelayInMs(other.getDelayInMs());
        }
        if (other.hasTarget()) {
          mergeTarget(other.getTarget());
        }
        if (other.hasArgument()) {
          mergeArgument(other.getArgument());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        FromFunction.DelayedInvocation parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (FromFunction.DelayedInvocation) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private boolean isCancellationRequest_ ;
      /**
       * <pre>
       * a boolean value (default false) that indicates rather this is a regular delayed message, or (true) a message
       * cancellation request.
       * in case of a regular delayed message all other fields are expected to be preset, otherwise only the
       * cancellation_token is expected
       * </pre>
       *
       * <code>bool is_cancellation_request = 10;</code>
       */
      public boolean getIsCancellationRequest() {
        return isCancellationRequest_;
      }
      /**
       * <pre>
       * a boolean value (default false) that indicates rather this is a regular delayed message, or (true) a message
       * cancellation request.
       * in case of a regular delayed message all other fields are expected to be preset, otherwise only the
       * cancellation_token is expected
       * </pre>
       *
       * <code>bool is_cancellation_request = 10;</code>
       */
      public Builder setIsCancellationRequest(boolean value) {
        
        isCancellationRequest_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * a boolean value (default false) that indicates rather this is a regular delayed message, or (true) a message
       * cancellation request.
       * in case of a regular delayed message all other fields are expected to be preset, otherwise only the
       * cancellation_token is expected
       * </pre>
       *
       * <code>bool is_cancellation_request = 10;</code>
       */
      public Builder clearIsCancellationRequest() {
        
        isCancellationRequest_ = false;
        onChanged();
        return this;
      }

      private Object cancellationToken_ = "";
      /**
       * <pre>
       * an optional cancellation token that can be used to request the "unsending" of a delayed message.
       * </pre>
       *
       * <code>string cancellation_token = 11;</code>
       */
      public String getCancellationToken() {
        Object ref = cancellationToken_;
        if (!(ref instanceof String)) {
          org.apache.flink.com.google.protobuf.ByteString bs =
              (org.apache.flink.com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          cancellationToken_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * an optional cancellation token that can be used to request the "unsending" of a delayed message.
       * </pre>
       *
       * <code>string cancellation_token = 11;</code>
       */
      public org.apache.flink.com.google.protobuf.ByteString
          getCancellationTokenBytes() {
        Object ref = cancellationToken_;
        if (ref instanceof String) {
          org.apache.flink.com.google.protobuf.ByteString b = 
              org.apache.flink.com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          cancellationToken_ = b;
          return b;
        } else {
          return (org.apache.flink.com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * an optional cancellation token that can be used to request the "unsending" of a delayed message.
       * </pre>
       *
       * <code>string cancellation_token = 11;</code>
       */
      public Builder setCancellationToken(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        cancellationToken_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * an optional cancellation token that can be used to request the "unsending" of a delayed message.
       * </pre>
       *
       * <code>string cancellation_token = 11;</code>
       */
      public Builder clearCancellationToken() {
        
        cancellationToken_ = getDefaultInstance().getCancellationToken();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * an optional cancellation token that can be used to request the "unsending" of a delayed message.
       * </pre>
       *
       * <code>string cancellation_token = 11;</code>
       */
      public Builder setCancellationTokenBytes(
          org.apache.flink.com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        cancellationToken_ = value;
        onChanged();
        return this;
      }

      private long delayInMs_ ;
      /**
       * <pre>
       * the amount of milliseconds to wait before sending this message
       * </pre>
       *
       * <code>int64 delay_in_ms = 1;</code>
       */
      public long getDelayInMs() {
        return delayInMs_;
      }
      /**
       * <pre>
       * the amount of milliseconds to wait before sending this message
       * </pre>
       *
       * <code>int64 delay_in_ms = 1;</code>
       */
      public Builder setDelayInMs(long value) {
        
        delayInMs_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the amount of milliseconds to wait before sending this message
       * </pre>
       *
       * <code>int64 delay_in_ms = 1;</code>
       */
      public Builder clearDelayInMs() {
        
        delayInMs_ = 0L;
        onChanged();
        return this;
      }

      private Address target_;
      private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
              Address, Address.Builder, AddressOrBuilder> targetBuilder_;
      /**
       * <pre>
       * the target address to send this message to
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.Address target = 2;</code>
       */
      public boolean hasTarget() {
        return targetBuilder_ != null || target_ != null;
      }
      /**
       * <pre>
       * the target address to send this message to
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.Address target = 2;</code>
       */
      public Address getTarget() {
        if (targetBuilder_ == null) {
          return target_ == null ? Address.getDefaultInstance() : target_;
        } else {
          return targetBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * the target address to send this message to
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.Address target = 2;</code>
       */
      public Builder setTarget(Address value) {
        if (targetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          targetBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * the target address to send this message to
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.Address target = 2;</code>
       */
      public Builder setTarget(
          Address.Builder builderForValue) {
        if (targetBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          targetBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * the target address to send this message to
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.Address target = 2;</code>
       */
      public Builder mergeTarget(Address value) {
        if (targetBuilder_ == null) {
          if (target_ != null) {
            target_ =
              Address.newBuilder(target_).mergeFrom(value).buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          targetBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * the target address to send this message to
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.Address target = 2;</code>
       */
      public Builder clearTarget() {
        if (targetBuilder_ == null) {
          target_ = null;
          onChanged();
        } else {
          target_ = null;
          targetBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * the target address to send this message to
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.Address target = 2;</code>
       */
      public Address.Builder getTargetBuilder() {
        
        onChanged();
        return getTargetFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * the target address to send this message to
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.Address target = 2;</code>
       */
      public AddressOrBuilder getTargetOrBuilder() {
        if (targetBuilder_ != null) {
          return targetBuilder_.getMessageOrBuilder();
        } else {
          return target_ == null ?
              Address.getDefaultInstance() : target_;
        }
      }
      /**
       * <pre>
       * the target address to send this message to
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.Address target = 2;</code>
       */
      private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
              Address, Address.Builder, AddressOrBuilder> 
          getTargetFieldBuilder() {
        if (targetBuilder_ == null) {
          targetBuilder_ = new org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
                  Address, Address.Builder, AddressOrBuilder>(
                  getTarget(),
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        return targetBuilder_;
      }

      private TypedValue argument_;
      private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
              TypedValue, TypedValue.Builder, TypedValueOrBuilder> argumentBuilder_;
      /**
       * <pre>
       * the invocation argument
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
       */
      public boolean hasArgument() {
        return argumentBuilder_ != null || argument_ != null;
      }
      /**
       * <pre>
       * the invocation argument
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
       */
      public TypedValue getArgument() {
        if (argumentBuilder_ == null) {
          return argument_ == null ? TypedValue.getDefaultInstance() : argument_;
        } else {
          return argumentBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * the invocation argument
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
       */
      public Builder setArgument(TypedValue value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          argument_ = value;
          onChanged();
        } else {
          argumentBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * the invocation argument
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
       */
      public Builder setArgument(
          TypedValue.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          argument_ = builderForValue.build();
          onChanged();
        } else {
          argumentBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * the invocation argument
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
       */
      public Builder mergeArgument(TypedValue value) {
        if (argumentBuilder_ == null) {
          if (argument_ != null) {
            argument_ =
              TypedValue.newBuilder(argument_).mergeFrom(value).buildPartial();
          } else {
            argument_ = value;
          }
          onChanged();
        } else {
          argumentBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * the invocation argument
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
       */
      public Builder clearArgument() {
        if (argumentBuilder_ == null) {
          argument_ = null;
          onChanged();
        } else {
          argument_ = null;
          argumentBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * the invocation argument
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
       */
      public TypedValue.Builder getArgumentBuilder() {
        
        onChanged();
        return getArgumentFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * the invocation argument
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
       */
      public TypedValueOrBuilder getArgumentOrBuilder() {
        if (argumentBuilder_ != null) {
          return argumentBuilder_.getMessageOrBuilder();
        } else {
          return argument_ == null ?
              TypedValue.getDefaultInstance() : argument_;
        }
      }
      /**
       * <pre>
       * the invocation argument
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
       */
      private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
              TypedValue, TypedValue.Builder, TypedValueOrBuilder> 
          getArgumentFieldBuilder() {
        if (argumentBuilder_ == null) {
          argumentBuilder_ = new org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
                  TypedValue, TypedValue.Builder, TypedValueOrBuilder>(
                  getArgument(),
                  getParentForChildren(),
                  isClean());
          argument_ = null;
        }
        return argumentBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:io.statefun.sdk.reqreply.FromFunction.DelayedInvocation)
    }

    // @@protoc_insertion_point(class_scope:io.statefun.sdk.reqreply.FromFunction.DelayedInvocation)
    private static final FromFunction.DelayedInvocation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new FromFunction.DelayedInvocation();
    }

    public static FromFunction.DelayedInvocation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.flink.com.google.protobuf.Parser<DelayedInvocation>
        PARSER = new org.apache.flink.com.google.protobuf.AbstractParser<DelayedInvocation>() {
      @Override
      public DelayedInvocation parsePartialFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
        return new DelayedInvocation(input, extensionRegistry);
      }
    };

    public static org.apache.flink.com.google.protobuf.Parser<DelayedInvocation> parser() {
      return PARSER;
    }

    @Override
    public org.apache.flink.com.google.protobuf.Parser<DelayedInvocation> getParserForType() {
      return PARSER;
    }

    @Override
    public FromFunction.DelayedInvocation getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EgressMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:io.statefun.sdk.reqreply.FromFunction.EgressMessage)
      org.apache.flink.com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The target egress namespace
     * </pre>
     *
     * <code>string egress_namespace = 1;</code>
     */
    String getEgressNamespace();
    /**
     * <pre>
     * The target egress namespace
     * </pre>
     *
     * <code>string egress_namespace = 1;</code>
     */
    org.apache.flink.com.google.protobuf.ByteString
        getEgressNamespaceBytes();

    /**
     * <pre>
     * The target egress type
     * </pre>
     *
     * <code>string egress_type = 2;</code>
     */
    String getEgressType();
    /**
     * <pre>
     * The target egress type
     * </pre>
     *
     * <code>string egress_type = 2;</code>
     */
    org.apache.flink.com.google.protobuf.ByteString
        getEgressTypeBytes();

    /**
     * <pre>
     * egress argument
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
     */
    boolean hasArgument();
    /**
     * <pre>
     * egress argument
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
     */
    TypedValue getArgument();
    /**
     * <pre>
     * egress argument
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
     */
    TypedValueOrBuilder getArgumentOrBuilder();
  }
  /**
   * <pre>
   * EgressMessage an argument to forward to an egress.
   * An egress is identified by a namespace and type (see EgressIdentifier SDK class).
   * The argument is an io.statefun.sdk.reqreply.TypedValue.
   * </pre>
   *
   * Protobuf type {@code io.statefun.sdk.reqreply.FromFunction.EgressMessage}
   */
  @javax.annotation.Generated("proto") public  static final class EgressMessage extends
      org.apache.flink.com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:io.statefun.sdk.reqreply.FromFunction.EgressMessage)
      EgressMessageOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EgressMessage.newBuilder() to construct.
    private EgressMessage(org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EgressMessage() {
      egressNamespace_ = "";
      egressType_ = "";
    }

    @Override
    public final org.apache.flink.com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private EgressMessage(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      org.apache.flink.com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          org.apache.flink.com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              String s = input.readStringRequireUtf8();

              egressNamespace_ = s;
              break;
            }
            case 18: {
              String s = input.readStringRequireUtf8();

              egressType_ = s;
              break;
            }
            case 26: {
              TypedValue.Builder subBuilder = null;
              if (argument_ != null) {
                subBuilder = argument_.toBuilder();
              }
              argument_ = input.readMessage(TypedValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(argument_);
                argument_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.apache.flink.com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_EgressMessage_descriptor;
    }

    @Override
    protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_EgressMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              FromFunction.EgressMessage.class, FromFunction.EgressMessage.Builder.class);
    }

    public static final int EGRESS_NAMESPACE_FIELD_NUMBER = 1;
    private volatile Object egressNamespace_;
    /**
     * <pre>
     * The target egress namespace
     * </pre>
     *
     * <code>string egress_namespace = 1;</code>
     */
    public String getEgressNamespace() {
      Object ref = egressNamespace_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        org.apache.flink.com.google.protobuf.ByteString bs = 
            (org.apache.flink.com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        egressNamespace_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The target egress namespace
     * </pre>
     *
     * <code>string egress_namespace = 1;</code>
     */
    public org.apache.flink.com.google.protobuf.ByteString
        getEgressNamespaceBytes() {
      Object ref = egressNamespace_;
      if (ref instanceof String) {
        org.apache.flink.com.google.protobuf.ByteString b = 
            org.apache.flink.com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        egressNamespace_ = b;
        return b;
      } else {
        return (org.apache.flink.com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EGRESS_TYPE_FIELD_NUMBER = 2;
    private volatile Object egressType_;
    /**
     * <pre>
     * The target egress type
     * </pre>
     *
     * <code>string egress_type = 2;</code>
     */
    public String getEgressType() {
      Object ref = egressType_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        org.apache.flink.com.google.protobuf.ByteString bs = 
            (org.apache.flink.com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        egressType_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The target egress type
     * </pre>
     *
     * <code>string egress_type = 2;</code>
     */
    public org.apache.flink.com.google.protobuf.ByteString
        getEgressTypeBytes() {
      Object ref = egressType_;
      if (ref instanceof String) {
        org.apache.flink.com.google.protobuf.ByteString b = 
            org.apache.flink.com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        egressType_ = b;
        return b;
      } else {
        return (org.apache.flink.com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ARGUMENT_FIELD_NUMBER = 3;
    private TypedValue argument_;
    /**
     * <pre>
     * egress argument
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
     */
    public boolean hasArgument() {
      return argument_ != null;
    }
    /**
     * <pre>
     * egress argument
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
     */
    public TypedValue getArgument() {
      return argument_ == null ? TypedValue.getDefaultInstance() : argument_;
    }
    /**
     * <pre>
     * egress argument
     * </pre>
     *
     * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
     */
    public TypedValueOrBuilder getArgumentOrBuilder() {
      return getArgument();
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(org.apache.flink.com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getEgressNamespaceBytes().isEmpty()) {
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.writeString(output, 1, egressNamespace_);
      }
      if (!getEgressTypeBytes().isEmpty()) {
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.writeString(output, 2, egressType_);
      }
      if (argument_ != null) {
        output.writeMessage(3, getArgument());
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getEgressNamespaceBytes().isEmpty()) {
        size += org.apache.flink.com.google.protobuf.GeneratedMessageV3.computeStringSize(1, egressNamespace_);
      }
      if (!getEgressTypeBytes().isEmpty()) {
        size += org.apache.flink.com.google.protobuf.GeneratedMessageV3.computeStringSize(2, egressType_);
      }
      if (argument_ != null) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getArgument());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof FromFunction.EgressMessage)) {
        return super.equals(obj);
      }
      FromFunction.EgressMessage other = (FromFunction.EgressMessage) obj;

      if (!getEgressNamespace()
          .equals(other.getEgressNamespace())) return false;
      if (!getEgressType()
          .equals(other.getEgressType())) return false;
      if (hasArgument() != other.hasArgument()) return false;
      if (hasArgument()) {
        if (!getArgument()
            .equals(other.getArgument())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + EGRESS_NAMESPACE_FIELD_NUMBER;
      hash = (53 * hash) + getEgressNamespace().hashCode();
      hash = (37 * hash) + EGRESS_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getEgressType().hashCode();
      if (hasArgument()) {
        hash = (37 * hash) + ARGUMENT_FIELD_NUMBER;
        hash = (53 * hash) + getArgument().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static FromFunction.EgressMessage parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.EgressMessage parseFrom(
        java.nio.ByteBuffer data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.EgressMessage parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.EgressMessage parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.EgressMessage parseFrom(byte[] data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.EgressMessage parseFrom(
        byte[] data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.EgressMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static FromFunction.EgressMessage parseFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static FromFunction.EgressMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static FromFunction.EgressMessage parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static FromFunction.EgressMessage parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static FromFunction.EgressMessage parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(FromFunction.EgressMessage prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * EgressMessage an argument to forward to an egress.
     * An egress is identified by a namespace and type (see EgressIdentifier SDK class).
     * The argument is an io.statefun.sdk.reqreply.TypedValue.
     * </pre>
     *
     * Protobuf type {@code io.statefun.sdk.reqreply.FromFunction.EgressMessage}
     */
    @javax.annotation.Generated("proto") public static final class Builder extends
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:io.statefun.sdk.reqreply.FromFunction.EgressMessage)
        FromFunction.EgressMessageOrBuilder {
      public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_EgressMessage_descriptor;
      }

      @Override
      protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_EgressMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                FromFunction.EgressMessage.class, FromFunction.EgressMessage.Builder.class);
      }

      // Construct using generated.FromFunction.EgressMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.flink.com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        egressNamespace_ = "";

        egressType_ = "";

        if (argumentBuilder_ == null) {
          argument_ = null;
        } else {
          argument_ = null;
          argumentBuilder_ = null;
        }
        return this;
      }

      @Override
      public org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_EgressMessage_descriptor;
      }

      @Override
      public FromFunction.EgressMessage getDefaultInstanceForType() {
        return FromFunction.EgressMessage.getDefaultInstance();
      }

      @Override
      public FromFunction.EgressMessage build() {
        FromFunction.EgressMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public FromFunction.EgressMessage buildPartial() {
        FromFunction.EgressMessage result = new FromFunction.EgressMessage(this);
        result.egressNamespace_ = egressNamespace_;
        result.egressType_ = egressType_;
        if (argumentBuilder_ == null) {
          result.argument_ = argument_;
        } else {
          result.argument_ = argumentBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          org.apache.flink.com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(org.apache.flink.com.google.protobuf.Message other) {
        if (other instanceof FromFunction.EgressMessage) {
          return mergeFrom((FromFunction.EgressMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(FromFunction.EgressMessage other) {
        if (other == FromFunction.EgressMessage.getDefaultInstance()) return this;
        if (!other.getEgressNamespace().isEmpty()) {
          egressNamespace_ = other.egressNamespace_;
          onChanged();
        }
        if (!other.getEgressType().isEmpty()) {
          egressType_ = other.egressType_;
          onChanged();
        }
        if (other.hasArgument()) {
          mergeArgument(other.getArgument());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        FromFunction.EgressMessage parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (FromFunction.EgressMessage) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private Object egressNamespace_ = "";
      /**
       * <pre>
       * The target egress namespace
       * </pre>
       *
       * <code>string egress_namespace = 1;</code>
       */
      public String getEgressNamespace() {
        Object ref = egressNamespace_;
        if (!(ref instanceof String)) {
          org.apache.flink.com.google.protobuf.ByteString bs =
              (org.apache.flink.com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          egressNamespace_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * The target egress namespace
       * </pre>
       *
       * <code>string egress_namespace = 1;</code>
       */
      public org.apache.flink.com.google.protobuf.ByteString
          getEgressNamespaceBytes() {
        Object ref = egressNamespace_;
        if (ref instanceof String) {
          org.apache.flink.com.google.protobuf.ByteString b = 
              org.apache.flink.com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          egressNamespace_ = b;
          return b;
        } else {
          return (org.apache.flink.com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The target egress namespace
       * </pre>
       *
       * <code>string egress_namespace = 1;</code>
       */
      public Builder setEgressNamespace(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        egressNamespace_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The target egress namespace
       * </pre>
       *
       * <code>string egress_namespace = 1;</code>
       */
      public Builder clearEgressNamespace() {
        
        egressNamespace_ = getDefaultInstance().getEgressNamespace();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The target egress namespace
       * </pre>
       *
       * <code>string egress_namespace = 1;</code>
       */
      public Builder setEgressNamespaceBytes(
          org.apache.flink.com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        egressNamespace_ = value;
        onChanged();
        return this;
      }

      private Object egressType_ = "";
      /**
       * <pre>
       * The target egress type
       * </pre>
       *
       * <code>string egress_type = 2;</code>
       */
      public String getEgressType() {
        Object ref = egressType_;
        if (!(ref instanceof String)) {
          org.apache.flink.com.google.protobuf.ByteString bs =
              (org.apache.flink.com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          egressType_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * The target egress type
       * </pre>
       *
       * <code>string egress_type = 2;</code>
       */
      public org.apache.flink.com.google.protobuf.ByteString
          getEgressTypeBytes() {
        Object ref = egressType_;
        if (ref instanceof String) {
          org.apache.flink.com.google.protobuf.ByteString b = 
              org.apache.flink.com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          egressType_ = b;
          return b;
        } else {
          return (org.apache.flink.com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The target egress type
       * </pre>
       *
       * <code>string egress_type = 2;</code>
       */
      public Builder setEgressType(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        egressType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The target egress type
       * </pre>
       *
       * <code>string egress_type = 2;</code>
       */
      public Builder clearEgressType() {
        
        egressType_ = getDefaultInstance().getEgressType();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The target egress type
       * </pre>
       *
       * <code>string egress_type = 2;</code>
       */
      public Builder setEgressTypeBytes(
          org.apache.flink.com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        egressType_ = value;
        onChanged();
        return this;
      }

      private TypedValue argument_;
      private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
              TypedValue, TypedValue.Builder, TypedValueOrBuilder> argumentBuilder_;
      /**
       * <pre>
       * egress argument
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
       */
      public boolean hasArgument() {
        return argumentBuilder_ != null || argument_ != null;
      }
      /**
       * <pre>
       * egress argument
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
       */
      public TypedValue getArgument() {
        if (argumentBuilder_ == null) {
          return argument_ == null ? TypedValue.getDefaultInstance() : argument_;
        } else {
          return argumentBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * egress argument
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
       */
      public Builder setArgument(TypedValue value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          argument_ = value;
          onChanged();
        } else {
          argumentBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * egress argument
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
       */
      public Builder setArgument(
          TypedValue.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          argument_ = builderForValue.build();
          onChanged();
        } else {
          argumentBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * egress argument
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
       */
      public Builder mergeArgument(TypedValue value) {
        if (argumentBuilder_ == null) {
          if (argument_ != null) {
            argument_ =
              TypedValue.newBuilder(argument_).mergeFrom(value).buildPartial();
          } else {
            argument_ = value;
          }
          onChanged();
        } else {
          argumentBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * egress argument
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
       */
      public Builder clearArgument() {
        if (argumentBuilder_ == null) {
          argument_ = null;
          onChanged();
        } else {
          argument_ = null;
          argumentBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * egress argument
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
       */
      public TypedValue.Builder getArgumentBuilder() {
        
        onChanged();
        return getArgumentFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * egress argument
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
       */
      public TypedValueOrBuilder getArgumentOrBuilder() {
        if (argumentBuilder_ != null) {
          return argumentBuilder_.getMessageOrBuilder();
        } else {
          return argument_ == null ?
              TypedValue.getDefaultInstance() : argument_;
        }
      }
      /**
       * <pre>
       * egress argument
       * </pre>
       *
       * <code>.io.statefun.sdk.reqreply.TypedValue argument = 3;</code>
       */
      private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
              TypedValue, TypedValue.Builder, TypedValueOrBuilder> 
          getArgumentFieldBuilder() {
        if (argumentBuilder_ == null) {
          argumentBuilder_ = new org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
                  TypedValue, TypedValue.Builder, TypedValueOrBuilder>(
                  getArgument(),
                  getParentForChildren(),
                  isClean());
          argument_ = null;
        }
        return argumentBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:io.statefun.sdk.reqreply.FromFunction.EgressMessage)
    }

    // @@protoc_insertion_point(class_scope:io.statefun.sdk.reqreply.FromFunction.EgressMessage)
    private static final FromFunction.EgressMessage DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new FromFunction.EgressMessage();
    }

    public static FromFunction.EgressMessage getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.flink.com.google.protobuf.Parser<EgressMessage>
        PARSER = new org.apache.flink.com.google.protobuf.AbstractParser<EgressMessage>() {
      @Override
      public EgressMessage parsePartialFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
        return new EgressMessage(input, extensionRegistry);
      }
    };

    public static org.apache.flink.com.google.protobuf.Parser<EgressMessage> parser() {
      return PARSER;
    }

    @Override
    public org.apache.flink.com.google.protobuf.Parser<EgressMessage> getParserForType() {
      return PARSER;
    }

    @Override
    public FromFunction.EgressMessage getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InvocationResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:io.statefun.sdk.reqreply.FromFunction.InvocationResponse)
      org.apache.flink.com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
     */
    java.util.List<FromFunction.PersistedValueMutation> 
        getStateMutationsList();
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
     */
    FromFunction.PersistedValueMutation getStateMutations(int index);
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
     */
    int getStateMutationsCount();
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
     */
    java.util.List<? extends FromFunction.PersistedValueMutationOrBuilder> 
        getStateMutationsOrBuilderList();
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
     */
    FromFunction.PersistedValueMutationOrBuilder getStateMutationsOrBuilder(
        int index);

    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
     */
    java.util.List<FromFunction.Invocation> 
        getOutgoingMessagesList();
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
     */
    FromFunction.Invocation getOutgoingMessages(int index);
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
     */
    int getOutgoingMessagesCount();
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
     */
    java.util.List<? extends FromFunction.InvocationOrBuilder> 
        getOutgoingMessagesOrBuilderList();
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
     */
    FromFunction.InvocationOrBuilder getOutgoingMessagesOrBuilder(
        int index);

    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
     */
    java.util.List<FromFunction.DelayedInvocation> 
        getDelayedInvocationsList();
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
     */
    FromFunction.DelayedInvocation getDelayedInvocations(int index);
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
     */
    int getDelayedInvocationsCount();
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
     */
    java.util.List<? extends FromFunction.DelayedInvocationOrBuilder> 
        getDelayedInvocationsOrBuilderList();
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
     */
    FromFunction.DelayedInvocationOrBuilder getDelayedInvocationsOrBuilder(
        int index);

    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
     */
    java.util.List<FromFunction.EgressMessage> 
        getOutgoingEgressesList();
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
     */
    FromFunction.EgressMessage getOutgoingEgresses(int index);
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
     */
    int getOutgoingEgressesCount();
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
     */
    java.util.List<? extends FromFunction.EgressMessageOrBuilder> 
        getOutgoingEgressesOrBuilderList();
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
     */
    FromFunction.EgressMessageOrBuilder getOutgoingEgressesOrBuilder(
        int index);
  }
  /**
   * <pre>
   * InvocationResponse represents a result of an io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest
   * it contains a list of state mutation to preform as a result of computing this batch, and a list of outgoing messages.
   * </pre>
   *
   * Protobuf type {@code io.statefun.sdk.reqreply.FromFunction.InvocationResponse}
   */
  @javax.annotation.Generated("proto") public  static final class InvocationResponse extends
      org.apache.flink.com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:io.statefun.sdk.reqreply.FromFunction.InvocationResponse)
      InvocationResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use InvocationResponse.newBuilder() to construct.
    private InvocationResponse(org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InvocationResponse() {
      stateMutations_ = java.util.Collections.emptyList();
      outgoingMessages_ = java.util.Collections.emptyList();
      delayedInvocations_ = java.util.Collections.emptyList();
      outgoingEgresses_ = java.util.Collections.emptyList();
    }

    @Override
    public final org.apache.flink.com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private InvocationResponse(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      org.apache.flink.com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          org.apache.flink.com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                stateMutations_ = new java.util.ArrayList<FromFunction.PersistedValueMutation>();
                mutable_bitField0_ |= 0x00000001;
              }
              stateMutations_.add(
                  input.readMessage(FromFunction.PersistedValueMutation.parser(), extensionRegistry));
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                outgoingMessages_ = new java.util.ArrayList<FromFunction.Invocation>();
                mutable_bitField0_ |= 0x00000002;
              }
              outgoingMessages_.add(
                  input.readMessage(FromFunction.Invocation.parser(), extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                delayedInvocations_ = new java.util.ArrayList<FromFunction.DelayedInvocation>();
                mutable_bitField0_ |= 0x00000004;
              }
              delayedInvocations_.add(
                  input.readMessage(FromFunction.DelayedInvocation.parser(), extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) != 0)) {
                outgoingEgresses_ = new java.util.ArrayList<FromFunction.EgressMessage>();
                mutable_bitField0_ |= 0x00000008;
              }
              outgoingEgresses_.add(
                  input.readMessage(FromFunction.EgressMessage.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.apache.flink.com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          stateMutations_ = java.util.Collections.unmodifiableList(stateMutations_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          outgoingMessages_ = java.util.Collections.unmodifiableList(outgoingMessages_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          delayedInvocations_ = java.util.Collections.unmodifiableList(delayedInvocations_);
        }
        if (((mutable_bitField0_ & 0x00000008) != 0)) {
          outgoingEgresses_ = java.util.Collections.unmodifiableList(outgoingEgresses_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_InvocationResponse_descriptor;
    }

    @Override
    protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_InvocationResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              FromFunction.InvocationResponse.class, FromFunction.InvocationResponse.Builder.class);
    }

    public static final int STATE_MUTATIONS_FIELD_NUMBER = 1;
    private java.util.List<FromFunction.PersistedValueMutation> stateMutations_;
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
     */
    public java.util.List<FromFunction.PersistedValueMutation> getStateMutationsList() {
      return stateMutations_;
    }
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
     */
    public java.util.List<? extends FromFunction.PersistedValueMutationOrBuilder> 
        getStateMutationsOrBuilderList() {
      return stateMutations_;
    }
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
     */
    public int getStateMutationsCount() {
      return stateMutations_.size();
    }
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
     */
    public FromFunction.PersistedValueMutation getStateMutations(int index) {
      return stateMutations_.get(index);
    }
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
     */
    public FromFunction.PersistedValueMutationOrBuilder getStateMutationsOrBuilder(
        int index) {
      return stateMutations_.get(index);
    }

    public static final int OUTGOING_MESSAGES_FIELD_NUMBER = 2;
    private java.util.List<FromFunction.Invocation> outgoingMessages_;
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
     */
    public java.util.List<FromFunction.Invocation> getOutgoingMessagesList() {
      return outgoingMessages_;
    }
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
     */
    public java.util.List<? extends FromFunction.InvocationOrBuilder> 
        getOutgoingMessagesOrBuilderList() {
      return outgoingMessages_;
    }
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
     */
    public int getOutgoingMessagesCount() {
      return outgoingMessages_.size();
    }
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
     */
    public FromFunction.Invocation getOutgoingMessages(int index) {
      return outgoingMessages_.get(index);
    }
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
     */
    public FromFunction.InvocationOrBuilder getOutgoingMessagesOrBuilder(
        int index) {
      return outgoingMessages_.get(index);
    }

    public static final int DELAYED_INVOCATIONS_FIELD_NUMBER = 3;
    private java.util.List<FromFunction.DelayedInvocation> delayedInvocations_;
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
     */
    public java.util.List<FromFunction.DelayedInvocation> getDelayedInvocationsList() {
      return delayedInvocations_;
    }
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
     */
    public java.util.List<? extends FromFunction.DelayedInvocationOrBuilder> 
        getDelayedInvocationsOrBuilderList() {
      return delayedInvocations_;
    }
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
     */
    public int getDelayedInvocationsCount() {
      return delayedInvocations_.size();
    }
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
     */
    public FromFunction.DelayedInvocation getDelayedInvocations(int index) {
      return delayedInvocations_.get(index);
    }
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
     */
    public FromFunction.DelayedInvocationOrBuilder getDelayedInvocationsOrBuilder(
        int index) {
      return delayedInvocations_.get(index);
    }

    public static final int OUTGOING_EGRESSES_FIELD_NUMBER = 4;
    private java.util.List<FromFunction.EgressMessage> outgoingEgresses_;
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
     */
    public java.util.List<FromFunction.EgressMessage> getOutgoingEgressesList() {
      return outgoingEgresses_;
    }
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
     */
    public java.util.List<? extends FromFunction.EgressMessageOrBuilder> 
        getOutgoingEgressesOrBuilderList() {
      return outgoingEgresses_;
    }
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
     */
    public int getOutgoingEgressesCount() {
      return outgoingEgresses_.size();
    }
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
     */
    public FromFunction.EgressMessage getOutgoingEgresses(int index) {
      return outgoingEgresses_.get(index);
    }
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
     */
    public FromFunction.EgressMessageOrBuilder getOutgoingEgressesOrBuilder(
        int index) {
      return outgoingEgresses_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(org.apache.flink.com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < stateMutations_.size(); i++) {
        output.writeMessage(1, stateMutations_.get(i));
      }
      for (int i = 0; i < outgoingMessages_.size(); i++) {
        output.writeMessage(2, outgoingMessages_.get(i));
      }
      for (int i = 0; i < delayedInvocations_.size(); i++) {
        output.writeMessage(3, delayedInvocations_.get(i));
      }
      for (int i = 0; i < outgoingEgresses_.size(); i++) {
        output.writeMessage(4, outgoingEgresses_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < stateMutations_.size(); i++) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, stateMutations_.get(i));
      }
      for (int i = 0; i < outgoingMessages_.size(); i++) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, outgoingMessages_.get(i));
      }
      for (int i = 0; i < delayedInvocations_.size(); i++) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, delayedInvocations_.get(i));
      }
      for (int i = 0; i < outgoingEgresses_.size(); i++) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, outgoingEgresses_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof FromFunction.InvocationResponse)) {
        return super.equals(obj);
      }
      FromFunction.InvocationResponse other = (FromFunction.InvocationResponse) obj;

      if (!getStateMutationsList()
          .equals(other.getStateMutationsList())) return false;
      if (!getOutgoingMessagesList()
          .equals(other.getOutgoingMessagesList())) return false;
      if (!getDelayedInvocationsList()
          .equals(other.getDelayedInvocationsList())) return false;
      if (!getOutgoingEgressesList()
          .equals(other.getOutgoingEgressesList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getStateMutationsCount() > 0) {
        hash = (37 * hash) + STATE_MUTATIONS_FIELD_NUMBER;
        hash = (53 * hash) + getStateMutationsList().hashCode();
      }
      if (getOutgoingMessagesCount() > 0) {
        hash = (37 * hash) + OUTGOING_MESSAGES_FIELD_NUMBER;
        hash = (53 * hash) + getOutgoingMessagesList().hashCode();
      }
      if (getDelayedInvocationsCount() > 0) {
        hash = (37 * hash) + DELAYED_INVOCATIONS_FIELD_NUMBER;
        hash = (53 * hash) + getDelayedInvocationsList().hashCode();
      }
      if (getOutgoingEgressesCount() > 0) {
        hash = (37 * hash) + OUTGOING_EGRESSES_FIELD_NUMBER;
        hash = (53 * hash) + getOutgoingEgressesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static FromFunction.InvocationResponse parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.InvocationResponse parseFrom(
        java.nio.ByteBuffer data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.InvocationResponse parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.InvocationResponse parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.InvocationResponse parseFrom(byte[] data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.InvocationResponse parseFrom(
        byte[] data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.InvocationResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static FromFunction.InvocationResponse parseFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static FromFunction.InvocationResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static FromFunction.InvocationResponse parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static FromFunction.InvocationResponse parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static FromFunction.InvocationResponse parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(FromFunction.InvocationResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * InvocationResponse represents a result of an io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest
     * it contains a list of state mutation to preform as a result of computing this batch, and a list of outgoing messages.
     * </pre>
     *
     * Protobuf type {@code io.statefun.sdk.reqreply.FromFunction.InvocationResponse}
     */
    @javax.annotation.Generated("proto") public static final class Builder extends
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:io.statefun.sdk.reqreply.FromFunction.InvocationResponse)
        FromFunction.InvocationResponseOrBuilder {
      public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_InvocationResponse_descriptor;
      }

      @Override
      protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_InvocationResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                FromFunction.InvocationResponse.class, FromFunction.InvocationResponse.Builder.class);
      }

      // Construct using generated.FromFunction.InvocationResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.flink.com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getStateMutationsFieldBuilder();
          getOutgoingMessagesFieldBuilder();
          getDelayedInvocationsFieldBuilder();
          getOutgoingEgressesFieldBuilder();
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        if (stateMutationsBuilder_ == null) {
          stateMutations_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          stateMutationsBuilder_.clear();
        }
        if (outgoingMessagesBuilder_ == null) {
          outgoingMessages_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          outgoingMessagesBuilder_.clear();
        }
        if (delayedInvocationsBuilder_ == null) {
          delayedInvocations_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          delayedInvocationsBuilder_.clear();
        }
        if (outgoingEgressesBuilder_ == null) {
          outgoingEgresses_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          outgoingEgressesBuilder_.clear();
        }
        return this;
      }

      @Override
      public org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_InvocationResponse_descriptor;
      }

      @Override
      public FromFunction.InvocationResponse getDefaultInstanceForType() {
        return FromFunction.InvocationResponse.getDefaultInstance();
      }

      @Override
      public FromFunction.InvocationResponse build() {
        FromFunction.InvocationResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public FromFunction.InvocationResponse buildPartial() {
        FromFunction.InvocationResponse result = new FromFunction.InvocationResponse(this);
        int from_bitField0_ = bitField0_;
        if (stateMutationsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            stateMutations_ = java.util.Collections.unmodifiableList(stateMutations_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.stateMutations_ = stateMutations_;
        } else {
          result.stateMutations_ = stateMutationsBuilder_.build();
        }
        if (outgoingMessagesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            outgoingMessages_ = java.util.Collections.unmodifiableList(outgoingMessages_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.outgoingMessages_ = outgoingMessages_;
        } else {
          result.outgoingMessages_ = outgoingMessagesBuilder_.build();
        }
        if (delayedInvocationsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            delayedInvocations_ = java.util.Collections.unmodifiableList(delayedInvocations_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.delayedInvocations_ = delayedInvocations_;
        } else {
          result.delayedInvocations_ = delayedInvocationsBuilder_.build();
        }
        if (outgoingEgressesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            outgoingEgresses_ = java.util.Collections.unmodifiableList(outgoingEgresses_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.outgoingEgresses_ = outgoingEgresses_;
        } else {
          result.outgoingEgresses_ = outgoingEgressesBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          org.apache.flink.com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(org.apache.flink.com.google.protobuf.Message other) {
        if (other instanceof FromFunction.InvocationResponse) {
          return mergeFrom((FromFunction.InvocationResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(FromFunction.InvocationResponse other) {
        if (other == FromFunction.InvocationResponse.getDefaultInstance()) return this;
        if (stateMutationsBuilder_ == null) {
          if (!other.stateMutations_.isEmpty()) {
            if (stateMutations_.isEmpty()) {
              stateMutations_ = other.stateMutations_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureStateMutationsIsMutable();
              stateMutations_.addAll(other.stateMutations_);
            }
            onChanged();
          }
        } else {
          if (!other.stateMutations_.isEmpty()) {
            if (stateMutationsBuilder_.isEmpty()) {
              stateMutationsBuilder_.dispose();
              stateMutationsBuilder_ = null;
              stateMutations_ = other.stateMutations_;
              bitField0_ = (bitField0_ & ~0x00000001);
              stateMutationsBuilder_ = 
                org.apache.flink.com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getStateMutationsFieldBuilder() : null;
            } else {
              stateMutationsBuilder_.addAllMessages(other.stateMutations_);
            }
          }
        }
        if (outgoingMessagesBuilder_ == null) {
          if (!other.outgoingMessages_.isEmpty()) {
            if (outgoingMessages_.isEmpty()) {
              outgoingMessages_ = other.outgoingMessages_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureOutgoingMessagesIsMutable();
              outgoingMessages_.addAll(other.outgoingMessages_);
            }
            onChanged();
          }
        } else {
          if (!other.outgoingMessages_.isEmpty()) {
            if (outgoingMessagesBuilder_.isEmpty()) {
              outgoingMessagesBuilder_.dispose();
              outgoingMessagesBuilder_ = null;
              outgoingMessages_ = other.outgoingMessages_;
              bitField0_ = (bitField0_ & ~0x00000002);
              outgoingMessagesBuilder_ = 
                org.apache.flink.com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getOutgoingMessagesFieldBuilder() : null;
            } else {
              outgoingMessagesBuilder_.addAllMessages(other.outgoingMessages_);
            }
          }
        }
        if (delayedInvocationsBuilder_ == null) {
          if (!other.delayedInvocations_.isEmpty()) {
            if (delayedInvocations_.isEmpty()) {
              delayedInvocations_ = other.delayedInvocations_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureDelayedInvocationsIsMutable();
              delayedInvocations_.addAll(other.delayedInvocations_);
            }
            onChanged();
          }
        } else {
          if (!other.delayedInvocations_.isEmpty()) {
            if (delayedInvocationsBuilder_.isEmpty()) {
              delayedInvocationsBuilder_.dispose();
              delayedInvocationsBuilder_ = null;
              delayedInvocations_ = other.delayedInvocations_;
              bitField0_ = (bitField0_ & ~0x00000004);
              delayedInvocationsBuilder_ = 
                org.apache.flink.com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDelayedInvocationsFieldBuilder() : null;
            } else {
              delayedInvocationsBuilder_.addAllMessages(other.delayedInvocations_);
            }
          }
        }
        if (outgoingEgressesBuilder_ == null) {
          if (!other.outgoingEgresses_.isEmpty()) {
            if (outgoingEgresses_.isEmpty()) {
              outgoingEgresses_ = other.outgoingEgresses_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureOutgoingEgressesIsMutable();
              outgoingEgresses_.addAll(other.outgoingEgresses_);
            }
            onChanged();
          }
        } else {
          if (!other.outgoingEgresses_.isEmpty()) {
            if (outgoingEgressesBuilder_.isEmpty()) {
              outgoingEgressesBuilder_.dispose();
              outgoingEgressesBuilder_ = null;
              outgoingEgresses_ = other.outgoingEgresses_;
              bitField0_ = (bitField0_ & ~0x00000008);
              outgoingEgressesBuilder_ = 
                org.apache.flink.com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getOutgoingEgressesFieldBuilder() : null;
            } else {
              outgoingEgressesBuilder_.addAllMessages(other.outgoingEgresses_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        FromFunction.InvocationResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (FromFunction.InvocationResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<FromFunction.PersistedValueMutation> stateMutations_ =
        java.util.Collections.emptyList();
      private void ensureStateMutationsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          stateMutations_ = new java.util.ArrayList<FromFunction.PersistedValueMutation>(stateMutations_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.apache.flink.com.google.protobuf.RepeatedFieldBuilderV3<
          FromFunction.PersistedValueMutation, FromFunction.PersistedValueMutation.Builder, FromFunction.PersistedValueMutationOrBuilder> stateMutationsBuilder_;

      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
       */
      public java.util.List<FromFunction.PersistedValueMutation> getStateMutationsList() {
        if (stateMutationsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(stateMutations_);
        } else {
          return stateMutationsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
       */
      public int getStateMutationsCount() {
        if (stateMutationsBuilder_ == null) {
          return stateMutations_.size();
        } else {
          return stateMutationsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
       */
      public FromFunction.PersistedValueMutation getStateMutations(int index) {
        if (stateMutationsBuilder_ == null) {
          return stateMutations_.get(index);
        } else {
          return stateMutationsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
       */
      public Builder setStateMutations(
          int index, FromFunction.PersistedValueMutation value) {
        if (stateMutationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStateMutationsIsMutable();
          stateMutations_.set(index, value);
          onChanged();
        } else {
          stateMutationsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
       */
      public Builder setStateMutations(
          int index, FromFunction.PersistedValueMutation.Builder builderForValue) {
        if (stateMutationsBuilder_ == null) {
          ensureStateMutationsIsMutable();
          stateMutations_.set(index, builderForValue.build());
          onChanged();
        } else {
          stateMutationsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
       */
      public Builder addStateMutations(FromFunction.PersistedValueMutation value) {
        if (stateMutationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStateMutationsIsMutable();
          stateMutations_.add(value);
          onChanged();
        } else {
          stateMutationsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
       */
      public Builder addStateMutations(
          int index, FromFunction.PersistedValueMutation value) {
        if (stateMutationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStateMutationsIsMutable();
          stateMutations_.add(index, value);
          onChanged();
        } else {
          stateMutationsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
       */
      public Builder addStateMutations(
          FromFunction.PersistedValueMutation.Builder builderForValue) {
        if (stateMutationsBuilder_ == null) {
          ensureStateMutationsIsMutable();
          stateMutations_.add(builderForValue.build());
          onChanged();
        } else {
          stateMutationsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
       */
      public Builder addStateMutations(
          int index, FromFunction.PersistedValueMutation.Builder builderForValue) {
        if (stateMutationsBuilder_ == null) {
          ensureStateMutationsIsMutable();
          stateMutations_.add(index, builderForValue.build());
          onChanged();
        } else {
          stateMutationsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
       */
      public Builder addAllStateMutations(
          Iterable<? extends FromFunction.PersistedValueMutation> values) {
        if (stateMutationsBuilder_ == null) {
          ensureStateMutationsIsMutable();
          org.apache.flink.com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, stateMutations_);
          onChanged();
        } else {
          stateMutationsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
       */
      public Builder clearStateMutations() {
        if (stateMutationsBuilder_ == null) {
          stateMutations_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          stateMutationsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
       */
      public Builder removeStateMutations(int index) {
        if (stateMutationsBuilder_ == null) {
          ensureStateMutationsIsMutable();
          stateMutations_.remove(index);
          onChanged();
        } else {
          stateMutationsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
       */
      public FromFunction.PersistedValueMutation.Builder getStateMutationsBuilder(
          int index) {
        return getStateMutationsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
       */
      public FromFunction.PersistedValueMutationOrBuilder getStateMutationsOrBuilder(
          int index) {
        if (stateMutationsBuilder_ == null) {
          return stateMutations_.get(index);  } else {
          return stateMutationsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
       */
      public java.util.List<? extends FromFunction.PersistedValueMutationOrBuilder> 
           getStateMutationsOrBuilderList() {
        if (stateMutationsBuilder_ != null) {
          return stateMutationsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(stateMutations_);
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
       */
      public FromFunction.PersistedValueMutation.Builder addStateMutationsBuilder() {
        return getStateMutationsFieldBuilder().addBuilder(
            FromFunction.PersistedValueMutation.getDefaultInstance());
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
       */
      public FromFunction.PersistedValueMutation.Builder addStateMutationsBuilder(
          int index) {
        return getStateMutationsFieldBuilder().addBuilder(
            index, FromFunction.PersistedValueMutation.getDefaultInstance());
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueMutation state_mutations = 1;</code>
       */
      public java.util.List<FromFunction.PersistedValueMutation.Builder> 
           getStateMutationsBuilderList() {
        return getStateMutationsFieldBuilder().getBuilderList();
      }
      private org.apache.flink.com.google.protobuf.RepeatedFieldBuilderV3<
          FromFunction.PersistedValueMutation, FromFunction.PersistedValueMutation.Builder, FromFunction.PersistedValueMutationOrBuilder> 
          getStateMutationsFieldBuilder() {
        if (stateMutationsBuilder_ == null) {
          stateMutationsBuilder_ = new org.apache.flink.com.google.protobuf.RepeatedFieldBuilderV3<
              FromFunction.PersistedValueMutation, FromFunction.PersistedValueMutation.Builder, FromFunction.PersistedValueMutationOrBuilder>(
                  stateMutations_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          stateMutations_ = null;
        }
        return stateMutationsBuilder_;
      }

      private java.util.List<FromFunction.Invocation> outgoingMessages_ =
        java.util.Collections.emptyList();
      private void ensureOutgoingMessagesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          outgoingMessages_ = new java.util.ArrayList<FromFunction.Invocation>(outgoingMessages_);
          bitField0_ |= 0x00000002;
         }
      }

      private org.apache.flink.com.google.protobuf.RepeatedFieldBuilderV3<
          FromFunction.Invocation, FromFunction.Invocation.Builder, FromFunction.InvocationOrBuilder> outgoingMessagesBuilder_;

      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
       */
      public java.util.List<FromFunction.Invocation> getOutgoingMessagesList() {
        if (outgoingMessagesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outgoingMessages_);
        } else {
          return outgoingMessagesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
       */
      public int getOutgoingMessagesCount() {
        if (outgoingMessagesBuilder_ == null) {
          return outgoingMessages_.size();
        } else {
          return outgoingMessagesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
       */
      public FromFunction.Invocation getOutgoingMessages(int index) {
        if (outgoingMessagesBuilder_ == null) {
          return outgoingMessages_.get(index);
        } else {
          return outgoingMessagesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
       */
      public Builder setOutgoingMessages(
          int index, FromFunction.Invocation value) {
        if (outgoingMessagesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutgoingMessagesIsMutable();
          outgoingMessages_.set(index, value);
          onChanged();
        } else {
          outgoingMessagesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
       */
      public Builder setOutgoingMessages(
          int index, FromFunction.Invocation.Builder builderForValue) {
        if (outgoingMessagesBuilder_ == null) {
          ensureOutgoingMessagesIsMutable();
          outgoingMessages_.set(index, builderForValue.build());
          onChanged();
        } else {
          outgoingMessagesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
       */
      public Builder addOutgoingMessages(FromFunction.Invocation value) {
        if (outgoingMessagesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutgoingMessagesIsMutable();
          outgoingMessages_.add(value);
          onChanged();
        } else {
          outgoingMessagesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
       */
      public Builder addOutgoingMessages(
          int index, FromFunction.Invocation value) {
        if (outgoingMessagesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutgoingMessagesIsMutable();
          outgoingMessages_.add(index, value);
          onChanged();
        } else {
          outgoingMessagesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
       */
      public Builder addOutgoingMessages(
          FromFunction.Invocation.Builder builderForValue) {
        if (outgoingMessagesBuilder_ == null) {
          ensureOutgoingMessagesIsMutable();
          outgoingMessages_.add(builderForValue.build());
          onChanged();
        } else {
          outgoingMessagesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
       */
      public Builder addOutgoingMessages(
          int index, FromFunction.Invocation.Builder builderForValue) {
        if (outgoingMessagesBuilder_ == null) {
          ensureOutgoingMessagesIsMutable();
          outgoingMessages_.add(index, builderForValue.build());
          onChanged();
        } else {
          outgoingMessagesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
       */
      public Builder addAllOutgoingMessages(
          Iterable<? extends FromFunction.Invocation> values) {
        if (outgoingMessagesBuilder_ == null) {
          ensureOutgoingMessagesIsMutable();
          org.apache.flink.com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, outgoingMessages_);
          onChanged();
        } else {
          outgoingMessagesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
       */
      public Builder clearOutgoingMessages() {
        if (outgoingMessagesBuilder_ == null) {
          outgoingMessages_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          outgoingMessagesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
       */
      public Builder removeOutgoingMessages(int index) {
        if (outgoingMessagesBuilder_ == null) {
          ensureOutgoingMessagesIsMutable();
          outgoingMessages_.remove(index);
          onChanged();
        } else {
          outgoingMessagesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
       */
      public FromFunction.Invocation.Builder getOutgoingMessagesBuilder(
          int index) {
        return getOutgoingMessagesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
       */
      public FromFunction.InvocationOrBuilder getOutgoingMessagesOrBuilder(
          int index) {
        if (outgoingMessagesBuilder_ == null) {
          return outgoingMessages_.get(index);  } else {
          return outgoingMessagesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
       */
      public java.util.List<? extends FromFunction.InvocationOrBuilder> 
           getOutgoingMessagesOrBuilderList() {
        if (outgoingMessagesBuilder_ != null) {
          return outgoingMessagesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outgoingMessages_);
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
       */
      public FromFunction.Invocation.Builder addOutgoingMessagesBuilder() {
        return getOutgoingMessagesFieldBuilder().addBuilder(
            FromFunction.Invocation.getDefaultInstance());
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
       */
      public FromFunction.Invocation.Builder addOutgoingMessagesBuilder(
          int index) {
        return getOutgoingMessagesFieldBuilder().addBuilder(
            index, FromFunction.Invocation.getDefaultInstance());
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.Invocation outgoing_messages = 2;</code>
       */
      public java.util.List<FromFunction.Invocation.Builder> 
           getOutgoingMessagesBuilderList() {
        return getOutgoingMessagesFieldBuilder().getBuilderList();
      }
      private org.apache.flink.com.google.protobuf.RepeatedFieldBuilderV3<
          FromFunction.Invocation, FromFunction.Invocation.Builder, FromFunction.InvocationOrBuilder> 
          getOutgoingMessagesFieldBuilder() {
        if (outgoingMessagesBuilder_ == null) {
          outgoingMessagesBuilder_ = new org.apache.flink.com.google.protobuf.RepeatedFieldBuilderV3<
              FromFunction.Invocation, FromFunction.Invocation.Builder, FromFunction.InvocationOrBuilder>(
                  outgoingMessages_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          outgoingMessages_ = null;
        }
        return outgoingMessagesBuilder_;
      }

      private java.util.List<FromFunction.DelayedInvocation> delayedInvocations_ =
        java.util.Collections.emptyList();
      private void ensureDelayedInvocationsIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          delayedInvocations_ = new java.util.ArrayList<FromFunction.DelayedInvocation>(delayedInvocations_);
          bitField0_ |= 0x00000004;
         }
      }

      private org.apache.flink.com.google.protobuf.RepeatedFieldBuilderV3<
          FromFunction.DelayedInvocation, FromFunction.DelayedInvocation.Builder, FromFunction.DelayedInvocationOrBuilder> delayedInvocationsBuilder_;

      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
       */
      public java.util.List<FromFunction.DelayedInvocation> getDelayedInvocationsList() {
        if (delayedInvocationsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(delayedInvocations_);
        } else {
          return delayedInvocationsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
       */
      public int getDelayedInvocationsCount() {
        if (delayedInvocationsBuilder_ == null) {
          return delayedInvocations_.size();
        } else {
          return delayedInvocationsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
       */
      public FromFunction.DelayedInvocation getDelayedInvocations(int index) {
        if (delayedInvocationsBuilder_ == null) {
          return delayedInvocations_.get(index);
        } else {
          return delayedInvocationsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
       */
      public Builder setDelayedInvocations(
          int index, FromFunction.DelayedInvocation value) {
        if (delayedInvocationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDelayedInvocationsIsMutable();
          delayedInvocations_.set(index, value);
          onChanged();
        } else {
          delayedInvocationsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
       */
      public Builder setDelayedInvocations(
          int index, FromFunction.DelayedInvocation.Builder builderForValue) {
        if (delayedInvocationsBuilder_ == null) {
          ensureDelayedInvocationsIsMutable();
          delayedInvocations_.set(index, builderForValue.build());
          onChanged();
        } else {
          delayedInvocationsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
       */
      public Builder addDelayedInvocations(FromFunction.DelayedInvocation value) {
        if (delayedInvocationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDelayedInvocationsIsMutable();
          delayedInvocations_.add(value);
          onChanged();
        } else {
          delayedInvocationsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
       */
      public Builder addDelayedInvocations(
          int index, FromFunction.DelayedInvocation value) {
        if (delayedInvocationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDelayedInvocationsIsMutable();
          delayedInvocations_.add(index, value);
          onChanged();
        } else {
          delayedInvocationsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
       */
      public Builder addDelayedInvocations(
          FromFunction.DelayedInvocation.Builder builderForValue) {
        if (delayedInvocationsBuilder_ == null) {
          ensureDelayedInvocationsIsMutable();
          delayedInvocations_.add(builderForValue.build());
          onChanged();
        } else {
          delayedInvocationsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
       */
      public Builder addDelayedInvocations(
          int index, FromFunction.DelayedInvocation.Builder builderForValue) {
        if (delayedInvocationsBuilder_ == null) {
          ensureDelayedInvocationsIsMutable();
          delayedInvocations_.add(index, builderForValue.build());
          onChanged();
        } else {
          delayedInvocationsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
       */
      public Builder addAllDelayedInvocations(
          Iterable<? extends FromFunction.DelayedInvocation> values) {
        if (delayedInvocationsBuilder_ == null) {
          ensureDelayedInvocationsIsMutable();
          org.apache.flink.com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, delayedInvocations_);
          onChanged();
        } else {
          delayedInvocationsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
       */
      public Builder clearDelayedInvocations() {
        if (delayedInvocationsBuilder_ == null) {
          delayedInvocations_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          delayedInvocationsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
       */
      public Builder removeDelayedInvocations(int index) {
        if (delayedInvocationsBuilder_ == null) {
          ensureDelayedInvocationsIsMutable();
          delayedInvocations_.remove(index);
          onChanged();
        } else {
          delayedInvocationsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
       */
      public FromFunction.DelayedInvocation.Builder getDelayedInvocationsBuilder(
          int index) {
        return getDelayedInvocationsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
       */
      public FromFunction.DelayedInvocationOrBuilder getDelayedInvocationsOrBuilder(
          int index) {
        if (delayedInvocationsBuilder_ == null) {
          return delayedInvocations_.get(index);  } else {
          return delayedInvocationsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
       */
      public java.util.List<? extends FromFunction.DelayedInvocationOrBuilder> 
           getDelayedInvocationsOrBuilderList() {
        if (delayedInvocationsBuilder_ != null) {
          return delayedInvocationsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(delayedInvocations_);
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
       */
      public FromFunction.DelayedInvocation.Builder addDelayedInvocationsBuilder() {
        return getDelayedInvocationsFieldBuilder().addBuilder(
            FromFunction.DelayedInvocation.getDefaultInstance());
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
       */
      public FromFunction.DelayedInvocation.Builder addDelayedInvocationsBuilder(
          int index) {
        return getDelayedInvocationsFieldBuilder().addBuilder(
            index, FromFunction.DelayedInvocation.getDefaultInstance());
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.DelayedInvocation delayed_invocations = 3;</code>
       */
      public java.util.List<FromFunction.DelayedInvocation.Builder> 
           getDelayedInvocationsBuilderList() {
        return getDelayedInvocationsFieldBuilder().getBuilderList();
      }
      private org.apache.flink.com.google.protobuf.RepeatedFieldBuilderV3<
          FromFunction.DelayedInvocation, FromFunction.DelayedInvocation.Builder, FromFunction.DelayedInvocationOrBuilder> 
          getDelayedInvocationsFieldBuilder() {
        if (delayedInvocationsBuilder_ == null) {
          delayedInvocationsBuilder_ = new org.apache.flink.com.google.protobuf.RepeatedFieldBuilderV3<
              FromFunction.DelayedInvocation, FromFunction.DelayedInvocation.Builder, FromFunction.DelayedInvocationOrBuilder>(
                  delayedInvocations_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          delayedInvocations_ = null;
        }
        return delayedInvocationsBuilder_;
      }

      private java.util.List<FromFunction.EgressMessage> outgoingEgresses_ =
        java.util.Collections.emptyList();
      private void ensureOutgoingEgressesIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          outgoingEgresses_ = new java.util.ArrayList<FromFunction.EgressMessage>(outgoingEgresses_);
          bitField0_ |= 0x00000008;
         }
      }

      private org.apache.flink.com.google.protobuf.RepeatedFieldBuilderV3<
          FromFunction.EgressMessage, FromFunction.EgressMessage.Builder, FromFunction.EgressMessageOrBuilder> outgoingEgressesBuilder_;

      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
       */
      public java.util.List<FromFunction.EgressMessage> getOutgoingEgressesList() {
        if (outgoingEgressesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outgoingEgresses_);
        } else {
          return outgoingEgressesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
       */
      public int getOutgoingEgressesCount() {
        if (outgoingEgressesBuilder_ == null) {
          return outgoingEgresses_.size();
        } else {
          return outgoingEgressesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
       */
      public FromFunction.EgressMessage getOutgoingEgresses(int index) {
        if (outgoingEgressesBuilder_ == null) {
          return outgoingEgresses_.get(index);
        } else {
          return outgoingEgressesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
       */
      public Builder setOutgoingEgresses(
          int index, FromFunction.EgressMessage value) {
        if (outgoingEgressesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutgoingEgressesIsMutable();
          outgoingEgresses_.set(index, value);
          onChanged();
        } else {
          outgoingEgressesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
       */
      public Builder setOutgoingEgresses(
          int index, FromFunction.EgressMessage.Builder builderForValue) {
        if (outgoingEgressesBuilder_ == null) {
          ensureOutgoingEgressesIsMutable();
          outgoingEgresses_.set(index, builderForValue.build());
          onChanged();
        } else {
          outgoingEgressesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
       */
      public Builder addOutgoingEgresses(FromFunction.EgressMessage value) {
        if (outgoingEgressesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutgoingEgressesIsMutable();
          outgoingEgresses_.add(value);
          onChanged();
        } else {
          outgoingEgressesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
       */
      public Builder addOutgoingEgresses(
          int index, FromFunction.EgressMessage value) {
        if (outgoingEgressesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutgoingEgressesIsMutable();
          outgoingEgresses_.add(index, value);
          onChanged();
        } else {
          outgoingEgressesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
       */
      public Builder addOutgoingEgresses(
          FromFunction.EgressMessage.Builder builderForValue) {
        if (outgoingEgressesBuilder_ == null) {
          ensureOutgoingEgressesIsMutable();
          outgoingEgresses_.add(builderForValue.build());
          onChanged();
        } else {
          outgoingEgressesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
       */
      public Builder addOutgoingEgresses(
          int index, FromFunction.EgressMessage.Builder builderForValue) {
        if (outgoingEgressesBuilder_ == null) {
          ensureOutgoingEgressesIsMutable();
          outgoingEgresses_.add(index, builderForValue.build());
          onChanged();
        } else {
          outgoingEgressesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
       */
      public Builder addAllOutgoingEgresses(
          Iterable<? extends FromFunction.EgressMessage> values) {
        if (outgoingEgressesBuilder_ == null) {
          ensureOutgoingEgressesIsMutable();
          org.apache.flink.com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, outgoingEgresses_);
          onChanged();
        } else {
          outgoingEgressesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
       */
      public Builder clearOutgoingEgresses() {
        if (outgoingEgressesBuilder_ == null) {
          outgoingEgresses_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          outgoingEgressesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
       */
      public Builder removeOutgoingEgresses(int index) {
        if (outgoingEgressesBuilder_ == null) {
          ensureOutgoingEgressesIsMutable();
          outgoingEgresses_.remove(index);
          onChanged();
        } else {
          outgoingEgressesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
       */
      public FromFunction.EgressMessage.Builder getOutgoingEgressesBuilder(
          int index) {
        return getOutgoingEgressesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
       */
      public FromFunction.EgressMessageOrBuilder getOutgoingEgressesOrBuilder(
          int index) {
        if (outgoingEgressesBuilder_ == null) {
          return outgoingEgresses_.get(index);  } else {
          return outgoingEgressesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
       */
      public java.util.List<? extends FromFunction.EgressMessageOrBuilder> 
           getOutgoingEgressesOrBuilderList() {
        if (outgoingEgressesBuilder_ != null) {
          return outgoingEgressesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outgoingEgresses_);
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
       */
      public FromFunction.EgressMessage.Builder addOutgoingEgressesBuilder() {
        return getOutgoingEgressesFieldBuilder().addBuilder(
            FromFunction.EgressMessage.getDefaultInstance());
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
       */
      public FromFunction.EgressMessage.Builder addOutgoingEgressesBuilder(
          int index) {
        return getOutgoingEgressesFieldBuilder().addBuilder(
            index, FromFunction.EgressMessage.getDefaultInstance());
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.EgressMessage outgoing_egresses = 4;</code>
       */
      public java.util.List<FromFunction.EgressMessage.Builder> 
           getOutgoingEgressesBuilderList() {
        return getOutgoingEgressesFieldBuilder().getBuilderList();
      }
      private org.apache.flink.com.google.protobuf.RepeatedFieldBuilderV3<
          FromFunction.EgressMessage, FromFunction.EgressMessage.Builder, FromFunction.EgressMessageOrBuilder> 
          getOutgoingEgressesFieldBuilder() {
        if (outgoingEgressesBuilder_ == null) {
          outgoingEgressesBuilder_ = new org.apache.flink.com.google.protobuf.RepeatedFieldBuilderV3<
              FromFunction.EgressMessage, FromFunction.EgressMessage.Builder, FromFunction.EgressMessageOrBuilder>(
                  outgoingEgresses_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          outgoingEgresses_ = null;
        }
        return outgoingEgressesBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:io.statefun.sdk.reqreply.FromFunction.InvocationResponse)
    }

    // @@protoc_insertion_point(class_scope:io.statefun.sdk.reqreply.FromFunction.InvocationResponse)
    private static final FromFunction.InvocationResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new FromFunction.InvocationResponse();
    }

    public static FromFunction.InvocationResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.flink.com.google.protobuf.Parser<InvocationResponse>
        PARSER = new org.apache.flink.com.google.protobuf.AbstractParser<InvocationResponse>() {
      @Override
      public InvocationResponse parsePartialFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
        return new InvocationResponse(input, extensionRegistry);
      }
    };

    public static org.apache.flink.com.google.protobuf.Parser<InvocationResponse> parser() {
      return PARSER;
    }

    @Override
    public org.apache.flink.com.google.protobuf.Parser<InvocationResponse> getParserForType() {
      return PARSER;
    }

    @Override
    public FromFunction.InvocationResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExpirationSpecOrBuilder extends
      // @@protoc_insertion_point(interface_extends:io.statefun.sdk.reqreply.FromFunction.ExpirationSpec)
      org.apache.flink.com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.ExpireMode mode = 1;</code>
     */
    int getModeValue();
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.ExpireMode mode = 1;</code>
     */
    FromFunction.ExpirationSpec.ExpireMode getMode();

    /**
     * <code>int64 expire_after_millis = 2;</code>
     */
    long getExpireAfterMillis();
  }
  /**
   * <pre>
   * ExpirationSpec represents TTL (Time-To-Live) configuration for persisted states.
   * </pre>
   *
   * Protobuf type {@code io.statefun.sdk.reqreply.FromFunction.ExpirationSpec}
   */
  @javax.annotation.Generated("proto") public  static final class ExpirationSpec extends
      org.apache.flink.com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:io.statefun.sdk.reqreply.FromFunction.ExpirationSpec)
      ExpirationSpecOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ExpirationSpec.newBuilder() to construct.
    private ExpirationSpec(org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ExpirationSpec() {
      mode_ = 0;
    }

    @Override
    public final org.apache.flink.com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ExpirationSpec(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      org.apache.flink.com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          org.apache.flink.com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              mode_ = rawValue;
              break;
            }
            case 16: {

              expireAfterMillis_ = input.readInt64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.apache.flink.com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_ExpirationSpec_descriptor;
    }

    @Override
    protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_ExpirationSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              FromFunction.ExpirationSpec.class, FromFunction.ExpirationSpec.Builder.class);
    }

    /**
     * Protobuf enum {@code io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.ExpireMode}
     */
    public enum ExpireMode
        implements org.apache.flink.com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NONE = 0;</code>
       */
      NONE(0),
      /**
       * <code>AFTER_WRITE = 1;</code>
       */
      AFTER_WRITE(1),
      /**
       * <code>AFTER_INVOKE = 2;</code>
       */
      AFTER_INVOKE(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>NONE = 0;</code>
       */
      public static final int NONE_VALUE = 0;
      /**
       * <code>AFTER_WRITE = 1;</code>
       */
      public static final int AFTER_WRITE_VALUE = 1;
      /**
       * <code>AFTER_INVOKE = 2;</code>
       */
      public static final int AFTER_INVOKE_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @Deprecated
      public static ExpireMode valueOf(int value) {
        return forNumber(value);
      }

      public static ExpireMode forNumber(int value) {
        switch (value) {
          case 0: return NONE;
          case 1: return AFTER_WRITE;
          case 2: return AFTER_INVOKE;
          default: return null;
        }
      }

      public static org.apache.flink.com.google.protobuf.Internal.EnumLiteMap<ExpireMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.apache.flink.com.google.protobuf.Internal.EnumLiteMap<
          ExpireMode> internalValueMap =
            new org.apache.flink.com.google.protobuf.Internal.EnumLiteMap<ExpireMode>() {
              public ExpireMode findValueByNumber(int number) {
                return ExpireMode.forNumber(number);
              }
            };

      public final org.apache.flink.com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final org.apache.flink.com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final org.apache.flink.com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return FromFunction.ExpirationSpec.getDescriptor().getEnumTypes().get(0);
      }

      private static final ExpireMode[] VALUES = values();

      public static ExpireMode valueOf(
          org.apache.flink.com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private ExpireMode(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.ExpireMode)
    }

    public static final int MODE_FIELD_NUMBER = 1;
    private int mode_;
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.ExpireMode mode = 1;</code>
     */
    public int getModeValue() {
      return mode_;
    }
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.ExpireMode mode = 1;</code>
     */
    public FromFunction.ExpirationSpec.ExpireMode getMode() {
      @SuppressWarnings("deprecation")
      FromFunction.ExpirationSpec.ExpireMode result = FromFunction.ExpirationSpec.ExpireMode.valueOf(mode_);
      return result == null ? FromFunction.ExpirationSpec.ExpireMode.UNRECOGNIZED : result;
    }

    public static final int EXPIRE_AFTER_MILLIS_FIELD_NUMBER = 2;
    private long expireAfterMillis_;
    /**
     * <code>int64 expire_after_millis = 2;</code>
     */
    public long getExpireAfterMillis() {
      return expireAfterMillis_;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(org.apache.flink.com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (mode_ != FromFunction.ExpirationSpec.ExpireMode.NONE.getNumber()) {
        output.writeEnum(1, mode_);
      }
      if (expireAfterMillis_ != 0L) {
        output.writeInt64(2, expireAfterMillis_);
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (mode_ != FromFunction.ExpirationSpec.ExpireMode.NONE.getNumber()) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, mode_);
      }
      if (expireAfterMillis_ != 0L) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, expireAfterMillis_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof FromFunction.ExpirationSpec)) {
        return super.equals(obj);
      }
      FromFunction.ExpirationSpec other = (FromFunction.ExpirationSpec) obj;

      if (mode_ != other.mode_) return false;
      if (getExpireAfterMillis()
          != other.getExpireAfterMillis()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + MODE_FIELD_NUMBER;
      hash = (53 * hash) + mode_;
      hash = (37 * hash) + EXPIRE_AFTER_MILLIS_FIELD_NUMBER;
      hash = (53 * hash) + org.apache.flink.com.google.protobuf.Internal.hashLong(
          getExpireAfterMillis());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static FromFunction.ExpirationSpec parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.ExpirationSpec parseFrom(
        java.nio.ByteBuffer data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.ExpirationSpec parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.ExpirationSpec parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.ExpirationSpec parseFrom(byte[] data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.ExpirationSpec parseFrom(
        byte[] data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.ExpirationSpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static FromFunction.ExpirationSpec parseFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static FromFunction.ExpirationSpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static FromFunction.ExpirationSpec parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static FromFunction.ExpirationSpec parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static FromFunction.ExpirationSpec parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(FromFunction.ExpirationSpec prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ExpirationSpec represents TTL (Time-To-Live) configuration for persisted states.
     * </pre>
     *
     * Protobuf type {@code io.statefun.sdk.reqreply.FromFunction.ExpirationSpec}
     */
    @javax.annotation.Generated("proto") public static final class Builder extends
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:io.statefun.sdk.reqreply.FromFunction.ExpirationSpec)
        FromFunction.ExpirationSpecOrBuilder {
      public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_ExpirationSpec_descriptor;
      }

      @Override
      protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_ExpirationSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                FromFunction.ExpirationSpec.class, FromFunction.ExpirationSpec.Builder.class);
      }

      // Construct using generated.FromFunction.ExpirationSpec.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.flink.com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        mode_ = 0;

        expireAfterMillis_ = 0L;

        return this;
      }

      @Override
      public org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_ExpirationSpec_descriptor;
      }

      @Override
      public FromFunction.ExpirationSpec getDefaultInstanceForType() {
        return FromFunction.ExpirationSpec.getDefaultInstance();
      }

      @Override
      public FromFunction.ExpirationSpec build() {
        FromFunction.ExpirationSpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public FromFunction.ExpirationSpec buildPartial() {
        FromFunction.ExpirationSpec result = new FromFunction.ExpirationSpec(this);
        result.mode_ = mode_;
        result.expireAfterMillis_ = expireAfterMillis_;
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          org.apache.flink.com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(org.apache.flink.com.google.protobuf.Message other) {
        if (other instanceof FromFunction.ExpirationSpec) {
          return mergeFrom((FromFunction.ExpirationSpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(FromFunction.ExpirationSpec other) {
        if (other == FromFunction.ExpirationSpec.getDefaultInstance()) return this;
        if (other.mode_ != 0) {
          setModeValue(other.getModeValue());
        }
        if (other.getExpireAfterMillis() != 0L) {
          setExpireAfterMillis(other.getExpireAfterMillis());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        FromFunction.ExpirationSpec parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (FromFunction.ExpirationSpec) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int mode_ = 0;
      /**
       * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.ExpireMode mode = 1;</code>
       */
      public int getModeValue() {
        return mode_;
      }
      /**
       * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.ExpireMode mode = 1;</code>
       */
      public Builder setModeValue(int value) {
        mode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.ExpireMode mode = 1;</code>
       */
      public FromFunction.ExpirationSpec.ExpireMode getMode() {
        @SuppressWarnings("deprecation")
        FromFunction.ExpirationSpec.ExpireMode result = FromFunction.ExpirationSpec.ExpireMode.valueOf(mode_);
        return result == null ? FromFunction.ExpirationSpec.ExpireMode.UNRECOGNIZED : result;
      }
      /**
       * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.ExpireMode mode = 1;</code>
       */
      public Builder setMode(FromFunction.ExpirationSpec.ExpireMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        mode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec.ExpireMode mode = 1;</code>
       */
      public Builder clearMode() {
        
        mode_ = 0;
        onChanged();
        return this;
      }

      private long expireAfterMillis_ ;
      /**
       * <code>int64 expire_after_millis = 2;</code>
       */
      public long getExpireAfterMillis() {
        return expireAfterMillis_;
      }
      /**
       * <code>int64 expire_after_millis = 2;</code>
       */
      public Builder setExpireAfterMillis(long value) {
        
        expireAfterMillis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 expire_after_millis = 2;</code>
       */
      public Builder clearExpireAfterMillis() {
        
        expireAfterMillis_ = 0L;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:io.statefun.sdk.reqreply.FromFunction.ExpirationSpec)
    }

    // @@protoc_insertion_point(class_scope:io.statefun.sdk.reqreply.FromFunction.ExpirationSpec)
    private static final FromFunction.ExpirationSpec DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new FromFunction.ExpirationSpec();
    }

    public static FromFunction.ExpirationSpec getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.flink.com.google.protobuf.Parser<ExpirationSpec>
        PARSER = new org.apache.flink.com.google.protobuf.AbstractParser<ExpirationSpec>() {
      @Override
      public ExpirationSpec parsePartialFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
        return new ExpirationSpec(input, extensionRegistry);
      }
    };

    public static org.apache.flink.com.google.protobuf.Parser<ExpirationSpec> parser() {
      return PARSER;
    }

    @Override
    public org.apache.flink.com.google.protobuf.Parser<ExpirationSpec> getParserForType() {
      return PARSER;
    }

    @Override
    public FromFunction.ExpirationSpec getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PersistedValueSpecOrBuilder extends
      // @@protoc_insertion_point(interface_extends:io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec)
      org.apache.flink.com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string state_name = 1;</code>
     */
    String getStateName();
    /**
     * <code>string state_name = 1;</code>
     */
    org.apache.flink.com.google.protobuf.ByteString
        getStateNameBytes();

    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec expiration_spec = 2;</code>
     */
    boolean hasExpirationSpec();
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec expiration_spec = 2;</code>
     */
    FromFunction.ExpirationSpec getExpirationSpec();
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec expiration_spec = 2;</code>
     */
    FromFunction.ExpirationSpecOrBuilder getExpirationSpecOrBuilder();

    /**
     * <code>string type_typename = 3;</code>
     */
    String getTypeTypename();
    /**
     * <code>string type_typename = 3;</code>
     */
    org.apache.flink.com.google.protobuf.ByteString
        getTypeTypenameBytes();
  }
  /**
   * <pre>
   * PersistedValueSpec represents specifications of a function's persisted value state.
   * </pre>
   *
   * Protobuf type {@code io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec}
   */
  @javax.annotation.Generated("proto") public  static final class PersistedValueSpec extends
      org.apache.flink.com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec)
      PersistedValueSpecOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use PersistedValueSpec.newBuilder() to construct.
    private PersistedValueSpec(org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PersistedValueSpec() {
      stateName_ = "";
      typeTypename_ = "";
    }

    @Override
    public final org.apache.flink.com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private PersistedValueSpec(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      org.apache.flink.com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          org.apache.flink.com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              String s = input.readStringRequireUtf8();

              stateName_ = s;
              break;
            }
            case 18: {
              FromFunction.ExpirationSpec.Builder subBuilder = null;
              if (expirationSpec_ != null) {
                subBuilder = expirationSpec_.toBuilder();
              }
              expirationSpec_ = input.readMessage(FromFunction.ExpirationSpec.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(expirationSpec_);
                expirationSpec_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              String s = input.readStringRequireUtf8();

              typeTypename_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.apache.flink.com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_PersistedValueSpec_descriptor;
    }

    @Override
    protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_PersistedValueSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              FromFunction.PersistedValueSpec.class, FromFunction.PersistedValueSpec.Builder.class);
    }

    public static final int STATE_NAME_FIELD_NUMBER = 1;
    private volatile Object stateName_;
    /**
     * <code>string state_name = 1;</code>
     */
    public String getStateName() {
      Object ref = stateName_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        org.apache.flink.com.google.protobuf.ByteString bs = 
            (org.apache.flink.com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        stateName_ = s;
        return s;
      }
    }
    /**
     * <code>string state_name = 1;</code>
     */
    public org.apache.flink.com.google.protobuf.ByteString
        getStateNameBytes() {
      Object ref = stateName_;
      if (ref instanceof String) {
        org.apache.flink.com.google.protobuf.ByteString b = 
            org.apache.flink.com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        stateName_ = b;
        return b;
      } else {
        return (org.apache.flink.com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EXPIRATION_SPEC_FIELD_NUMBER = 2;
    private FromFunction.ExpirationSpec expirationSpec_;
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec expiration_spec = 2;</code>
     */
    public boolean hasExpirationSpec() {
      return expirationSpec_ != null;
    }
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec expiration_spec = 2;</code>
     */
    public FromFunction.ExpirationSpec getExpirationSpec() {
      return expirationSpec_ == null ? FromFunction.ExpirationSpec.getDefaultInstance() : expirationSpec_;
    }
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec expiration_spec = 2;</code>
     */
    public FromFunction.ExpirationSpecOrBuilder getExpirationSpecOrBuilder() {
      return getExpirationSpec();
    }

    public static final int TYPE_TYPENAME_FIELD_NUMBER = 3;
    private volatile Object typeTypename_;
    /**
     * <code>string type_typename = 3;</code>
     */
    public String getTypeTypename() {
      Object ref = typeTypename_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        org.apache.flink.com.google.protobuf.ByteString bs = 
            (org.apache.flink.com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        typeTypename_ = s;
        return s;
      }
    }
    /**
     * <code>string type_typename = 3;</code>
     */
    public org.apache.flink.com.google.protobuf.ByteString
        getTypeTypenameBytes() {
      Object ref = typeTypename_;
      if (ref instanceof String) {
        org.apache.flink.com.google.protobuf.ByteString b = 
            org.apache.flink.com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        typeTypename_ = b;
        return b;
      } else {
        return (org.apache.flink.com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(org.apache.flink.com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getStateNameBytes().isEmpty()) {
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.writeString(output, 1, stateName_);
      }
      if (expirationSpec_ != null) {
        output.writeMessage(2, getExpirationSpec());
      }
      if (!getTypeTypenameBytes().isEmpty()) {
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.writeString(output, 3, typeTypename_);
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getStateNameBytes().isEmpty()) {
        size += org.apache.flink.com.google.protobuf.GeneratedMessageV3.computeStringSize(1, stateName_);
      }
      if (expirationSpec_ != null) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getExpirationSpec());
      }
      if (!getTypeTypenameBytes().isEmpty()) {
        size += org.apache.flink.com.google.protobuf.GeneratedMessageV3.computeStringSize(3, typeTypename_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof FromFunction.PersistedValueSpec)) {
        return super.equals(obj);
      }
      FromFunction.PersistedValueSpec other = (FromFunction.PersistedValueSpec) obj;

      if (!getStateName()
          .equals(other.getStateName())) return false;
      if (hasExpirationSpec() != other.hasExpirationSpec()) return false;
      if (hasExpirationSpec()) {
        if (!getExpirationSpec()
            .equals(other.getExpirationSpec())) return false;
      }
      if (!getTypeTypename()
          .equals(other.getTypeTypename())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + STATE_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getStateName().hashCode();
      if (hasExpirationSpec()) {
        hash = (37 * hash) + EXPIRATION_SPEC_FIELD_NUMBER;
        hash = (53 * hash) + getExpirationSpec().hashCode();
      }
      hash = (37 * hash) + TYPE_TYPENAME_FIELD_NUMBER;
      hash = (53 * hash) + getTypeTypename().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static FromFunction.PersistedValueSpec parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.PersistedValueSpec parseFrom(
        java.nio.ByteBuffer data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.PersistedValueSpec parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.PersistedValueSpec parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.PersistedValueSpec parseFrom(byte[] data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.PersistedValueSpec parseFrom(
        byte[] data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.PersistedValueSpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static FromFunction.PersistedValueSpec parseFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static FromFunction.PersistedValueSpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static FromFunction.PersistedValueSpec parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static FromFunction.PersistedValueSpec parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static FromFunction.PersistedValueSpec parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(FromFunction.PersistedValueSpec prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * PersistedValueSpec represents specifications of a function's persisted value state.
     * </pre>
     *
     * Protobuf type {@code io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec}
     */
    @javax.annotation.Generated("proto") public static final class Builder extends
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec)
        FromFunction.PersistedValueSpecOrBuilder {
      public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_PersistedValueSpec_descriptor;
      }

      @Override
      protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_PersistedValueSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                FromFunction.PersistedValueSpec.class, FromFunction.PersistedValueSpec.Builder.class);
      }

      // Construct using generated.FromFunction.PersistedValueSpec.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.flink.com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        stateName_ = "";

        if (expirationSpecBuilder_ == null) {
          expirationSpec_ = null;
        } else {
          expirationSpec_ = null;
          expirationSpecBuilder_ = null;
        }
        typeTypename_ = "";

        return this;
      }

      @Override
      public org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_PersistedValueSpec_descriptor;
      }

      @Override
      public FromFunction.PersistedValueSpec getDefaultInstanceForType() {
        return FromFunction.PersistedValueSpec.getDefaultInstance();
      }

      @Override
      public FromFunction.PersistedValueSpec build() {
        FromFunction.PersistedValueSpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public FromFunction.PersistedValueSpec buildPartial() {
        FromFunction.PersistedValueSpec result = new FromFunction.PersistedValueSpec(this);
        result.stateName_ = stateName_;
        if (expirationSpecBuilder_ == null) {
          result.expirationSpec_ = expirationSpec_;
        } else {
          result.expirationSpec_ = expirationSpecBuilder_.build();
        }
        result.typeTypename_ = typeTypename_;
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          org.apache.flink.com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(org.apache.flink.com.google.protobuf.Message other) {
        if (other instanceof FromFunction.PersistedValueSpec) {
          return mergeFrom((FromFunction.PersistedValueSpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(FromFunction.PersistedValueSpec other) {
        if (other == FromFunction.PersistedValueSpec.getDefaultInstance()) return this;
        if (!other.getStateName().isEmpty()) {
          stateName_ = other.stateName_;
          onChanged();
        }
        if (other.hasExpirationSpec()) {
          mergeExpirationSpec(other.getExpirationSpec());
        }
        if (!other.getTypeTypename().isEmpty()) {
          typeTypename_ = other.typeTypename_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        FromFunction.PersistedValueSpec parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (FromFunction.PersistedValueSpec) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private Object stateName_ = "";
      /**
       * <code>string state_name = 1;</code>
       */
      public String getStateName() {
        Object ref = stateName_;
        if (!(ref instanceof String)) {
          org.apache.flink.com.google.protobuf.ByteString bs =
              (org.apache.flink.com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          stateName_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <code>string state_name = 1;</code>
       */
      public org.apache.flink.com.google.protobuf.ByteString
          getStateNameBytes() {
        Object ref = stateName_;
        if (ref instanceof String) {
          org.apache.flink.com.google.protobuf.ByteString b = 
              org.apache.flink.com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          stateName_ = b;
          return b;
        } else {
          return (org.apache.flink.com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string state_name = 1;</code>
       */
      public Builder setStateName(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        stateName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string state_name = 1;</code>
       */
      public Builder clearStateName() {
        
        stateName_ = getDefaultInstance().getStateName();
        onChanged();
        return this;
      }
      /**
       * <code>string state_name = 1;</code>
       */
      public Builder setStateNameBytes(
          org.apache.flink.com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        stateName_ = value;
        onChanged();
        return this;
      }

      private FromFunction.ExpirationSpec expirationSpec_;
      private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
          FromFunction.ExpirationSpec, FromFunction.ExpirationSpec.Builder, FromFunction.ExpirationSpecOrBuilder> expirationSpecBuilder_;
      /**
       * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec expiration_spec = 2;</code>
       */
      public boolean hasExpirationSpec() {
        return expirationSpecBuilder_ != null || expirationSpec_ != null;
      }
      /**
       * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec expiration_spec = 2;</code>
       */
      public FromFunction.ExpirationSpec getExpirationSpec() {
        if (expirationSpecBuilder_ == null) {
          return expirationSpec_ == null ? FromFunction.ExpirationSpec.getDefaultInstance() : expirationSpec_;
        } else {
          return expirationSpecBuilder_.getMessage();
        }
      }
      /**
       * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec expiration_spec = 2;</code>
       */
      public Builder setExpirationSpec(FromFunction.ExpirationSpec value) {
        if (expirationSpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expirationSpec_ = value;
          onChanged();
        } else {
          expirationSpecBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec expiration_spec = 2;</code>
       */
      public Builder setExpirationSpec(
          FromFunction.ExpirationSpec.Builder builderForValue) {
        if (expirationSpecBuilder_ == null) {
          expirationSpec_ = builderForValue.build();
          onChanged();
        } else {
          expirationSpecBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec expiration_spec = 2;</code>
       */
      public Builder mergeExpirationSpec(FromFunction.ExpirationSpec value) {
        if (expirationSpecBuilder_ == null) {
          if (expirationSpec_ != null) {
            expirationSpec_ =
              FromFunction.ExpirationSpec.newBuilder(expirationSpec_).mergeFrom(value).buildPartial();
          } else {
            expirationSpec_ = value;
          }
          onChanged();
        } else {
          expirationSpecBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec expiration_spec = 2;</code>
       */
      public Builder clearExpirationSpec() {
        if (expirationSpecBuilder_ == null) {
          expirationSpec_ = null;
          onChanged();
        } else {
          expirationSpec_ = null;
          expirationSpecBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec expiration_spec = 2;</code>
       */
      public FromFunction.ExpirationSpec.Builder getExpirationSpecBuilder() {
        
        onChanged();
        return getExpirationSpecFieldBuilder().getBuilder();
      }
      /**
       * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec expiration_spec = 2;</code>
       */
      public FromFunction.ExpirationSpecOrBuilder getExpirationSpecOrBuilder() {
        if (expirationSpecBuilder_ != null) {
          return expirationSpecBuilder_.getMessageOrBuilder();
        } else {
          return expirationSpec_ == null ?
              FromFunction.ExpirationSpec.getDefaultInstance() : expirationSpec_;
        }
      }
      /**
       * <code>.io.statefun.sdk.reqreply.FromFunction.ExpirationSpec expiration_spec = 2;</code>
       */
      private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
          FromFunction.ExpirationSpec, FromFunction.ExpirationSpec.Builder, FromFunction.ExpirationSpecOrBuilder> 
          getExpirationSpecFieldBuilder() {
        if (expirationSpecBuilder_ == null) {
          expirationSpecBuilder_ = new org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
              FromFunction.ExpirationSpec, FromFunction.ExpirationSpec.Builder, FromFunction.ExpirationSpecOrBuilder>(
                  getExpirationSpec(),
                  getParentForChildren(),
                  isClean());
          expirationSpec_ = null;
        }
        return expirationSpecBuilder_;
      }

      private Object typeTypename_ = "";
      /**
       * <code>string type_typename = 3;</code>
       */
      public String getTypeTypename() {
        Object ref = typeTypename_;
        if (!(ref instanceof String)) {
          org.apache.flink.com.google.protobuf.ByteString bs =
              (org.apache.flink.com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          typeTypename_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <code>string type_typename = 3;</code>
       */
      public org.apache.flink.com.google.protobuf.ByteString
          getTypeTypenameBytes() {
        Object ref = typeTypename_;
        if (ref instanceof String) {
          org.apache.flink.com.google.protobuf.ByteString b = 
              org.apache.flink.com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          typeTypename_ = b;
          return b;
        } else {
          return (org.apache.flink.com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string type_typename = 3;</code>
       */
      public Builder setTypeTypename(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        typeTypename_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string type_typename = 3;</code>
       */
      public Builder clearTypeTypename() {
        
        typeTypename_ = getDefaultInstance().getTypeTypename();
        onChanged();
        return this;
      }
      /**
       * <code>string type_typename = 3;</code>
       */
      public Builder setTypeTypenameBytes(
          org.apache.flink.com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        typeTypename_ = value;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec)
    }

    // @@protoc_insertion_point(class_scope:io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec)
    private static final FromFunction.PersistedValueSpec DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new FromFunction.PersistedValueSpec();
    }

    public static FromFunction.PersistedValueSpec getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.flink.com.google.protobuf.Parser<PersistedValueSpec>
        PARSER = new org.apache.flink.com.google.protobuf.AbstractParser<PersistedValueSpec>() {
      @Override
      public PersistedValueSpec parsePartialFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
        return new PersistedValueSpec(input, extensionRegistry);
      }
    };

    public static org.apache.flink.com.google.protobuf.Parser<PersistedValueSpec> parser() {
      return PARSER;
    }

    @Override
    public org.apache.flink.com.google.protobuf.Parser<PersistedValueSpec> getParserForType() {
      return PARSER;
    }

    @Override
    public FromFunction.PersistedValueSpec getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface IncompleteInvocationContextOrBuilder extends
      // @@protoc_insertion_point(interface_extends:io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext)
      org.apache.flink.com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
     */
    java.util.List<FromFunction.PersistedValueSpec> 
        getMissingValuesList();
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
     */
    FromFunction.PersistedValueSpec getMissingValues(int index);
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
     */
    int getMissingValuesCount();
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
     */
    java.util.List<? extends FromFunction.PersistedValueSpecOrBuilder> 
        getMissingValuesOrBuilderList();
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
     */
    FromFunction.PersistedValueSpecOrBuilder getMissingValuesOrBuilder(
        int index);
  }
  /**
   * <pre>
   * IncompleteInvocationContext represents a result of an io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest,
   * which should be used as the response if the InvocationBatchRequest provided incomplete information about the
   * invocation, e.g. insufficient state values were provided.
   * </pre>
   *
   * Protobuf type {@code io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext}
   */
  @javax.annotation.Generated("proto") public  static final class IncompleteInvocationContext extends
      org.apache.flink.com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext)
      IncompleteInvocationContextOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use IncompleteInvocationContext.newBuilder() to construct.
    private IncompleteInvocationContext(org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private IncompleteInvocationContext() {
      missingValues_ = java.util.Collections.emptyList();
    }

    @Override
    public final org.apache.flink.com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private IncompleteInvocationContext(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      org.apache.flink.com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          org.apache.flink.com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                missingValues_ = new java.util.ArrayList<FromFunction.PersistedValueSpec>();
                mutable_bitField0_ |= 0x00000001;
              }
              missingValues_.add(
                  input.readMessage(FromFunction.PersistedValueSpec.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.apache.flink.com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          missingValues_ = java.util.Collections.unmodifiableList(missingValues_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_IncompleteInvocationContext_descriptor;
    }

    @Override
    protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_IncompleteInvocationContext_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              FromFunction.IncompleteInvocationContext.class, FromFunction.IncompleteInvocationContext.Builder.class);
    }

    public static final int MISSING_VALUES_FIELD_NUMBER = 1;
    private java.util.List<FromFunction.PersistedValueSpec> missingValues_;
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
     */
    public java.util.List<FromFunction.PersistedValueSpec> getMissingValuesList() {
      return missingValues_;
    }
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
     */
    public java.util.List<? extends FromFunction.PersistedValueSpecOrBuilder> 
        getMissingValuesOrBuilderList() {
      return missingValues_;
    }
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
     */
    public int getMissingValuesCount() {
      return missingValues_.size();
    }
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
     */
    public FromFunction.PersistedValueSpec getMissingValues(int index) {
      return missingValues_.get(index);
    }
    /**
     * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
     */
    public FromFunction.PersistedValueSpecOrBuilder getMissingValuesOrBuilder(
        int index) {
      return missingValues_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(org.apache.flink.com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < missingValues_.size(); i++) {
        output.writeMessage(1, missingValues_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < missingValues_.size(); i++) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, missingValues_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof FromFunction.IncompleteInvocationContext)) {
        return super.equals(obj);
      }
      FromFunction.IncompleteInvocationContext other = (FromFunction.IncompleteInvocationContext) obj;

      if (!getMissingValuesList()
          .equals(other.getMissingValuesList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getMissingValuesCount() > 0) {
        hash = (37 * hash) + MISSING_VALUES_FIELD_NUMBER;
        hash = (53 * hash) + getMissingValuesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static FromFunction.IncompleteInvocationContext parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.IncompleteInvocationContext parseFrom(
        java.nio.ByteBuffer data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.IncompleteInvocationContext parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.IncompleteInvocationContext parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.IncompleteInvocationContext parseFrom(byte[] data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static FromFunction.IncompleteInvocationContext parseFrom(
        byte[] data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static FromFunction.IncompleteInvocationContext parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static FromFunction.IncompleteInvocationContext parseFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static FromFunction.IncompleteInvocationContext parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static FromFunction.IncompleteInvocationContext parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static FromFunction.IncompleteInvocationContext parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static FromFunction.IncompleteInvocationContext parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(FromFunction.IncompleteInvocationContext prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * IncompleteInvocationContext represents a result of an io.statefun.sdk.reqreply.ToFunction.InvocationBatchRequest,
     * which should be used as the response if the InvocationBatchRequest provided incomplete information about the
     * invocation, e.g. insufficient state values were provided.
     * </pre>
     *
     * Protobuf type {@code io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext}
     */
    @javax.annotation.Generated("proto") public static final class Builder extends
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext)
        FromFunction.IncompleteInvocationContextOrBuilder {
      public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_IncompleteInvocationContext_descriptor;
      }

      @Override
      protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_IncompleteInvocationContext_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                FromFunction.IncompleteInvocationContext.class, FromFunction.IncompleteInvocationContext.Builder.class);
      }

      // Construct using generated.FromFunction.IncompleteInvocationContext.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.flink.com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMissingValuesFieldBuilder();
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        if (missingValuesBuilder_ == null) {
          missingValues_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          missingValuesBuilder_.clear();
        }
        return this;
      }

      @Override
      public org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_IncompleteInvocationContext_descriptor;
      }

      @Override
      public FromFunction.IncompleteInvocationContext getDefaultInstanceForType() {
        return FromFunction.IncompleteInvocationContext.getDefaultInstance();
      }

      @Override
      public FromFunction.IncompleteInvocationContext build() {
        FromFunction.IncompleteInvocationContext result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public FromFunction.IncompleteInvocationContext buildPartial() {
        FromFunction.IncompleteInvocationContext result = new FromFunction.IncompleteInvocationContext(this);
        int from_bitField0_ = bitField0_;
        if (missingValuesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            missingValues_ = java.util.Collections.unmodifiableList(missingValues_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.missingValues_ = missingValues_;
        } else {
          result.missingValues_ = missingValuesBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          org.apache.flink.com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(org.apache.flink.com.google.protobuf.Message other) {
        if (other instanceof FromFunction.IncompleteInvocationContext) {
          return mergeFrom((FromFunction.IncompleteInvocationContext)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(FromFunction.IncompleteInvocationContext other) {
        if (other == FromFunction.IncompleteInvocationContext.getDefaultInstance()) return this;
        if (missingValuesBuilder_ == null) {
          if (!other.missingValues_.isEmpty()) {
            if (missingValues_.isEmpty()) {
              missingValues_ = other.missingValues_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureMissingValuesIsMutable();
              missingValues_.addAll(other.missingValues_);
            }
            onChanged();
          }
        } else {
          if (!other.missingValues_.isEmpty()) {
            if (missingValuesBuilder_.isEmpty()) {
              missingValuesBuilder_.dispose();
              missingValuesBuilder_ = null;
              missingValues_ = other.missingValues_;
              bitField0_ = (bitField0_ & ~0x00000001);
              missingValuesBuilder_ = 
                org.apache.flink.com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMissingValuesFieldBuilder() : null;
            } else {
              missingValuesBuilder_.addAllMessages(other.missingValues_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        FromFunction.IncompleteInvocationContext parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (FromFunction.IncompleteInvocationContext) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<FromFunction.PersistedValueSpec> missingValues_ =
        java.util.Collections.emptyList();
      private void ensureMissingValuesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          missingValues_ = new java.util.ArrayList<FromFunction.PersistedValueSpec>(missingValues_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.apache.flink.com.google.protobuf.RepeatedFieldBuilderV3<
          FromFunction.PersistedValueSpec, FromFunction.PersistedValueSpec.Builder, FromFunction.PersistedValueSpecOrBuilder> missingValuesBuilder_;

      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
       */
      public java.util.List<FromFunction.PersistedValueSpec> getMissingValuesList() {
        if (missingValuesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(missingValues_);
        } else {
          return missingValuesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
       */
      public int getMissingValuesCount() {
        if (missingValuesBuilder_ == null) {
          return missingValues_.size();
        } else {
          return missingValuesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
       */
      public FromFunction.PersistedValueSpec getMissingValues(int index) {
        if (missingValuesBuilder_ == null) {
          return missingValues_.get(index);
        } else {
          return missingValuesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
       */
      public Builder setMissingValues(
          int index, FromFunction.PersistedValueSpec value) {
        if (missingValuesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMissingValuesIsMutable();
          missingValues_.set(index, value);
          onChanged();
        } else {
          missingValuesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
       */
      public Builder setMissingValues(
          int index, FromFunction.PersistedValueSpec.Builder builderForValue) {
        if (missingValuesBuilder_ == null) {
          ensureMissingValuesIsMutable();
          missingValues_.set(index, builderForValue.build());
          onChanged();
        } else {
          missingValuesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
       */
      public Builder addMissingValues(FromFunction.PersistedValueSpec value) {
        if (missingValuesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMissingValuesIsMutable();
          missingValues_.add(value);
          onChanged();
        } else {
          missingValuesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
       */
      public Builder addMissingValues(
          int index, FromFunction.PersistedValueSpec value) {
        if (missingValuesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMissingValuesIsMutable();
          missingValues_.add(index, value);
          onChanged();
        } else {
          missingValuesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
       */
      public Builder addMissingValues(
          FromFunction.PersistedValueSpec.Builder builderForValue) {
        if (missingValuesBuilder_ == null) {
          ensureMissingValuesIsMutable();
          missingValues_.add(builderForValue.build());
          onChanged();
        } else {
          missingValuesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
       */
      public Builder addMissingValues(
          int index, FromFunction.PersistedValueSpec.Builder builderForValue) {
        if (missingValuesBuilder_ == null) {
          ensureMissingValuesIsMutable();
          missingValues_.add(index, builderForValue.build());
          onChanged();
        } else {
          missingValuesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
       */
      public Builder addAllMissingValues(
          Iterable<? extends FromFunction.PersistedValueSpec> values) {
        if (missingValuesBuilder_ == null) {
          ensureMissingValuesIsMutable();
          org.apache.flink.com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, missingValues_);
          onChanged();
        } else {
          missingValuesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
       */
      public Builder clearMissingValues() {
        if (missingValuesBuilder_ == null) {
          missingValues_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          missingValuesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
       */
      public Builder removeMissingValues(int index) {
        if (missingValuesBuilder_ == null) {
          ensureMissingValuesIsMutable();
          missingValues_.remove(index);
          onChanged();
        } else {
          missingValuesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
       */
      public FromFunction.PersistedValueSpec.Builder getMissingValuesBuilder(
          int index) {
        return getMissingValuesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
       */
      public FromFunction.PersistedValueSpecOrBuilder getMissingValuesOrBuilder(
          int index) {
        if (missingValuesBuilder_ == null) {
          return missingValues_.get(index);  } else {
          return missingValuesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
       */
      public java.util.List<? extends FromFunction.PersistedValueSpecOrBuilder> 
           getMissingValuesOrBuilderList() {
        if (missingValuesBuilder_ != null) {
          return missingValuesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(missingValues_);
        }
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
       */
      public FromFunction.PersistedValueSpec.Builder addMissingValuesBuilder() {
        return getMissingValuesFieldBuilder().addBuilder(
            FromFunction.PersistedValueSpec.getDefaultInstance());
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
       */
      public FromFunction.PersistedValueSpec.Builder addMissingValuesBuilder(
          int index) {
        return getMissingValuesFieldBuilder().addBuilder(
            index, FromFunction.PersistedValueSpec.getDefaultInstance());
      }
      /**
       * <code>repeated .io.statefun.sdk.reqreply.FromFunction.PersistedValueSpec missing_values = 1;</code>
       */
      public java.util.List<FromFunction.PersistedValueSpec.Builder> 
           getMissingValuesBuilderList() {
        return getMissingValuesFieldBuilder().getBuilderList();
      }
      private org.apache.flink.com.google.protobuf.RepeatedFieldBuilderV3<
          FromFunction.PersistedValueSpec, FromFunction.PersistedValueSpec.Builder, FromFunction.PersistedValueSpecOrBuilder> 
          getMissingValuesFieldBuilder() {
        if (missingValuesBuilder_ == null) {
          missingValuesBuilder_ = new org.apache.flink.com.google.protobuf.RepeatedFieldBuilderV3<
              FromFunction.PersistedValueSpec, FromFunction.PersistedValueSpec.Builder, FromFunction.PersistedValueSpecOrBuilder>(
                  missingValues_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          missingValues_ = null;
        }
        return missingValuesBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext)
    }

    // @@protoc_insertion_point(class_scope:io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext)
    private static final FromFunction.IncompleteInvocationContext DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new FromFunction.IncompleteInvocationContext();
    }

    public static FromFunction.IncompleteInvocationContext getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.flink.com.google.protobuf.Parser<IncompleteInvocationContext>
        PARSER = new org.apache.flink.com.google.protobuf.AbstractParser<IncompleteInvocationContext>() {
      @Override
      public IncompleteInvocationContext parsePartialFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
        return new IncompleteInvocationContext(input, extensionRegistry);
      }
    };

    public static org.apache.flink.com.google.protobuf.Parser<IncompleteInvocationContext> parser() {
      return PARSER;
    }

    @Override
    public org.apache.flink.com.google.protobuf.Parser<IncompleteInvocationContext> getParserForType() {
      return PARSER;
    }

    @Override
    public FromFunction.IncompleteInvocationContext getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int responseCase_ = 0;
  private Object response_;
  public enum ResponseCase
      implements org.apache.flink.com.google.protobuf.Internal.EnumLite {
    INVOCATION_RESULT(100),
    INCOMPLETE_INVOCATION_CONTEXT(101),
    RESPONSE_NOT_SET(0);
    private final int value;
    private ResponseCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static ResponseCase valueOf(int value) {
      return forNumber(value);
    }

    public static ResponseCase forNumber(int value) {
      switch (value) {
        case 100: return INVOCATION_RESULT;
        case 101: return INCOMPLETE_INVOCATION_CONTEXT;
        case 0: return RESPONSE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ResponseCase
  getResponseCase() {
    return ResponseCase.forNumber(
        responseCase_);
  }

  public static final int INVOCATION_RESULT_FIELD_NUMBER = 100;
  /**
   * <code>.io.statefun.sdk.reqreply.FromFunction.InvocationResponse invocation_result = 100;</code>
   */
  public boolean hasInvocationResult() {
    return responseCase_ == 100;
  }
  /**
   * <code>.io.statefun.sdk.reqreply.FromFunction.InvocationResponse invocation_result = 100;</code>
   */
  public FromFunction.InvocationResponse getInvocationResult() {
    if (responseCase_ == 100) {
       return (FromFunction.InvocationResponse) response_;
    }
    return FromFunction.InvocationResponse.getDefaultInstance();
  }
  /**
   * <code>.io.statefun.sdk.reqreply.FromFunction.InvocationResponse invocation_result = 100;</code>
   */
  public FromFunction.InvocationResponseOrBuilder getInvocationResultOrBuilder() {
    if (responseCase_ == 100) {
       return (FromFunction.InvocationResponse) response_;
    }
    return FromFunction.InvocationResponse.getDefaultInstance();
  }

  public static final int INCOMPLETE_INVOCATION_CONTEXT_FIELD_NUMBER = 101;
  /**
   * <code>.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext incomplete_invocation_context = 101;</code>
   */
  public boolean hasIncompleteInvocationContext() {
    return responseCase_ == 101;
  }
  /**
   * <code>.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext incomplete_invocation_context = 101;</code>
   */
  public FromFunction.IncompleteInvocationContext getIncompleteInvocationContext() {
    if (responseCase_ == 101) {
       return (FromFunction.IncompleteInvocationContext) response_;
    }
    return FromFunction.IncompleteInvocationContext.getDefaultInstance();
  }
  /**
   * <code>.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext incomplete_invocation_context = 101;</code>
   */
  public FromFunction.IncompleteInvocationContextOrBuilder getIncompleteInvocationContextOrBuilder() {
    if (responseCase_ == 101) {
       return (FromFunction.IncompleteInvocationContext) response_;
    }
    return FromFunction.IncompleteInvocationContext.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(org.apache.flink.com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (responseCase_ == 100) {
      output.writeMessage(100, (FromFunction.InvocationResponse) response_);
    }
    if (responseCase_ == 101) {
      output.writeMessage(101, (FromFunction.IncompleteInvocationContext) response_);
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (responseCase_ == 100) {
      size += org.apache.flink.com.google.protobuf.CodedOutputStream
        .computeMessageSize(100, (FromFunction.InvocationResponse) response_);
    }
    if (responseCase_ == 101) {
      size += org.apache.flink.com.google.protobuf.CodedOutputStream
        .computeMessageSize(101, (FromFunction.IncompleteInvocationContext) response_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof FromFunction)) {
      return super.equals(obj);
    }
    FromFunction other = (FromFunction) obj;

    if (!getResponseCase().equals(other.getResponseCase())) return false;
    switch (responseCase_) {
      case 100:
        if (!getInvocationResult()
            .equals(other.getInvocationResult())) return false;
        break;
      case 101:
        if (!getIncompleteInvocationContext()
            .equals(other.getIncompleteInvocationContext())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (responseCase_) {
      case 100:
        hash = (37 * hash) + INVOCATION_RESULT_FIELD_NUMBER;
        hash = (53 * hash) + getInvocationResult().hashCode();
        break;
      case 101:
        hash = (37 * hash) + INCOMPLETE_INVOCATION_CONTEXT_FIELD_NUMBER;
        hash = (53 * hash) + getIncompleteInvocationContext().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static FromFunction parseFrom(
      java.nio.ByteBuffer data)
      throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static FromFunction parseFrom(
      java.nio.ByteBuffer data,
      org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static FromFunction parseFrom(
      org.apache.flink.com.google.protobuf.ByteString data)
      throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static FromFunction parseFrom(
      org.apache.flink.com.google.protobuf.ByteString data,
      org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static FromFunction parseFrom(byte[] data)
      throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static FromFunction parseFrom(
      byte[] data,
      org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static FromFunction parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.apache.flink.com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static FromFunction parseFrom(
      java.io.InputStream input,
      org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.apache.flink.com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static FromFunction parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.apache.flink.com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static FromFunction parseDelimitedFrom(
      java.io.InputStream input,
      org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.apache.flink.com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static FromFunction parseFrom(
      org.apache.flink.com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.apache.flink.com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static FromFunction parseFrom(
      org.apache.flink.com.google.protobuf.CodedInputStream input,
      org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.apache.flink.com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(FromFunction prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The following section contains messages sent from a remote function back to Flink. 
   * </pre>
   *
   * Protobuf type {@code io.statefun.sdk.reqreply.FromFunction}
   */
  @javax.annotation.Generated("proto") public static final class Builder extends
      org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:io.statefun.sdk.reqreply.FromFunction)
          FromFunctionOrBuilder {
    public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_descriptor;
    }

    @Override
    protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              FromFunction.class, FromFunction.Builder.class);
    }

    // Construct using generated.FromFunction.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (org.apache.flink.com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @Override
    public Builder clear() {
      super.clear();
      responseCase_ = 0;
      response_ = null;
      return this;
    }

    @Override
    public org.apache.flink.com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return RequestReply.internal_static_io_statefun_sdk_reqreply_FromFunction_descriptor;
    }

    @Override
    public FromFunction getDefaultInstanceForType() {
      return FromFunction.getDefaultInstance();
    }

    @Override
    public FromFunction build() {
      FromFunction result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public FromFunction buildPartial() {
      FromFunction result = new FromFunction(this);
      if (responseCase_ == 100) {
        if (invocationResultBuilder_ == null) {
          result.response_ = response_;
        } else {
          result.response_ = invocationResultBuilder_.build();
        }
      }
      if (responseCase_ == 101) {
        if (incompleteInvocationContextBuilder_ == null) {
          result.response_ = response_;
        } else {
          result.response_ = incompleteInvocationContextBuilder_.build();
        }
      }
      result.responseCase_ = responseCase_;
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        org.apache.flink.com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(org.apache.flink.com.google.protobuf.Message other) {
      if (other instanceof FromFunction) {
        return mergeFrom((FromFunction)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(FromFunction other) {
      if (other == FromFunction.getDefaultInstance()) return this;
      switch (other.getResponseCase()) {
        case INVOCATION_RESULT: {
          mergeInvocationResult(other.getInvocationResult());
          break;
        }
        case INCOMPLETE_INVOCATION_CONTEXT: {
          mergeIncompleteInvocationContext(other.getIncompleteInvocationContext());
          break;
        }
        case RESPONSE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      FromFunction parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (FromFunction) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int responseCase_ = 0;
    private Object response_;
    public ResponseCase
        getResponseCase() {
      return ResponseCase.forNumber(
          responseCase_);
    }

    public Builder clearResponse() {
      responseCase_ = 0;
      response_ = null;
      onChanged();
      return this;
    }


    private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
        FromFunction.InvocationResponse, FromFunction.InvocationResponse.Builder, FromFunction.InvocationResponseOrBuilder> invocationResultBuilder_;
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.InvocationResponse invocation_result = 100;</code>
     */
    public boolean hasInvocationResult() {
      return responseCase_ == 100;
    }
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.InvocationResponse invocation_result = 100;</code>
     */
    public FromFunction.InvocationResponse getInvocationResult() {
      if (invocationResultBuilder_ == null) {
        if (responseCase_ == 100) {
          return (FromFunction.InvocationResponse) response_;
        }
        return FromFunction.InvocationResponse.getDefaultInstance();
      } else {
        if (responseCase_ == 100) {
          return invocationResultBuilder_.getMessage();
        }
        return FromFunction.InvocationResponse.getDefaultInstance();
      }
    }
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.InvocationResponse invocation_result = 100;</code>
     */
    public Builder setInvocationResult(FromFunction.InvocationResponse value) {
      if (invocationResultBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        response_ = value;
        onChanged();
      } else {
        invocationResultBuilder_.setMessage(value);
      }
      responseCase_ = 100;
      return this;
    }
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.InvocationResponse invocation_result = 100;</code>
     */
    public Builder setInvocationResult(
        FromFunction.InvocationResponse.Builder builderForValue) {
      if (invocationResultBuilder_ == null) {
        response_ = builderForValue.build();
        onChanged();
      } else {
        invocationResultBuilder_.setMessage(builderForValue.build());
      }
      responseCase_ = 100;
      return this;
    }
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.InvocationResponse invocation_result = 100;</code>
     */
    public Builder mergeInvocationResult(FromFunction.InvocationResponse value) {
      if (invocationResultBuilder_ == null) {
        if (responseCase_ == 100 &&
            response_ != FromFunction.InvocationResponse.getDefaultInstance()) {
          response_ = FromFunction.InvocationResponse.newBuilder((FromFunction.InvocationResponse) response_)
              .mergeFrom(value).buildPartial();
        } else {
          response_ = value;
        }
        onChanged();
      } else {
        if (responseCase_ == 100) {
          invocationResultBuilder_.mergeFrom(value);
        }
        invocationResultBuilder_.setMessage(value);
      }
      responseCase_ = 100;
      return this;
    }
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.InvocationResponse invocation_result = 100;</code>
     */
    public Builder clearInvocationResult() {
      if (invocationResultBuilder_ == null) {
        if (responseCase_ == 100) {
          responseCase_ = 0;
          response_ = null;
          onChanged();
        }
      } else {
        if (responseCase_ == 100) {
          responseCase_ = 0;
          response_ = null;
        }
        invocationResultBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.InvocationResponse invocation_result = 100;</code>
     */
    public FromFunction.InvocationResponse.Builder getInvocationResultBuilder() {
      return getInvocationResultFieldBuilder().getBuilder();
    }
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.InvocationResponse invocation_result = 100;</code>
     */
    public FromFunction.InvocationResponseOrBuilder getInvocationResultOrBuilder() {
      if ((responseCase_ == 100) && (invocationResultBuilder_ != null)) {
        return invocationResultBuilder_.getMessageOrBuilder();
      } else {
        if (responseCase_ == 100) {
          return (FromFunction.InvocationResponse) response_;
        }
        return FromFunction.InvocationResponse.getDefaultInstance();
      }
    }
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.InvocationResponse invocation_result = 100;</code>
     */
    private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
        FromFunction.InvocationResponse, FromFunction.InvocationResponse.Builder, FromFunction.InvocationResponseOrBuilder> 
        getInvocationResultFieldBuilder() {
      if (invocationResultBuilder_ == null) {
        if (!(responseCase_ == 100)) {
          response_ = FromFunction.InvocationResponse.getDefaultInstance();
        }
        invocationResultBuilder_ = new org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
            FromFunction.InvocationResponse, FromFunction.InvocationResponse.Builder, FromFunction.InvocationResponseOrBuilder>(
                (FromFunction.InvocationResponse) response_,
                getParentForChildren(),
                isClean());
        response_ = null;
      }
      responseCase_ = 100;
      onChanged();;
      return invocationResultBuilder_;
    }

    private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
        FromFunction.IncompleteInvocationContext, FromFunction.IncompleteInvocationContext.Builder, FromFunction.IncompleteInvocationContextOrBuilder> incompleteInvocationContextBuilder_;
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext incomplete_invocation_context = 101;</code>
     */
    public boolean hasIncompleteInvocationContext() {
      return responseCase_ == 101;
    }
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext incomplete_invocation_context = 101;</code>
     */
    public FromFunction.IncompleteInvocationContext getIncompleteInvocationContext() {
      if (incompleteInvocationContextBuilder_ == null) {
        if (responseCase_ == 101) {
          return (FromFunction.IncompleteInvocationContext) response_;
        }
        return FromFunction.IncompleteInvocationContext.getDefaultInstance();
      } else {
        if (responseCase_ == 101) {
          return incompleteInvocationContextBuilder_.getMessage();
        }
        return FromFunction.IncompleteInvocationContext.getDefaultInstance();
      }
    }
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext incomplete_invocation_context = 101;</code>
     */
    public Builder setIncompleteInvocationContext(FromFunction.IncompleteInvocationContext value) {
      if (incompleteInvocationContextBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        response_ = value;
        onChanged();
      } else {
        incompleteInvocationContextBuilder_.setMessage(value);
      }
      responseCase_ = 101;
      return this;
    }
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext incomplete_invocation_context = 101;</code>
     */
    public Builder setIncompleteInvocationContext(
        FromFunction.IncompleteInvocationContext.Builder builderForValue) {
      if (incompleteInvocationContextBuilder_ == null) {
        response_ = builderForValue.build();
        onChanged();
      } else {
        incompleteInvocationContextBuilder_.setMessage(builderForValue.build());
      }
      responseCase_ = 101;
      return this;
    }
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext incomplete_invocation_context = 101;</code>
     */
    public Builder mergeIncompleteInvocationContext(FromFunction.IncompleteInvocationContext value) {
      if (incompleteInvocationContextBuilder_ == null) {
        if (responseCase_ == 101 &&
            response_ != FromFunction.IncompleteInvocationContext.getDefaultInstance()) {
          response_ = FromFunction.IncompleteInvocationContext.newBuilder((FromFunction.IncompleteInvocationContext) response_)
              .mergeFrom(value).buildPartial();
        } else {
          response_ = value;
        }
        onChanged();
      } else {
        if (responseCase_ == 101) {
          incompleteInvocationContextBuilder_.mergeFrom(value);
        }
        incompleteInvocationContextBuilder_.setMessage(value);
      }
      responseCase_ = 101;
      return this;
    }
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext incomplete_invocation_context = 101;</code>
     */
    public Builder clearIncompleteInvocationContext() {
      if (incompleteInvocationContextBuilder_ == null) {
        if (responseCase_ == 101) {
          responseCase_ = 0;
          response_ = null;
          onChanged();
        }
      } else {
        if (responseCase_ == 101) {
          responseCase_ = 0;
          response_ = null;
        }
        incompleteInvocationContextBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext incomplete_invocation_context = 101;</code>
     */
    public FromFunction.IncompleteInvocationContext.Builder getIncompleteInvocationContextBuilder() {
      return getIncompleteInvocationContextFieldBuilder().getBuilder();
    }
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext incomplete_invocation_context = 101;</code>
     */
    public FromFunction.IncompleteInvocationContextOrBuilder getIncompleteInvocationContextOrBuilder() {
      if ((responseCase_ == 101) && (incompleteInvocationContextBuilder_ != null)) {
        return incompleteInvocationContextBuilder_.getMessageOrBuilder();
      } else {
        if (responseCase_ == 101) {
          return (FromFunction.IncompleteInvocationContext) response_;
        }
        return FromFunction.IncompleteInvocationContext.getDefaultInstance();
      }
    }
    /**
     * <code>.io.statefun.sdk.reqreply.FromFunction.IncompleteInvocationContext incomplete_invocation_context = 101;</code>
     */
    private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
        FromFunction.IncompleteInvocationContext, FromFunction.IncompleteInvocationContext.Builder, FromFunction.IncompleteInvocationContextOrBuilder> 
        getIncompleteInvocationContextFieldBuilder() {
      if (incompleteInvocationContextBuilder_ == null) {
        if (!(responseCase_ == 101)) {
          response_ = FromFunction.IncompleteInvocationContext.getDefaultInstance();
        }
        incompleteInvocationContextBuilder_ = new org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
            FromFunction.IncompleteInvocationContext, FromFunction.IncompleteInvocationContext.Builder, FromFunction.IncompleteInvocationContextOrBuilder>(
                (FromFunction.IncompleteInvocationContext) response_,
                getParentForChildren(),
                isClean());
        response_ = null;
      }
      responseCase_ = 101;
      onChanged();;
      return incompleteInvocationContextBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:io.statefun.sdk.reqreply.FromFunction)
  }

  // @@protoc_insertion_point(class_scope:io.statefun.sdk.reqreply.FromFunction)
  private static final FromFunction DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new FromFunction();
  }

  public static FromFunction getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final org.apache.flink.com.google.protobuf.Parser<FromFunction>
      PARSER = new org.apache.flink.com.google.protobuf.AbstractParser<FromFunction>() {
    @Override
    public FromFunction parsePartialFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return new FromFunction(input, extensionRegistry);
    }
  };

  public static org.apache.flink.com.google.protobuf.Parser<FromFunction> parser() {
    return PARSER;
  }

  @Override
  public org.apache.flink.com.google.protobuf.Parser<FromFunction> getParserForType() {
    return PARSER;
  }

  @Override
  public FromFunction getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

