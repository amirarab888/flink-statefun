// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commands.proto

package org.apache.flink.smoke.generated2;

/**
 * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command}
 */
public  final class Command extends
    org.apache.flink.com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:org.apache.flink.statefun.e2e.smoke.Command)
    CommandOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Command.newBuilder() to construct.
  private Command(org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Command() {
  }

  @Override
  public final org.apache.flink.com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Command(
      org.apache.flink.com.google.protobuf.CodedInputStream input,
      org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    int mutable_bitField0_ = 0;
    org.apache.flink.com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        org.apache.flink.com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            Command.IncrementState.Builder subBuilder = null;
            if (commandCase_ == 1) {
              subBuilder = ((Command.IncrementState) command_).toBuilder();
            }
            command_ =
                input.readMessage(Command.IncrementState.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((Command.IncrementState) command_);
              command_ = subBuilder.buildPartial();
            }
            commandCase_ = 1;
            break;
          }
          case 18: {
            Command.Send.Builder subBuilder = null;
            if (commandCase_ == 2) {
              subBuilder = ((Command.Send) command_).toBuilder();
            }
            command_ =
                input.readMessage(Command.Send.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((Command.Send) command_);
              command_ = subBuilder.buildPartial();
            }
            commandCase_ = 2;
            break;
          }
          case 26: {
            Command.SendAfter.Builder subBuilder = null;
            if (commandCase_ == 3) {
              subBuilder = ((Command.SendAfter) command_).toBuilder();
            }
            command_ =
                input.readMessage(Command.SendAfter.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((Command.SendAfter) command_);
              command_ = subBuilder.buildPartial();
            }
            commandCase_ = 3;
            break;
          }
          case 34: {
            Command.SendEgress.Builder subBuilder = null;
            if (commandCase_ == 4) {
              subBuilder = ((Command.SendEgress) command_).toBuilder();
            }
            command_ =
                input.readMessage(Command.SendEgress.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((Command.SendEgress) command_);
              command_ = subBuilder.buildPartial();
            }
            commandCase_ = 4;
            break;
          }
          case 42: {
            Command.AsyncOperation.Builder subBuilder = null;
            if (commandCase_ == 5) {
              subBuilder = ((Command.AsyncOperation) command_).toBuilder();
            }
            command_ =
                input.readMessage(Command.AsyncOperation.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((Command.AsyncOperation) command_);
              command_ = subBuilder.buildPartial();
            }
            commandCase_ = 5;
            break;
          }
          case 50: {
            Command.Verify.Builder subBuilder = null;
            if (commandCase_ == 6) {
              subBuilder = ((Command.Verify) command_).toBuilder();
            }
            command_ =
                input.readMessage(Command.Verify.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((Command.Verify) command_);
              command_ = subBuilder.buildPartial();
            }
            commandCase_ = 6;
            break;
          }
          case 58: {
            Command.CancelSendAfter.Builder subBuilder = null;
            if (commandCase_ == 7) {
              subBuilder = ((Command.CancelSendAfter) command_).toBuilder();
            }
            command_ =
                input.readMessage(Command.CancelSendAfter.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((Command.CancelSendAfter) command_);
              command_ = subBuilder.buildPartial();
            }
            commandCase_ = 7;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.apache.flink.com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_descriptor;
  }

  @Override
  protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            Command.class, Command.Builder.class);
  }

  public interface IncrementStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.statefun.e2e.smoke.Command.IncrementState)
      org.apache.flink.com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.IncrementState}
   */
  public  static final class IncrementState extends
      org.apache.flink.com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.statefun.e2e.smoke.Command.IncrementState)
      IncrementStateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use IncrementState.newBuilder() to construct.
    private IncrementState(org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private IncrementState() {
    }

    @Override
    public final org.apache.flink.com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private IncrementState(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      org.apache.flink.com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          org.apache.flink.com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.apache.flink.com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_IncrementState_descriptor;
    }

    @Override
    protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_IncrementState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Command.IncrementState.class, Command.IncrementState.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(org.apache.flink.com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Command.IncrementState)) {
        return super.equals(obj);
      }
      Command.IncrementState other = (Command.IncrementState) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Command.IncrementState parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Command.IncrementState parseFrom(
        java.nio.ByteBuffer data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Command.IncrementState parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Command.IncrementState parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Command.IncrementState parseFrom(byte[] data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Command.IncrementState parseFrom(
        byte[] data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Command.IncrementState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Command.IncrementState parseFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Command.IncrementState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Command.IncrementState parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Command.IncrementState parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Command.IncrementState parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Command.IncrementState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.IncrementState}
     */
    public static final class Builder extends
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.statefun.e2e.smoke.Command.IncrementState)
        Command.IncrementStateOrBuilder {
      public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_IncrementState_descriptor;
      }

      @Override
      protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_IncrementState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Command.IncrementState.class, Command.IncrementState.Builder.class);
      }

      // Construct using org.apache.flink.smoke.generated.Command.IncrementState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.flink.com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @Override
      public org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_IncrementState_descriptor;
      }

      @Override
      public Command.IncrementState getDefaultInstanceForType() {
        return Command.IncrementState.getDefaultInstance();
      }

      @Override
      public Command.IncrementState build() {
        Command.IncrementState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Command.IncrementState buildPartial() {
        Command.IncrementState result = new Command.IncrementState(this);
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          org.apache.flink.com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(org.apache.flink.com.google.protobuf.Message other) {
        if (other instanceof Command.IncrementState) {
          return mergeFrom((Command.IncrementState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Command.IncrementState other) {
        if (other == Command.IncrementState.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Command.IncrementState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Command.IncrementState) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.statefun.e2e.smoke.Command.IncrementState)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.statefun.e2e.smoke.Command.IncrementState)
    private static final Command.IncrementState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Command.IncrementState();
    }

    public static Command.IncrementState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.flink.com.google.protobuf.Parser<IncrementState>
        PARSER = new org.apache.flink.com.google.protobuf.AbstractParser<IncrementState>() {
      @Override
      public IncrementState parsePartialFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
        return new IncrementState(input, extensionRegistry);
      }
    };

    public static org.apache.flink.com.google.protobuf.Parser<IncrementState> parser() {
      return PARSER;
    }

    @Override
    public org.apache.flink.com.google.protobuf.Parser<IncrementState> getParserForType() {
      return PARSER;
    }

    @Override
    public Command.IncrementState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SendOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.statefun.e2e.smoke.Command.Send)
      org.apache.flink.com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int32 target = 1;</code>
     */
    int getTarget();

    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    boolean hasCommands();
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    Commands getCommands();
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    CommandsOrBuilder getCommandsOrBuilder();
  }
  /**
   * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.Send}
   */
  public  static final class Send extends
      org.apache.flink.com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.statefun.e2e.smoke.Command.Send)
      SendOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Send.newBuilder() to construct.
    private Send(org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Send() {
    }

    @Override
    public final org.apache.flink.com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Send(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      org.apache.flink.com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          org.apache.flink.com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              target_ = input.readInt32();
              break;
            }
            case 18: {
              Commands.Builder subBuilder = null;
              if (commands_ != null) {
                subBuilder = commands_.toBuilder();
              }
              commands_ = input.readMessage(Commands.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(commands_);
                commands_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.apache.flink.com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_Send_descriptor;
    }

    @Override
    protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_Send_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Command.Send.class, Command.Send.Builder.class);
    }

    public static final int TARGET_FIELD_NUMBER = 1;
    private int target_;
    /**
     * <code>int32 target = 1;</code>
     */
    public int getTarget() {
      return target_;
    }

    public static final int COMMANDS_FIELD_NUMBER = 2;
    private Commands commands_;
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    public boolean hasCommands() {
      return commands_ != null;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    public Commands getCommands() {
      return commands_ == null ? Commands.getDefaultInstance() : commands_;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    public CommandsOrBuilder getCommandsOrBuilder() {
      return getCommands();
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(org.apache.flink.com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (target_ != 0) {
        output.writeInt32(1, target_);
      }
      if (commands_ != null) {
        output.writeMessage(2, getCommands());
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (target_ != 0) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, target_);
      }
      if (commands_ != null) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getCommands());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Command.Send)) {
        return super.equals(obj);
      }
      Command.Send other = (Command.Send) obj;

      if (getTarget()
          != other.getTarget()) return false;
      if (hasCommands() != other.hasCommands()) return false;
      if (hasCommands()) {
        if (!getCommands()
            .equals(other.getCommands())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TARGET_FIELD_NUMBER;
      hash = (53 * hash) + getTarget();
      if (hasCommands()) {
        hash = (37 * hash) + COMMANDS_FIELD_NUMBER;
        hash = (53 * hash) + getCommands().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Command.Send parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Command.Send parseFrom(
        java.nio.ByteBuffer data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Command.Send parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Command.Send parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Command.Send parseFrom(byte[] data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Command.Send parseFrom(
        byte[] data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Command.Send parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Command.Send parseFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Command.Send parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Command.Send parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Command.Send parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Command.Send parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Command.Send prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.Send}
     */
    public static final class Builder extends
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.statefun.e2e.smoke.Command.Send)
        Command.SendOrBuilder {
      public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_Send_descriptor;
      }

      @Override
      protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_Send_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Command.Send.class, Command.Send.Builder.class);
      }

      // Construct using org.apache.flink.smoke.generated.Command.Send.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.flink.com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        target_ = 0;

        if (commandsBuilder_ == null) {
          commands_ = null;
        } else {
          commands_ = null;
          commandsBuilder_ = null;
        }
        return this;
      }

      @Override
      public org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_Send_descriptor;
      }

      @Override
      public Command.Send getDefaultInstanceForType() {
        return Command.Send.getDefaultInstance();
      }

      @Override
      public Command.Send build() {
        Command.Send result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Command.Send buildPartial() {
        Command.Send result = new Command.Send(this);
        result.target_ = target_;
        if (commandsBuilder_ == null) {
          result.commands_ = commands_;
        } else {
          result.commands_ = commandsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          org.apache.flink.com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(org.apache.flink.com.google.protobuf.Message other) {
        if (other instanceof Command.Send) {
          return mergeFrom((Command.Send)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Command.Send other) {
        if (other == Command.Send.getDefaultInstance()) return this;
        if (other.getTarget() != 0) {
          setTarget(other.getTarget());
        }
        if (other.hasCommands()) {
          mergeCommands(other.getCommands());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Command.Send parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Command.Send) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int target_ ;
      /**
       * <code>int32 target = 1;</code>
       */
      public int getTarget() {
        return target_;
      }
      /**
       * <code>int32 target = 1;</code>
       */
      public Builder setTarget(int value) {
        
        target_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 target = 1;</code>
       */
      public Builder clearTarget() {
        
        target_ = 0;
        onChanged();
        return this;
      }

      private Commands commands_;
      private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
              Commands, Commands.Builder, CommandsOrBuilder> commandsBuilder_;
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public boolean hasCommands() {
        return commandsBuilder_ != null || commands_ != null;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Commands getCommands() {
        if (commandsBuilder_ == null) {
          return commands_ == null ? Commands.getDefaultInstance() : commands_;
        } else {
          return commandsBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Builder setCommands(Commands value) {
        if (commandsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          commands_ = value;
          onChanged();
        } else {
          commandsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Builder setCommands(
          Commands.Builder builderForValue) {
        if (commandsBuilder_ == null) {
          commands_ = builderForValue.build();
          onChanged();
        } else {
          commandsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Builder mergeCommands(Commands value) {
        if (commandsBuilder_ == null) {
          if (commands_ != null) {
            commands_ =
              Commands.newBuilder(commands_).mergeFrom(value).buildPartial();
          } else {
            commands_ = value;
          }
          onChanged();
        } else {
          commandsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Builder clearCommands() {
        if (commandsBuilder_ == null) {
          commands_ = null;
          onChanged();
        } else {
          commands_ = null;
          commandsBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Commands.Builder getCommandsBuilder() {
        
        onChanged();
        return getCommandsFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public CommandsOrBuilder getCommandsOrBuilder() {
        if (commandsBuilder_ != null) {
          return commandsBuilder_.getMessageOrBuilder();
        } else {
          return commands_ == null ?
              Commands.getDefaultInstance() : commands_;
        }
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
              Commands, Commands.Builder, CommandsOrBuilder>
          getCommandsFieldBuilder() {
        if (commandsBuilder_ == null) {
          commandsBuilder_ = new org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
                  Commands, Commands.Builder, CommandsOrBuilder>(
                  getCommands(),
                  getParentForChildren(),
                  isClean());
          commands_ = null;
        }
        return commandsBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.statefun.e2e.smoke.Command.Send)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.statefun.e2e.smoke.Command.Send)
    private static final Command.Send DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Command.Send();
    }

    public static Command.Send getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.flink.com.google.protobuf.Parser<Send>
        PARSER = new org.apache.flink.com.google.protobuf.AbstractParser<Send>() {
      @Override
      public Send parsePartialFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
        return new Send(input, extensionRegistry);
      }
    };

    public static org.apache.flink.com.google.protobuf.Parser<Send> parser() {
      return PARSER;
    }

    @Override
    public org.apache.flink.com.google.protobuf.Parser<Send> getParserForType() {
      return PARSER;
    }

    @Override
    public Command.Send getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SendAfterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.statefun.e2e.smoke.Command.SendAfter)
      org.apache.flink.com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int32 target = 1;</code>
     */
    int getTarget();

    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    boolean hasCommands();
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    Commands getCommands();
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    CommandsOrBuilder getCommandsOrBuilder();

    /**
     * <code>string cancellation_token = 3;</code>
     */
    String getCancellationToken();
    /**
     * <code>string cancellation_token = 3;</code>
     */
    org.apache.flink.com.google.protobuf.ByteString
        getCancellationTokenBytes();
  }
  /**
   * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.SendAfter}
   */
  public  static final class SendAfter extends
      org.apache.flink.com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.statefun.e2e.smoke.Command.SendAfter)
      SendAfterOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SendAfter.newBuilder() to construct.
    private SendAfter(org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SendAfter() {
      cancellationToken_ = "";
    }

    @Override
    public final org.apache.flink.com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SendAfter(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      org.apache.flink.com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          org.apache.flink.com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              target_ = input.readInt32();
              break;
            }
            case 18: {
              Commands.Builder subBuilder = null;
              if (commands_ != null) {
                subBuilder = commands_.toBuilder();
              }
              commands_ = input.readMessage(Commands.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(commands_);
                commands_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              String s = input.readStringRequireUtf8();

              cancellationToken_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.apache.flink.com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_SendAfter_descriptor;
    }

    @Override
    protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_SendAfter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Command.SendAfter.class, Command.SendAfter.Builder.class);
    }

    public static final int TARGET_FIELD_NUMBER = 1;
    private int target_;
    /**
     * <code>int32 target = 1;</code>
     */
    public int getTarget() {
      return target_;
    }

    public static final int COMMANDS_FIELD_NUMBER = 2;
    private Commands commands_;
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    public boolean hasCommands() {
      return commands_ != null;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    public Commands getCommands() {
      return commands_ == null ? Commands.getDefaultInstance() : commands_;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
     */
    public CommandsOrBuilder getCommandsOrBuilder() {
      return getCommands();
    }

    public static final int CANCELLATION_TOKEN_FIELD_NUMBER = 3;
    private volatile Object cancellationToken_;
    /**
     * <code>string cancellation_token = 3;</code>
     */
    public String getCancellationToken() {
      Object ref = cancellationToken_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        org.apache.flink.com.google.protobuf.ByteString bs = 
            (org.apache.flink.com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        cancellationToken_ = s;
        return s;
      }
    }
    /**
     * <code>string cancellation_token = 3;</code>
     */
    public org.apache.flink.com.google.protobuf.ByteString
        getCancellationTokenBytes() {
      Object ref = cancellationToken_;
      if (ref instanceof String) {
        org.apache.flink.com.google.protobuf.ByteString b = 
            org.apache.flink.com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        cancellationToken_ = b;
        return b;
      } else {
        return (org.apache.flink.com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(org.apache.flink.com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (target_ != 0) {
        output.writeInt32(1, target_);
      }
      if (commands_ != null) {
        output.writeMessage(2, getCommands());
      }
      if (!getCancellationTokenBytes().isEmpty()) {
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.writeString(output, 3, cancellationToken_);
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (target_ != 0) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, target_);
      }
      if (commands_ != null) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getCommands());
      }
      if (!getCancellationTokenBytes().isEmpty()) {
        size += org.apache.flink.com.google.protobuf.GeneratedMessageV3.computeStringSize(3, cancellationToken_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Command.SendAfter)) {
        return super.equals(obj);
      }
      Command.SendAfter other = (Command.SendAfter) obj;

      if (getTarget()
          != other.getTarget()) return false;
      if (hasCommands() != other.hasCommands()) return false;
      if (hasCommands()) {
        if (!getCommands()
            .equals(other.getCommands())) return false;
      }
      if (!getCancellationToken()
          .equals(other.getCancellationToken())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TARGET_FIELD_NUMBER;
      hash = (53 * hash) + getTarget();
      if (hasCommands()) {
        hash = (37 * hash) + COMMANDS_FIELD_NUMBER;
        hash = (53 * hash) + getCommands().hashCode();
      }
      hash = (37 * hash) + CANCELLATION_TOKEN_FIELD_NUMBER;
      hash = (53 * hash) + getCancellationToken().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Command.SendAfter parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Command.SendAfter parseFrom(
        java.nio.ByteBuffer data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Command.SendAfter parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Command.SendAfter parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Command.SendAfter parseFrom(byte[] data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Command.SendAfter parseFrom(
        byte[] data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Command.SendAfter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Command.SendAfter parseFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Command.SendAfter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Command.SendAfter parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Command.SendAfter parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Command.SendAfter parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Command.SendAfter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.SendAfter}
     */
    public static final class Builder extends
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.statefun.e2e.smoke.Command.SendAfter)
        Command.SendAfterOrBuilder {
      public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_SendAfter_descriptor;
      }

      @Override
      protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_SendAfter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Command.SendAfter.class, Command.SendAfter.Builder.class);
      }

      // Construct using org.apache.flink.smoke.generated.Command.SendAfter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.flink.com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        target_ = 0;

        if (commandsBuilder_ == null) {
          commands_ = null;
        } else {
          commands_ = null;
          commandsBuilder_ = null;
        }
        cancellationToken_ = "";

        return this;
      }

      @Override
      public org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_SendAfter_descriptor;
      }

      @Override
      public Command.SendAfter getDefaultInstanceForType() {
        return Command.SendAfter.getDefaultInstance();
      }

      @Override
      public Command.SendAfter build() {
        Command.SendAfter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Command.SendAfter buildPartial() {
        Command.SendAfter result = new Command.SendAfter(this);
        result.target_ = target_;
        if (commandsBuilder_ == null) {
          result.commands_ = commands_;
        } else {
          result.commands_ = commandsBuilder_.build();
        }
        result.cancellationToken_ = cancellationToken_;
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          org.apache.flink.com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(org.apache.flink.com.google.protobuf.Message other) {
        if (other instanceof Command.SendAfter) {
          return mergeFrom((Command.SendAfter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Command.SendAfter other) {
        if (other == Command.SendAfter.getDefaultInstance()) return this;
        if (other.getTarget() != 0) {
          setTarget(other.getTarget());
        }
        if (other.hasCommands()) {
          mergeCommands(other.getCommands());
        }
        if (!other.getCancellationToken().isEmpty()) {
          cancellationToken_ = other.cancellationToken_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Command.SendAfter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Command.SendAfter) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int target_ ;
      /**
       * <code>int32 target = 1;</code>
       */
      public int getTarget() {
        return target_;
      }
      /**
       * <code>int32 target = 1;</code>
       */
      public Builder setTarget(int value) {
        
        target_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 target = 1;</code>
       */
      public Builder clearTarget() {
        
        target_ = 0;
        onChanged();
        return this;
      }

      private Commands commands_;
      private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
              Commands, Commands.Builder, CommandsOrBuilder> commandsBuilder_;
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public boolean hasCommands() {
        return commandsBuilder_ != null || commands_ != null;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Commands getCommands() {
        if (commandsBuilder_ == null) {
          return commands_ == null ? Commands.getDefaultInstance() : commands_;
        } else {
          return commandsBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Builder setCommands(Commands value) {
        if (commandsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          commands_ = value;
          onChanged();
        } else {
          commandsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Builder setCommands(
          Commands.Builder builderForValue) {
        if (commandsBuilder_ == null) {
          commands_ = builderForValue.build();
          onChanged();
        } else {
          commandsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Builder mergeCommands(Commands value) {
        if (commandsBuilder_ == null) {
          if (commands_ != null) {
            commands_ =
              Commands.newBuilder(commands_).mergeFrom(value).buildPartial();
          } else {
            commands_ = value;
          }
          onChanged();
        } else {
          commandsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Builder clearCommands() {
        if (commandsBuilder_ == null) {
          commands_ = null;
          onChanged();
        } else {
          commands_ = null;
          commandsBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public Commands.Builder getCommandsBuilder() {
        
        onChanged();
        return getCommandsFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      public CommandsOrBuilder getCommandsOrBuilder() {
        if (commandsBuilder_ != null) {
          return commandsBuilder_.getMessageOrBuilder();
        } else {
          return commands_ == null ?
              Commands.getDefaultInstance() : commands_;
        }
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands commands = 2;</code>
       */
      private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
              Commands, Commands.Builder, CommandsOrBuilder>
          getCommandsFieldBuilder() {
        if (commandsBuilder_ == null) {
          commandsBuilder_ = new org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
                  Commands, Commands.Builder, CommandsOrBuilder>(
                  getCommands(),
                  getParentForChildren(),
                  isClean());
          commands_ = null;
        }
        return commandsBuilder_;
      }

      private Object cancellationToken_ = "";
      /**
       * <code>string cancellation_token = 3;</code>
       */
      public String getCancellationToken() {
        Object ref = cancellationToken_;
        if (!(ref instanceof String)) {
          org.apache.flink.com.google.protobuf.ByteString bs =
              (org.apache.flink.com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          cancellationToken_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <code>string cancellation_token = 3;</code>
       */
      public org.apache.flink.com.google.protobuf.ByteString
          getCancellationTokenBytes() {
        Object ref = cancellationToken_;
        if (ref instanceof String) {
          org.apache.flink.com.google.protobuf.ByteString b = 
              org.apache.flink.com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          cancellationToken_ = b;
          return b;
        } else {
          return (org.apache.flink.com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string cancellation_token = 3;</code>
       */
      public Builder setCancellationToken(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        cancellationToken_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string cancellation_token = 3;</code>
       */
      public Builder clearCancellationToken() {
        
        cancellationToken_ = getDefaultInstance().getCancellationToken();
        onChanged();
        return this;
      }
      /**
       * <code>string cancellation_token = 3;</code>
       */
      public Builder setCancellationTokenBytes(
          org.apache.flink.com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        cancellationToken_ = value;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.statefun.e2e.smoke.Command.SendAfter)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.statefun.e2e.smoke.Command.SendAfter)
    private static final Command.SendAfter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Command.SendAfter();
    }

    public static Command.SendAfter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.flink.com.google.protobuf.Parser<SendAfter>
        PARSER = new org.apache.flink.com.google.protobuf.AbstractParser<SendAfter>() {
      @Override
      public SendAfter parsePartialFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
        return new SendAfter(input, extensionRegistry);
      }
    };

    public static org.apache.flink.com.google.protobuf.Parser<SendAfter> parser() {
      return PARSER;
    }

    @Override
    public org.apache.flink.com.google.protobuf.Parser<SendAfter> getParserForType() {
      return PARSER;
    }

    @Override
    public Command.SendAfter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CancelSendAfterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.statefun.e2e.smoke.Command.CancelSendAfter)
      org.apache.flink.com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int32 target = 1;</code>
     */
    int getTarget();

    /**
     * <code>string cancellation_token = 2;</code>
     */
    String getCancellationToken();
    /**
     * <code>string cancellation_token = 2;</code>
     */
    org.apache.flink.com.google.protobuf.ByteString
        getCancellationTokenBytes();
  }
  /**
   * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.CancelSendAfter}
   */
  public  static final class CancelSendAfter extends
      org.apache.flink.com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.statefun.e2e.smoke.Command.CancelSendAfter)
      CancelSendAfterOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CancelSendAfter.newBuilder() to construct.
    private CancelSendAfter(org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CancelSendAfter() {
      cancellationToken_ = "";
    }

    @Override
    public final org.apache.flink.com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CancelSendAfter(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      org.apache.flink.com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          org.apache.flink.com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              target_ = input.readInt32();
              break;
            }
            case 18: {
              String s = input.readStringRequireUtf8();

              cancellationToken_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.apache.flink.com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_CancelSendAfter_descriptor;
    }

    @Override
    protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_CancelSendAfter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Command.CancelSendAfter.class, Command.CancelSendAfter.Builder.class);
    }

    public static final int TARGET_FIELD_NUMBER = 1;
    private int target_;
    /**
     * <code>int32 target = 1;</code>
     */
    public int getTarget() {
      return target_;
    }

    public static final int CANCELLATION_TOKEN_FIELD_NUMBER = 2;
    private volatile Object cancellationToken_;
    /**
     * <code>string cancellation_token = 2;</code>
     */
    public String getCancellationToken() {
      Object ref = cancellationToken_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        org.apache.flink.com.google.protobuf.ByteString bs = 
            (org.apache.flink.com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        cancellationToken_ = s;
        return s;
      }
    }
    /**
     * <code>string cancellation_token = 2;</code>
     */
    public org.apache.flink.com.google.protobuf.ByteString
        getCancellationTokenBytes() {
      Object ref = cancellationToken_;
      if (ref instanceof String) {
        org.apache.flink.com.google.protobuf.ByteString b = 
            org.apache.flink.com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        cancellationToken_ = b;
        return b;
      } else {
        return (org.apache.flink.com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(org.apache.flink.com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (target_ != 0) {
        output.writeInt32(1, target_);
      }
      if (!getCancellationTokenBytes().isEmpty()) {
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.writeString(output, 2, cancellationToken_);
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (target_ != 0) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, target_);
      }
      if (!getCancellationTokenBytes().isEmpty()) {
        size += org.apache.flink.com.google.protobuf.GeneratedMessageV3.computeStringSize(2, cancellationToken_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Command.CancelSendAfter)) {
        return super.equals(obj);
      }
      Command.CancelSendAfter other = (Command.CancelSendAfter) obj;

      if (getTarget()
          != other.getTarget()) return false;
      if (!getCancellationToken()
          .equals(other.getCancellationToken())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TARGET_FIELD_NUMBER;
      hash = (53 * hash) + getTarget();
      hash = (37 * hash) + CANCELLATION_TOKEN_FIELD_NUMBER;
      hash = (53 * hash) + getCancellationToken().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Command.CancelSendAfter parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Command.CancelSendAfter parseFrom(
        java.nio.ByteBuffer data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Command.CancelSendAfter parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Command.CancelSendAfter parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Command.CancelSendAfter parseFrom(byte[] data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Command.CancelSendAfter parseFrom(
        byte[] data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Command.CancelSendAfter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Command.CancelSendAfter parseFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Command.CancelSendAfter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Command.CancelSendAfter parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Command.CancelSendAfter parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Command.CancelSendAfter parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Command.CancelSendAfter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.CancelSendAfter}
     */
    public static final class Builder extends
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.statefun.e2e.smoke.Command.CancelSendAfter)
        Command.CancelSendAfterOrBuilder {
      public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_CancelSendAfter_descriptor;
      }

      @Override
      protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_CancelSendAfter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Command.CancelSendAfter.class, Command.CancelSendAfter.Builder.class);
      }

      // Construct using org.apache.flink.smoke.generated.Command.CancelSendAfter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.flink.com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        target_ = 0;

        cancellationToken_ = "";

        return this;
      }

      @Override
      public org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_CancelSendAfter_descriptor;
      }

      @Override
      public Command.CancelSendAfter getDefaultInstanceForType() {
        return Command.CancelSendAfter.getDefaultInstance();
      }

      @Override
      public Command.CancelSendAfter build() {
        Command.CancelSendAfter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Command.CancelSendAfter buildPartial() {
        Command.CancelSendAfter result = new Command.CancelSendAfter(this);
        result.target_ = target_;
        result.cancellationToken_ = cancellationToken_;
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          org.apache.flink.com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(org.apache.flink.com.google.protobuf.Message other) {
        if (other instanceof Command.CancelSendAfter) {
          return mergeFrom((Command.CancelSendAfter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Command.CancelSendAfter other) {
        if (other == Command.CancelSendAfter.getDefaultInstance()) return this;
        if (other.getTarget() != 0) {
          setTarget(other.getTarget());
        }
        if (!other.getCancellationToken().isEmpty()) {
          cancellationToken_ = other.cancellationToken_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Command.CancelSendAfter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Command.CancelSendAfter) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int target_ ;
      /**
       * <code>int32 target = 1;</code>
       */
      public int getTarget() {
        return target_;
      }
      /**
       * <code>int32 target = 1;</code>
       */
      public Builder setTarget(int value) {
        
        target_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 target = 1;</code>
       */
      public Builder clearTarget() {
        
        target_ = 0;
        onChanged();
        return this;
      }

      private Object cancellationToken_ = "";
      /**
       * <code>string cancellation_token = 2;</code>
       */
      public String getCancellationToken() {
        Object ref = cancellationToken_;
        if (!(ref instanceof String)) {
          org.apache.flink.com.google.protobuf.ByteString bs =
              (org.apache.flink.com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          cancellationToken_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <code>string cancellation_token = 2;</code>
       */
      public org.apache.flink.com.google.protobuf.ByteString
          getCancellationTokenBytes() {
        Object ref = cancellationToken_;
        if (ref instanceof String) {
          org.apache.flink.com.google.protobuf.ByteString b = 
              org.apache.flink.com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          cancellationToken_ = b;
          return b;
        } else {
          return (org.apache.flink.com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string cancellation_token = 2;</code>
       */
      public Builder setCancellationToken(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        cancellationToken_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string cancellation_token = 2;</code>
       */
      public Builder clearCancellationToken() {
        
        cancellationToken_ = getDefaultInstance().getCancellationToken();
        onChanged();
        return this;
      }
      /**
       * <code>string cancellation_token = 2;</code>
       */
      public Builder setCancellationTokenBytes(
          org.apache.flink.com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        cancellationToken_ = value;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.statefun.e2e.smoke.Command.CancelSendAfter)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.statefun.e2e.smoke.Command.CancelSendAfter)
    private static final Command.CancelSendAfter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Command.CancelSendAfter();
    }

    public static Command.CancelSendAfter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.flink.com.google.protobuf.Parser<CancelSendAfter>
        PARSER = new org.apache.flink.com.google.protobuf.AbstractParser<CancelSendAfter>() {
      @Override
      public CancelSendAfter parsePartialFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
        return new CancelSendAfter(input, extensionRegistry);
      }
    };

    public static org.apache.flink.com.google.protobuf.Parser<CancelSendAfter> parser() {
      return PARSER;
    }

    @Override
    public org.apache.flink.com.google.protobuf.Parser<CancelSendAfter> getParserForType() {
      return PARSER;
    }

    @Override
    public Command.CancelSendAfter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SendEgressOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.statefun.e2e.smoke.Command.SendEgress)
      org.apache.flink.com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.SendEgress}
   */
  public  static final class SendEgress extends
      org.apache.flink.com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.statefun.e2e.smoke.Command.SendEgress)
      SendEgressOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SendEgress.newBuilder() to construct.
    private SendEgress(org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SendEgress() {
    }

    @Override
    public final org.apache.flink.com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SendEgress(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      org.apache.flink.com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          org.apache.flink.com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.apache.flink.com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_SendEgress_descriptor;
    }

    @Override
    protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_SendEgress_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Command.SendEgress.class, Command.SendEgress.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(org.apache.flink.com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Command.SendEgress)) {
        return super.equals(obj);
      }
      Command.SendEgress other = (Command.SendEgress) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Command.SendEgress parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Command.SendEgress parseFrom(
        java.nio.ByteBuffer data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Command.SendEgress parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Command.SendEgress parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Command.SendEgress parseFrom(byte[] data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Command.SendEgress parseFrom(
        byte[] data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Command.SendEgress parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Command.SendEgress parseFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Command.SendEgress parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Command.SendEgress parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Command.SendEgress parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Command.SendEgress parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Command.SendEgress prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.SendEgress}
     */
    public static final class Builder extends
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.statefun.e2e.smoke.Command.SendEgress)
        Command.SendEgressOrBuilder {
      public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_SendEgress_descriptor;
      }

      @Override
      protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_SendEgress_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Command.SendEgress.class, Command.SendEgress.Builder.class);
      }

      // Construct using org.apache.flink.smoke.generated.Command.SendEgress.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.flink.com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @Override
      public org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_SendEgress_descriptor;
      }

      @Override
      public Command.SendEgress getDefaultInstanceForType() {
        return Command.SendEgress.getDefaultInstance();
      }

      @Override
      public Command.SendEgress build() {
        Command.SendEgress result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Command.SendEgress buildPartial() {
        Command.SendEgress result = new Command.SendEgress(this);
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          org.apache.flink.com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(org.apache.flink.com.google.protobuf.Message other) {
        if (other instanceof Command.SendEgress) {
          return mergeFrom((Command.SendEgress)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Command.SendEgress other) {
        if (other == Command.SendEgress.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Command.SendEgress parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Command.SendEgress) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.statefun.e2e.smoke.Command.SendEgress)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.statefun.e2e.smoke.Command.SendEgress)
    private static final Command.SendEgress DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Command.SendEgress();
    }

    public static Command.SendEgress getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.flink.com.google.protobuf.Parser<SendEgress>
        PARSER = new org.apache.flink.com.google.protobuf.AbstractParser<SendEgress>() {
      @Override
      public SendEgress parsePartialFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
        return new SendEgress(input, extensionRegistry);
      }
    };

    public static org.apache.flink.com.google.protobuf.Parser<SendEgress> parser() {
      return PARSER;
    }

    @Override
    public org.apache.flink.com.google.protobuf.Parser<SendEgress> getParserForType() {
      return PARSER;
    }

    @Override
    public Command.SendEgress getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AsyncOperationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation)
      org.apache.flink.com.google.protobuf.MessageOrBuilder {

    /**
     * <code>bool failure = 1;</code>
     */
    boolean getFailure();

    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
     */
    boolean hasResolvedCommands();
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
     */
    Commands getResolvedCommands();
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
     */
    CommandsOrBuilder getResolvedCommandsOrBuilder();
  }
  /**
   * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation}
   */
  public  static final class AsyncOperation extends
      org.apache.flink.com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation)
      AsyncOperationOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use AsyncOperation.newBuilder() to construct.
    private AsyncOperation(org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private AsyncOperation() {
    }

    @Override
    public final org.apache.flink.com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private AsyncOperation(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      org.apache.flink.com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          org.apache.flink.com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              failure_ = input.readBool();
              break;
            }
            case 18: {
              Commands.Builder subBuilder = null;
              if (resolvedCommands_ != null) {
                subBuilder = resolvedCommands_.toBuilder();
              }
              resolvedCommands_ = input.readMessage(Commands.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(resolvedCommands_);
                resolvedCommands_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.apache.flink.com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_AsyncOperation_descriptor;
    }

    @Override
    protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_AsyncOperation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Command.AsyncOperation.class, Command.AsyncOperation.Builder.class);
    }

    public static final int FAILURE_FIELD_NUMBER = 1;
    private boolean failure_;
    /**
     * <code>bool failure = 1;</code>
     */
    public boolean getFailure() {
      return failure_;
    }

    public static final int RESOLVED_COMMANDS_FIELD_NUMBER = 2;
    private Commands resolvedCommands_;
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
     */
    public boolean hasResolvedCommands() {
      return resolvedCommands_ != null;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
     */
    public Commands getResolvedCommands() {
      return resolvedCommands_ == null ? Commands.getDefaultInstance() : resolvedCommands_;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
     */
    public CommandsOrBuilder getResolvedCommandsOrBuilder() {
      return getResolvedCommands();
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(org.apache.flink.com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (failure_ != false) {
        output.writeBool(1, failure_);
      }
      if (resolvedCommands_ != null) {
        output.writeMessage(2, getResolvedCommands());
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (failure_ != false) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, failure_);
      }
      if (resolvedCommands_ != null) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getResolvedCommands());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Command.AsyncOperation)) {
        return super.equals(obj);
      }
      Command.AsyncOperation other = (Command.AsyncOperation) obj;

      if (getFailure()
          != other.getFailure()) return false;
      if (hasResolvedCommands() != other.hasResolvedCommands()) return false;
      if (hasResolvedCommands()) {
        if (!getResolvedCommands()
            .equals(other.getResolvedCommands())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + FAILURE_FIELD_NUMBER;
      hash = (53 * hash) + org.apache.flink.com.google.protobuf.Internal.hashBoolean(
          getFailure());
      if (hasResolvedCommands()) {
        hash = (37 * hash) + RESOLVED_COMMANDS_FIELD_NUMBER;
        hash = (53 * hash) + getResolvedCommands().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Command.AsyncOperation parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Command.AsyncOperation parseFrom(
        java.nio.ByteBuffer data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Command.AsyncOperation parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Command.AsyncOperation parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Command.AsyncOperation parseFrom(byte[] data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Command.AsyncOperation parseFrom(
        byte[] data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Command.AsyncOperation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Command.AsyncOperation parseFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Command.AsyncOperation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Command.AsyncOperation parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Command.AsyncOperation parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Command.AsyncOperation parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Command.AsyncOperation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation}
     */
    public static final class Builder extends
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation)
        Command.AsyncOperationOrBuilder {
      public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_AsyncOperation_descriptor;
      }

      @Override
      protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_AsyncOperation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Command.AsyncOperation.class, Command.AsyncOperation.Builder.class);
      }

      // Construct using org.apache.flink.smoke.generated.Command.AsyncOperation.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.flink.com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        failure_ = false;

        if (resolvedCommandsBuilder_ == null) {
          resolvedCommands_ = null;
        } else {
          resolvedCommands_ = null;
          resolvedCommandsBuilder_ = null;
        }
        return this;
      }

      @Override
      public org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_AsyncOperation_descriptor;
      }

      @Override
      public Command.AsyncOperation getDefaultInstanceForType() {
        return Command.AsyncOperation.getDefaultInstance();
      }

      @Override
      public Command.AsyncOperation build() {
        Command.AsyncOperation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Command.AsyncOperation buildPartial() {
        Command.AsyncOperation result = new Command.AsyncOperation(this);
        result.failure_ = failure_;
        if (resolvedCommandsBuilder_ == null) {
          result.resolvedCommands_ = resolvedCommands_;
        } else {
          result.resolvedCommands_ = resolvedCommandsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          org.apache.flink.com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(org.apache.flink.com.google.protobuf.Message other) {
        if (other instanceof Command.AsyncOperation) {
          return mergeFrom((Command.AsyncOperation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Command.AsyncOperation other) {
        if (other == Command.AsyncOperation.getDefaultInstance()) return this;
        if (other.getFailure() != false) {
          setFailure(other.getFailure());
        }
        if (other.hasResolvedCommands()) {
          mergeResolvedCommands(other.getResolvedCommands());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Command.AsyncOperation parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Command.AsyncOperation) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private boolean failure_ ;
      /**
       * <code>bool failure = 1;</code>
       */
      public boolean getFailure() {
        return failure_;
      }
      /**
       * <code>bool failure = 1;</code>
       */
      public Builder setFailure(boolean value) {
        
        failure_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool failure = 1;</code>
       */
      public Builder clearFailure() {
        
        failure_ = false;
        onChanged();
        return this;
      }

      private Commands resolvedCommands_;
      private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
              Commands, Commands.Builder, CommandsOrBuilder> resolvedCommandsBuilder_;
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
       */
      public boolean hasResolvedCommands() {
        return resolvedCommandsBuilder_ != null || resolvedCommands_ != null;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
       */
      public Commands getResolvedCommands() {
        if (resolvedCommandsBuilder_ == null) {
          return resolvedCommands_ == null ? Commands.getDefaultInstance() : resolvedCommands_;
        } else {
          return resolvedCommandsBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
       */
      public Builder setResolvedCommands(Commands value) {
        if (resolvedCommandsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          resolvedCommands_ = value;
          onChanged();
        } else {
          resolvedCommandsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
       */
      public Builder setResolvedCommands(
          Commands.Builder builderForValue) {
        if (resolvedCommandsBuilder_ == null) {
          resolvedCommands_ = builderForValue.build();
          onChanged();
        } else {
          resolvedCommandsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
       */
      public Builder mergeResolvedCommands(Commands value) {
        if (resolvedCommandsBuilder_ == null) {
          if (resolvedCommands_ != null) {
            resolvedCommands_ =
              Commands.newBuilder(resolvedCommands_).mergeFrom(value).buildPartial();
          } else {
            resolvedCommands_ = value;
          }
          onChanged();
        } else {
          resolvedCommandsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
       */
      public Builder clearResolvedCommands() {
        if (resolvedCommandsBuilder_ == null) {
          resolvedCommands_ = null;
          onChanged();
        } else {
          resolvedCommands_ = null;
          resolvedCommandsBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
       */
      public Commands.Builder getResolvedCommandsBuilder() {
        
        onChanged();
        return getResolvedCommandsFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
       */
      public CommandsOrBuilder getResolvedCommandsOrBuilder() {
        if (resolvedCommandsBuilder_ != null) {
          return resolvedCommandsBuilder_.getMessageOrBuilder();
        } else {
          return resolvedCommands_ == null ?
              Commands.getDefaultInstance() : resolvedCommands_;
        }
      }
      /**
       * <code>.org.apache.flink.statefun.e2e.smoke.Commands resolved_commands = 2;</code>
       */
      private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
              Commands, Commands.Builder, CommandsOrBuilder>
          getResolvedCommandsFieldBuilder() {
        if (resolvedCommandsBuilder_ == null) {
          resolvedCommandsBuilder_ = new org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
                  Commands, Commands.Builder, CommandsOrBuilder>(
                  getResolvedCommands(),
                  getParentForChildren(),
                  isClean());
          resolvedCommands_ = null;
        }
        return resolvedCommandsBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation)
    private static final Command.AsyncOperation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Command.AsyncOperation();
    }

    public static Command.AsyncOperation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.flink.com.google.protobuf.Parser<AsyncOperation>
        PARSER = new org.apache.flink.com.google.protobuf.AbstractParser<AsyncOperation>() {
      @Override
      public AsyncOperation parsePartialFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
        return new AsyncOperation(input, extensionRegistry);
      }
    };

    public static org.apache.flink.com.google.protobuf.Parser<AsyncOperation> parser() {
      return PARSER;
    }

    @Override
    public org.apache.flink.com.google.protobuf.Parser<AsyncOperation> getParserForType() {
      return PARSER;
    }

    @Override
    public Command.AsyncOperation getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface VerifyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.statefun.e2e.smoke.Command.Verify)
      org.apache.flink.com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int64 expected = 1;</code>
     */
    long getExpected();
  }
  /**
   * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.Verify}
   */
  public  static final class Verify extends
      org.apache.flink.com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.statefun.e2e.smoke.Command.Verify)
      VerifyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Verify.newBuilder() to construct.
    private Verify(org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Verify() {
    }

    @Override
    public final org.apache.flink.com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Verify(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      org.apache.flink.com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          org.apache.flink.com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              expected_ = input.readInt64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.apache.flink.com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_Verify_descriptor;
    }

    @Override
    protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_Verify_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Command.Verify.class, Command.Verify.Builder.class);
    }

    public static final int EXPECTED_FIELD_NUMBER = 1;
    private long expected_;
    /**
     * <code>int64 expected = 1;</code>
     */
    public long getExpected() {
      return expected_;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(org.apache.flink.com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (expected_ != 0L) {
        output.writeInt64(1, expected_);
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (expected_ != 0L) {
        size += org.apache.flink.com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, expected_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Command.Verify)) {
        return super.equals(obj);
      }
      Command.Verify other = (Command.Verify) obj;

      if (getExpected()
          != other.getExpected()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + EXPECTED_FIELD_NUMBER;
      hash = (53 * hash) + org.apache.flink.com.google.protobuf.Internal.hashLong(
          getExpected());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Command.Verify parseFrom(
        java.nio.ByteBuffer data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Command.Verify parseFrom(
        java.nio.ByteBuffer data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Command.Verify parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Command.Verify parseFrom(
        org.apache.flink.com.google.protobuf.ByteString data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Command.Verify parseFrom(byte[] data)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Command.Verify parseFrom(
        byte[] data,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Command.Verify parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Command.Verify parseFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Command.Verify parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Command.Verify parseDelimitedFrom(
        java.io.InputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Command.Verify parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Command.Verify parseFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.apache.flink.com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Command.Verify prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command.Verify}
     */
    public static final class Builder extends
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.statefun.e2e.smoke.Command.Verify)
        Command.VerifyOrBuilder {
      public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_Verify_descriptor;
      }

      @Override
      protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_Verify_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Command.Verify.class, Command.Verify.Builder.class);
      }

      // Construct using org.apache.flink.smoke.generated.Command.Verify.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.apache.flink.com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        expected_ = 0L;

        return this;
      }

      @Override
      public org.apache.flink.com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_Verify_descriptor;
      }

      @Override
      public Command.Verify getDefaultInstanceForType() {
        return Command.Verify.getDefaultInstance();
      }

      @Override
      public Command.Verify build() {
        Command.Verify result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Command.Verify buildPartial() {
        Command.Verify result = new Command.Verify(this);
        result.expected_ = expected_;
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          org.apache.flink.com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(org.apache.flink.com.google.protobuf.Message other) {
        if (other instanceof Command.Verify) {
          return mergeFrom((Command.Verify)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Command.Verify other) {
        if (other == Command.Verify.getDefaultInstance()) return this;
        if (other.getExpected() != 0L) {
          setExpected(other.getExpected());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Command.Verify parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Command.Verify) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long expected_ ;
      /**
       * <code>int64 expected = 1;</code>
       */
      public long getExpected() {
        return expected_;
      }
      /**
       * <code>int64 expected = 1;</code>
       */
      public Builder setExpected(long value) {
        
        expected_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 expected = 1;</code>
       */
      public Builder clearExpected() {
        
        expected_ = 0L;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.statefun.e2e.smoke.Command.Verify)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.statefun.e2e.smoke.Command.Verify)
    private static final Command.Verify DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Command.Verify();
    }

    public static Command.Verify getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.apache.flink.com.google.protobuf.Parser<Verify>
        PARSER = new org.apache.flink.com.google.protobuf.AbstractParser<Verify>() {
      @Override
      public Verify parsePartialFrom(
          org.apache.flink.com.google.protobuf.CodedInputStream input,
          org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
        return new Verify(input, extensionRegistry);
      }
    };

    public static org.apache.flink.com.google.protobuf.Parser<Verify> parser() {
      return PARSER;
    }

    @Override
    public org.apache.flink.com.google.protobuf.Parser<Verify> getParserForType() {
      return PARSER;
    }

    @Override
    public Command.Verify getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int commandCase_ = 0;
  private Object command_;
  public enum CommandCase
      implements org.apache.flink.com.google.protobuf.Internal.EnumLite {
    INCREMENT(1),
    SEND(2),
    SEND_AFTER(3),
    SEND_EGRESS(4),
    ASYNC_OPERATION(5),
    VERIFY(6),
    CANCEL_SEND_AFTER(7),
    COMMAND_NOT_SET(0);
    private final int value;
    private CommandCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static CommandCase valueOf(int value) {
      return forNumber(value);
    }

    public static CommandCase forNumber(int value) {
      switch (value) {
        case 1: return INCREMENT;
        case 2: return SEND;
        case 3: return SEND_AFTER;
        case 4: return SEND_EGRESS;
        case 5: return ASYNC_OPERATION;
        case 6: return VERIFY;
        case 7: return CANCEL_SEND_AFTER;
        case 0: return COMMAND_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public CommandCase
  getCommandCase() {
    return CommandCase.forNumber(
        commandCase_);
  }

  public static final int INCREMENT_FIELD_NUMBER = 1;
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
   */
  public boolean hasIncrement() {
    return commandCase_ == 1;
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
   */
  public Command.IncrementState getIncrement() {
    if (commandCase_ == 1) {
       return (Command.IncrementState) command_;
    }
    return Command.IncrementState.getDefaultInstance();
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
   */
  public Command.IncrementStateOrBuilder getIncrementOrBuilder() {
    if (commandCase_ == 1) {
       return (Command.IncrementState) command_;
    }
    return Command.IncrementState.getDefaultInstance();
  }

  public static final int SEND_FIELD_NUMBER = 2;
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
   */
  public boolean hasSend() {
    return commandCase_ == 2;
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
   */
  public Command.Send getSend() {
    if (commandCase_ == 2) {
       return (Command.Send) command_;
    }
    return Command.Send.getDefaultInstance();
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
   */
  public Command.SendOrBuilder getSendOrBuilder() {
    if (commandCase_ == 2) {
       return (Command.Send) command_;
    }
    return Command.Send.getDefaultInstance();
  }

  public static final int SEND_AFTER_FIELD_NUMBER = 3;
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
   */
  public boolean hasSendAfter() {
    return commandCase_ == 3;
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
   */
  public Command.SendAfter getSendAfter() {
    if (commandCase_ == 3) {
       return (Command.SendAfter) command_;
    }
    return Command.SendAfter.getDefaultInstance();
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
   */
  public Command.SendAfterOrBuilder getSendAfterOrBuilder() {
    if (commandCase_ == 3) {
       return (Command.SendAfter) command_;
    }
    return Command.SendAfter.getDefaultInstance();
  }

  public static final int SEND_EGRESS_FIELD_NUMBER = 4;
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
   */
  public boolean hasSendEgress() {
    return commandCase_ == 4;
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
   */
  public Command.SendEgress getSendEgress() {
    if (commandCase_ == 4) {
       return (Command.SendEgress) command_;
    }
    return Command.SendEgress.getDefaultInstance();
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
   */
  public Command.SendEgressOrBuilder getSendEgressOrBuilder() {
    if (commandCase_ == 4) {
       return (Command.SendEgress) command_;
    }
    return Command.SendEgress.getDefaultInstance();
  }

  public static final int ASYNC_OPERATION_FIELD_NUMBER = 5;
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
   */
  public boolean hasAsyncOperation() {
    return commandCase_ == 5;
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
   */
  public Command.AsyncOperation getAsyncOperation() {
    if (commandCase_ == 5) {
       return (Command.AsyncOperation) command_;
    }
    return Command.AsyncOperation.getDefaultInstance();
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
   */
  public Command.AsyncOperationOrBuilder getAsyncOperationOrBuilder() {
    if (commandCase_ == 5) {
       return (Command.AsyncOperation) command_;
    }
    return Command.AsyncOperation.getDefaultInstance();
  }

  public static final int VERIFY_FIELD_NUMBER = 6;
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
   */
  public boolean hasVerify() {
    return commandCase_ == 6;
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
   */
  public Command.Verify getVerify() {
    if (commandCase_ == 6) {
       return (Command.Verify) command_;
    }
    return Command.Verify.getDefaultInstance();
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
   */
  public Command.VerifyOrBuilder getVerifyOrBuilder() {
    if (commandCase_ == 6) {
       return (Command.Verify) command_;
    }
    return Command.Verify.getDefaultInstance();
  }

  public static final int CANCEL_SEND_AFTER_FIELD_NUMBER = 7;
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.CancelSendAfter cancel_send_after = 7;</code>
   */
  public boolean hasCancelSendAfter() {
    return commandCase_ == 7;
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.CancelSendAfter cancel_send_after = 7;</code>
   */
  public Command.CancelSendAfter getCancelSendAfter() {
    if (commandCase_ == 7) {
       return (Command.CancelSendAfter) command_;
    }
    return Command.CancelSendAfter.getDefaultInstance();
  }
  /**
   * <code>.org.apache.flink.statefun.e2e.smoke.Command.CancelSendAfter cancel_send_after = 7;</code>
   */
  public Command.CancelSendAfterOrBuilder getCancelSendAfterOrBuilder() {
    if (commandCase_ == 7) {
       return (Command.CancelSendAfter) command_;
    }
    return Command.CancelSendAfter.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(org.apache.flink.com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (commandCase_ == 1) {
      output.writeMessage(1, (Command.IncrementState) command_);
    }
    if (commandCase_ == 2) {
      output.writeMessage(2, (Command.Send) command_);
    }
    if (commandCase_ == 3) {
      output.writeMessage(3, (Command.SendAfter) command_);
    }
    if (commandCase_ == 4) {
      output.writeMessage(4, (Command.SendEgress) command_);
    }
    if (commandCase_ == 5) {
      output.writeMessage(5, (Command.AsyncOperation) command_);
    }
    if (commandCase_ == 6) {
      output.writeMessage(6, (Command.Verify) command_);
    }
    if (commandCase_ == 7) {
      output.writeMessage(7, (Command.CancelSendAfter) command_);
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (commandCase_ == 1) {
      size += org.apache.flink.com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (Command.IncrementState) command_);
    }
    if (commandCase_ == 2) {
      size += org.apache.flink.com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (Command.Send) command_);
    }
    if (commandCase_ == 3) {
      size += org.apache.flink.com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (Command.SendAfter) command_);
    }
    if (commandCase_ == 4) {
      size += org.apache.flink.com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (Command.SendEgress) command_);
    }
    if (commandCase_ == 5) {
      size += org.apache.flink.com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (Command.AsyncOperation) command_);
    }
    if (commandCase_ == 6) {
      size += org.apache.flink.com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, (Command.Verify) command_);
    }
    if (commandCase_ == 7) {
      size += org.apache.flink.com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (Command.CancelSendAfter) command_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof Command)) {
      return super.equals(obj);
    }
    Command other = (Command) obj;

    if (!getCommandCase().equals(other.getCommandCase())) return false;
    switch (commandCase_) {
      case 1:
        if (!getIncrement()
            .equals(other.getIncrement())) return false;
        break;
      case 2:
        if (!getSend()
            .equals(other.getSend())) return false;
        break;
      case 3:
        if (!getSendAfter()
            .equals(other.getSendAfter())) return false;
        break;
      case 4:
        if (!getSendEgress()
            .equals(other.getSendEgress())) return false;
        break;
      case 5:
        if (!getAsyncOperation()
            .equals(other.getAsyncOperation())) return false;
        break;
      case 6:
        if (!getVerify()
            .equals(other.getVerify())) return false;
        break;
      case 7:
        if (!getCancelSendAfter()
            .equals(other.getCancelSendAfter())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (commandCase_) {
      case 1:
        hash = (37 * hash) + INCREMENT_FIELD_NUMBER;
        hash = (53 * hash) + getIncrement().hashCode();
        break;
      case 2:
        hash = (37 * hash) + SEND_FIELD_NUMBER;
        hash = (53 * hash) + getSend().hashCode();
        break;
      case 3:
        hash = (37 * hash) + SEND_AFTER_FIELD_NUMBER;
        hash = (53 * hash) + getSendAfter().hashCode();
        break;
      case 4:
        hash = (37 * hash) + SEND_EGRESS_FIELD_NUMBER;
        hash = (53 * hash) + getSendEgress().hashCode();
        break;
      case 5:
        hash = (37 * hash) + ASYNC_OPERATION_FIELD_NUMBER;
        hash = (53 * hash) + getAsyncOperation().hashCode();
        break;
      case 6:
        hash = (37 * hash) + VERIFY_FIELD_NUMBER;
        hash = (53 * hash) + getVerify().hashCode();
        break;
      case 7:
        hash = (37 * hash) + CANCEL_SEND_AFTER_FIELD_NUMBER;
        hash = (53 * hash) + getCancelSendAfter().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static Command parseFrom(
      java.nio.ByteBuffer data)
      throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static Command parseFrom(
      java.nio.ByteBuffer data,
      org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static Command parseFrom(
      org.apache.flink.com.google.protobuf.ByteString data)
      throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static Command parseFrom(
      org.apache.flink.com.google.protobuf.ByteString data,
      org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static Command parseFrom(byte[] data)
      throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static Command parseFrom(
      byte[] data,
      org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static Command parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.apache.flink.com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static Command parseFrom(
      java.io.InputStream input,
      org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.apache.flink.com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static Command parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.apache.flink.com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static Command parseDelimitedFrom(
      java.io.InputStream input,
      org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.apache.flink.com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static Command parseFrom(
      org.apache.flink.com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.apache.flink.com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static Command parseFrom(
      org.apache.flink.com.google.protobuf.CodedInputStream input,
      org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.apache.flink.com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(Command prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.apache.flink.statefun.e2e.smoke.Command}
   */
  public static final class Builder extends
      org.apache.flink.com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.apache.flink.statefun.e2e.smoke.Command)
          CommandOrBuilder {
    public static final org.apache.flink.com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_descriptor;
    }

    @Override
    protected org.apache.flink.com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Command.class, Command.Builder.class);
    }

    // Construct using org.apache.flink.smoke.generated.Command.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        org.apache.flink.com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (org.apache.flink.com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @Override
    public Builder clear() {
      super.clear();
      commandCase_ = 0;
      command_ = null;
      return this;
    }

    @Override
    public org.apache.flink.com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return CommandsOuterClass.internal_static_org_apache_flink_statefun_e2e_smoke_Command_descriptor;
    }

    @Override
    public Command getDefaultInstanceForType() {
      return Command.getDefaultInstance();
    }

    @Override
    public Command build() {
      Command result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public Command buildPartial() {
      Command result = new Command(this);
      if (commandCase_ == 1) {
        if (incrementBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = incrementBuilder_.build();
        }
      }
      if (commandCase_ == 2) {
        if (sendBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = sendBuilder_.build();
        }
      }
      if (commandCase_ == 3) {
        if (sendAfterBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = sendAfterBuilder_.build();
        }
      }
      if (commandCase_ == 4) {
        if (sendEgressBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = sendEgressBuilder_.build();
        }
      }
      if (commandCase_ == 5) {
        if (asyncOperationBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = asyncOperationBuilder_.build();
        }
      }
      if (commandCase_ == 6) {
        if (verifyBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = verifyBuilder_.build();
        }
      }
      if (commandCase_ == 7) {
        if (cancelSendAfterBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = cancelSendAfterBuilder_.build();
        }
      }
      result.commandCase_ = commandCase_;
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        org.apache.flink.com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        org.apache.flink.com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(org.apache.flink.com.google.protobuf.Message other) {
      if (other instanceof Command) {
        return mergeFrom((Command)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(Command other) {
      if (other == Command.getDefaultInstance()) return this;
      switch (other.getCommandCase()) {
        case INCREMENT: {
          mergeIncrement(other.getIncrement());
          break;
        }
        case SEND: {
          mergeSend(other.getSend());
          break;
        }
        case SEND_AFTER: {
          mergeSendAfter(other.getSendAfter());
          break;
        }
        case SEND_EGRESS: {
          mergeSendEgress(other.getSendEgress());
          break;
        }
        case ASYNC_OPERATION: {
          mergeAsyncOperation(other.getAsyncOperation());
          break;
        }
        case VERIFY: {
          mergeVerify(other.getVerify());
          break;
        }
        case CANCEL_SEND_AFTER: {
          mergeCancelSendAfter(other.getCancelSendAfter());
          break;
        }
        case COMMAND_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Command parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.apache.flink.com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (Command) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int commandCase_ = 0;
    private Object command_;
    public CommandCase
        getCommandCase() {
      return CommandCase.forNumber(
          commandCase_);
    }

    public Builder clearCommand() {
      commandCase_ = 0;
      command_ = null;
      onChanged();
      return this;
    }


    private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
        Command.IncrementState, Command.IncrementState.Builder, Command.IncrementStateOrBuilder> incrementBuilder_;
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
     */
    public boolean hasIncrement() {
      return commandCase_ == 1;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
     */
    public Command.IncrementState getIncrement() {
      if (incrementBuilder_ == null) {
        if (commandCase_ == 1) {
          return (Command.IncrementState) command_;
        }
        return Command.IncrementState.getDefaultInstance();
      } else {
        if (commandCase_ == 1) {
          return incrementBuilder_.getMessage();
        }
        return Command.IncrementState.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
     */
    public Builder setIncrement(Command.IncrementState value) {
      if (incrementBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        incrementBuilder_.setMessage(value);
      }
      commandCase_ = 1;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
     */
    public Builder setIncrement(
        Command.IncrementState.Builder builderForValue) {
      if (incrementBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        incrementBuilder_.setMessage(builderForValue.build());
      }
      commandCase_ = 1;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
     */
    public Builder mergeIncrement(Command.IncrementState value) {
      if (incrementBuilder_ == null) {
        if (commandCase_ == 1 &&
            command_ != Command.IncrementState.getDefaultInstance()) {
          command_ = Command.IncrementState.newBuilder((Command.IncrementState) command_)
              .mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        if (commandCase_ == 1) {
          incrementBuilder_.mergeFrom(value);
        }
        incrementBuilder_.setMessage(value);
      }
      commandCase_ = 1;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
     */
    public Builder clearIncrement() {
      if (incrementBuilder_ == null) {
        if (commandCase_ == 1) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
      } else {
        if (commandCase_ == 1) {
          commandCase_ = 0;
          command_ = null;
        }
        incrementBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
     */
    public Command.IncrementState.Builder getIncrementBuilder() {
      return getIncrementFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
     */
    public Command.IncrementStateOrBuilder getIncrementOrBuilder() {
      if ((commandCase_ == 1) && (incrementBuilder_ != null)) {
        return incrementBuilder_.getMessageOrBuilder();
      } else {
        if (commandCase_ == 1) {
          return (Command.IncrementState) command_;
        }
        return Command.IncrementState.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.IncrementState increment = 1;</code>
     */
    private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
        Command.IncrementState, Command.IncrementState.Builder, Command.IncrementStateOrBuilder>
        getIncrementFieldBuilder() {
      if (incrementBuilder_ == null) {
        if (!(commandCase_ == 1)) {
          command_ = Command.IncrementState.getDefaultInstance();
        }
        incrementBuilder_ = new org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
            Command.IncrementState, Command.IncrementState.Builder, Command.IncrementStateOrBuilder>(
                (Command.IncrementState) command_,
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      commandCase_ = 1;
      onChanged();;
      return incrementBuilder_;
    }

    private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
        Command.Send, Command.Send.Builder, Command.SendOrBuilder> sendBuilder_;
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
     */
    public boolean hasSend() {
      return commandCase_ == 2;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
     */
    public Command.Send getSend() {
      if (sendBuilder_ == null) {
        if (commandCase_ == 2) {
          return (Command.Send) command_;
        }
        return Command.Send.getDefaultInstance();
      } else {
        if (commandCase_ == 2) {
          return sendBuilder_.getMessage();
        }
        return Command.Send.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
     */
    public Builder setSend(Command.Send value) {
      if (sendBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        sendBuilder_.setMessage(value);
      }
      commandCase_ = 2;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
     */
    public Builder setSend(
        Command.Send.Builder builderForValue) {
      if (sendBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        sendBuilder_.setMessage(builderForValue.build());
      }
      commandCase_ = 2;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
     */
    public Builder mergeSend(Command.Send value) {
      if (sendBuilder_ == null) {
        if (commandCase_ == 2 &&
            command_ != Command.Send.getDefaultInstance()) {
          command_ = Command.Send.newBuilder((Command.Send) command_)
              .mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        if (commandCase_ == 2) {
          sendBuilder_.mergeFrom(value);
        }
        sendBuilder_.setMessage(value);
      }
      commandCase_ = 2;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
     */
    public Builder clearSend() {
      if (sendBuilder_ == null) {
        if (commandCase_ == 2) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
      } else {
        if (commandCase_ == 2) {
          commandCase_ = 0;
          command_ = null;
        }
        sendBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
     */
    public Command.Send.Builder getSendBuilder() {
      return getSendFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
     */
    public Command.SendOrBuilder getSendOrBuilder() {
      if ((commandCase_ == 2) && (sendBuilder_ != null)) {
        return sendBuilder_.getMessageOrBuilder();
      } else {
        if (commandCase_ == 2) {
          return (Command.Send) command_;
        }
        return Command.Send.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Send send = 2;</code>
     */
    private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
        Command.Send, Command.Send.Builder, Command.SendOrBuilder>
        getSendFieldBuilder() {
      if (sendBuilder_ == null) {
        if (!(commandCase_ == 2)) {
          command_ = Command.Send.getDefaultInstance();
        }
        sendBuilder_ = new org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
            Command.Send, Command.Send.Builder, Command.SendOrBuilder>(
                (Command.Send) command_,
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      commandCase_ = 2;
      onChanged();;
      return sendBuilder_;
    }

    private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
        Command.SendAfter, Command.SendAfter.Builder, Command.SendAfterOrBuilder> sendAfterBuilder_;
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
     */
    public boolean hasSendAfter() {
      return commandCase_ == 3;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
     */
    public Command.SendAfter getSendAfter() {
      if (sendAfterBuilder_ == null) {
        if (commandCase_ == 3) {
          return (Command.SendAfter) command_;
        }
        return Command.SendAfter.getDefaultInstance();
      } else {
        if (commandCase_ == 3) {
          return sendAfterBuilder_.getMessage();
        }
        return Command.SendAfter.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
     */
    public Builder setSendAfter(Command.SendAfter value) {
      if (sendAfterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        sendAfterBuilder_.setMessage(value);
      }
      commandCase_ = 3;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
     */
    public Builder setSendAfter(
        Command.SendAfter.Builder builderForValue) {
      if (sendAfterBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        sendAfterBuilder_.setMessage(builderForValue.build());
      }
      commandCase_ = 3;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
     */
    public Builder mergeSendAfter(Command.SendAfter value) {
      if (sendAfterBuilder_ == null) {
        if (commandCase_ == 3 &&
            command_ != Command.SendAfter.getDefaultInstance()) {
          command_ = Command.SendAfter.newBuilder((Command.SendAfter) command_)
              .mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        if (commandCase_ == 3) {
          sendAfterBuilder_.mergeFrom(value);
        }
        sendAfterBuilder_.setMessage(value);
      }
      commandCase_ = 3;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
     */
    public Builder clearSendAfter() {
      if (sendAfterBuilder_ == null) {
        if (commandCase_ == 3) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
      } else {
        if (commandCase_ == 3) {
          commandCase_ = 0;
          command_ = null;
        }
        sendAfterBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
     */
    public Command.SendAfter.Builder getSendAfterBuilder() {
      return getSendAfterFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
     */
    public Command.SendAfterOrBuilder getSendAfterOrBuilder() {
      if ((commandCase_ == 3) && (sendAfterBuilder_ != null)) {
        return sendAfterBuilder_.getMessageOrBuilder();
      } else {
        if (commandCase_ == 3) {
          return (Command.SendAfter) command_;
        }
        return Command.SendAfter.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendAfter send_after = 3;</code>
     */
    private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
        Command.SendAfter, Command.SendAfter.Builder, Command.SendAfterOrBuilder>
        getSendAfterFieldBuilder() {
      if (sendAfterBuilder_ == null) {
        if (!(commandCase_ == 3)) {
          command_ = Command.SendAfter.getDefaultInstance();
        }
        sendAfterBuilder_ = new org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
            Command.SendAfter, Command.SendAfter.Builder, Command.SendAfterOrBuilder>(
                (Command.SendAfter) command_,
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      commandCase_ = 3;
      onChanged();;
      return sendAfterBuilder_;
    }

    private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
        Command.SendEgress, Command.SendEgress.Builder, Command.SendEgressOrBuilder> sendEgressBuilder_;
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
     */
    public boolean hasSendEgress() {
      return commandCase_ == 4;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
     */
    public Command.SendEgress getSendEgress() {
      if (sendEgressBuilder_ == null) {
        if (commandCase_ == 4) {
          return (Command.SendEgress) command_;
        }
        return Command.SendEgress.getDefaultInstance();
      } else {
        if (commandCase_ == 4) {
          return sendEgressBuilder_.getMessage();
        }
        return Command.SendEgress.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
     */
    public Builder setSendEgress(Command.SendEgress value) {
      if (sendEgressBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        sendEgressBuilder_.setMessage(value);
      }
      commandCase_ = 4;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
     */
    public Builder setSendEgress(
        Command.SendEgress.Builder builderForValue) {
      if (sendEgressBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        sendEgressBuilder_.setMessage(builderForValue.build());
      }
      commandCase_ = 4;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
     */
    public Builder mergeSendEgress(Command.SendEgress value) {
      if (sendEgressBuilder_ == null) {
        if (commandCase_ == 4 &&
            command_ != Command.SendEgress.getDefaultInstance()) {
          command_ = Command.SendEgress.newBuilder((Command.SendEgress) command_)
              .mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        if (commandCase_ == 4) {
          sendEgressBuilder_.mergeFrom(value);
        }
        sendEgressBuilder_.setMessage(value);
      }
      commandCase_ = 4;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
     */
    public Builder clearSendEgress() {
      if (sendEgressBuilder_ == null) {
        if (commandCase_ == 4) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
      } else {
        if (commandCase_ == 4) {
          commandCase_ = 0;
          command_ = null;
        }
        sendEgressBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
     */
    public Command.SendEgress.Builder getSendEgressBuilder() {
      return getSendEgressFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
     */
    public Command.SendEgressOrBuilder getSendEgressOrBuilder() {
      if ((commandCase_ == 4) && (sendEgressBuilder_ != null)) {
        return sendEgressBuilder_.getMessageOrBuilder();
      } else {
        if (commandCase_ == 4) {
          return (Command.SendEgress) command_;
        }
        return Command.SendEgress.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.SendEgress send_egress = 4;</code>
     */
    private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
        Command.SendEgress, Command.SendEgress.Builder, Command.SendEgressOrBuilder>
        getSendEgressFieldBuilder() {
      if (sendEgressBuilder_ == null) {
        if (!(commandCase_ == 4)) {
          command_ = Command.SendEgress.getDefaultInstance();
        }
        sendEgressBuilder_ = new org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
            Command.SendEgress, Command.SendEgress.Builder, Command.SendEgressOrBuilder>(
                (Command.SendEgress) command_,
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      commandCase_ = 4;
      onChanged();;
      return sendEgressBuilder_;
    }

    private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
        Command.AsyncOperation, Command.AsyncOperation.Builder, Command.AsyncOperationOrBuilder> asyncOperationBuilder_;
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
     */
    public boolean hasAsyncOperation() {
      return commandCase_ == 5;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
     */
    public Command.AsyncOperation getAsyncOperation() {
      if (asyncOperationBuilder_ == null) {
        if (commandCase_ == 5) {
          return (Command.AsyncOperation) command_;
        }
        return Command.AsyncOperation.getDefaultInstance();
      } else {
        if (commandCase_ == 5) {
          return asyncOperationBuilder_.getMessage();
        }
        return Command.AsyncOperation.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
     */
    public Builder setAsyncOperation(Command.AsyncOperation value) {
      if (asyncOperationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        asyncOperationBuilder_.setMessage(value);
      }
      commandCase_ = 5;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
     */
    public Builder setAsyncOperation(
        Command.AsyncOperation.Builder builderForValue) {
      if (asyncOperationBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        asyncOperationBuilder_.setMessage(builderForValue.build());
      }
      commandCase_ = 5;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
     */
    public Builder mergeAsyncOperation(Command.AsyncOperation value) {
      if (asyncOperationBuilder_ == null) {
        if (commandCase_ == 5 &&
            command_ != Command.AsyncOperation.getDefaultInstance()) {
          command_ = Command.AsyncOperation.newBuilder((Command.AsyncOperation) command_)
              .mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        if (commandCase_ == 5) {
          asyncOperationBuilder_.mergeFrom(value);
        }
        asyncOperationBuilder_.setMessage(value);
      }
      commandCase_ = 5;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
     */
    public Builder clearAsyncOperation() {
      if (asyncOperationBuilder_ == null) {
        if (commandCase_ == 5) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
      } else {
        if (commandCase_ == 5) {
          commandCase_ = 0;
          command_ = null;
        }
        asyncOperationBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
     */
    public Command.AsyncOperation.Builder getAsyncOperationBuilder() {
      return getAsyncOperationFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
     */
    public Command.AsyncOperationOrBuilder getAsyncOperationOrBuilder() {
      if ((commandCase_ == 5) && (asyncOperationBuilder_ != null)) {
        return asyncOperationBuilder_.getMessageOrBuilder();
      } else {
        if (commandCase_ == 5) {
          return (Command.AsyncOperation) command_;
        }
        return Command.AsyncOperation.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.AsyncOperation async_operation = 5;</code>
     */
    private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
        Command.AsyncOperation, Command.AsyncOperation.Builder, Command.AsyncOperationOrBuilder>
        getAsyncOperationFieldBuilder() {
      if (asyncOperationBuilder_ == null) {
        if (!(commandCase_ == 5)) {
          command_ = Command.AsyncOperation.getDefaultInstance();
        }
        asyncOperationBuilder_ = new org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
            Command.AsyncOperation, Command.AsyncOperation.Builder, Command.AsyncOperationOrBuilder>(
                (Command.AsyncOperation) command_,
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      commandCase_ = 5;
      onChanged();;
      return asyncOperationBuilder_;
    }

    private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
        Command.Verify, Command.Verify.Builder, Command.VerifyOrBuilder> verifyBuilder_;
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
     */
    public boolean hasVerify() {
      return commandCase_ == 6;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
     */
    public Command.Verify getVerify() {
      if (verifyBuilder_ == null) {
        if (commandCase_ == 6) {
          return (Command.Verify) command_;
        }
        return Command.Verify.getDefaultInstance();
      } else {
        if (commandCase_ == 6) {
          return verifyBuilder_.getMessage();
        }
        return Command.Verify.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
     */
    public Builder setVerify(Command.Verify value) {
      if (verifyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        verifyBuilder_.setMessage(value);
      }
      commandCase_ = 6;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
     */
    public Builder setVerify(
        Command.Verify.Builder builderForValue) {
      if (verifyBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        verifyBuilder_.setMessage(builderForValue.build());
      }
      commandCase_ = 6;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
     */
    public Builder mergeVerify(Command.Verify value) {
      if (verifyBuilder_ == null) {
        if (commandCase_ == 6 &&
            command_ != Command.Verify.getDefaultInstance()) {
          command_ = Command.Verify.newBuilder((Command.Verify) command_)
              .mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        if (commandCase_ == 6) {
          verifyBuilder_.mergeFrom(value);
        }
        verifyBuilder_.setMessage(value);
      }
      commandCase_ = 6;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
     */
    public Builder clearVerify() {
      if (verifyBuilder_ == null) {
        if (commandCase_ == 6) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
      } else {
        if (commandCase_ == 6) {
          commandCase_ = 0;
          command_ = null;
        }
        verifyBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
     */
    public Command.Verify.Builder getVerifyBuilder() {
      return getVerifyFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
     */
    public Command.VerifyOrBuilder getVerifyOrBuilder() {
      if ((commandCase_ == 6) && (verifyBuilder_ != null)) {
        return verifyBuilder_.getMessageOrBuilder();
      } else {
        if (commandCase_ == 6) {
          return (Command.Verify) command_;
        }
        return Command.Verify.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.Verify verify = 6;</code>
     */
    private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
        Command.Verify, Command.Verify.Builder, Command.VerifyOrBuilder>
        getVerifyFieldBuilder() {
      if (verifyBuilder_ == null) {
        if (!(commandCase_ == 6)) {
          command_ = Command.Verify.getDefaultInstance();
        }
        verifyBuilder_ = new org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
            Command.Verify, Command.Verify.Builder, Command.VerifyOrBuilder>(
                (Command.Verify) command_,
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      commandCase_ = 6;
      onChanged();;
      return verifyBuilder_;
    }

    private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
        Command.CancelSendAfter, Command.CancelSendAfter.Builder, Command.CancelSendAfterOrBuilder> cancelSendAfterBuilder_;
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.CancelSendAfter cancel_send_after = 7;</code>
     */
    public boolean hasCancelSendAfter() {
      return commandCase_ == 7;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.CancelSendAfter cancel_send_after = 7;</code>
     */
    public Command.CancelSendAfter getCancelSendAfter() {
      if (cancelSendAfterBuilder_ == null) {
        if (commandCase_ == 7) {
          return (Command.CancelSendAfter) command_;
        }
        return Command.CancelSendAfter.getDefaultInstance();
      } else {
        if (commandCase_ == 7) {
          return cancelSendAfterBuilder_.getMessage();
        }
        return Command.CancelSendAfter.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.CancelSendAfter cancel_send_after = 7;</code>
     */
    public Builder setCancelSendAfter(Command.CancelSendAfter value) {
      if (cancelSendAfterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        cancelSendAfterBuilder_.setMessage(value);
      }
      commandCase_ = 7;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.CancelSendAfter cancel_send_after = 7;</code>
     */
    public Builder setCancelSendAfter(
        Command.CancelSendAfter.Builder builderForValue) {
      if (cancelSendAfterBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        cancelSendAfterBuilder_.setMessage(builderForValue.build());
      }
      commandCase_ = 7;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.CancelSendAfter cancel_send_after = 7;</code>
     */
    public Builder mergeCancelSendAfter(Command.CancelSendAfter value) {
      if (cancelSendAfterBuilder_ == null) {
        if (commandCase_ == 7 &&
            command_ != Command.CancelSendAfter.getDefaultInstance()) {
          command_ = Command.CancelSendAfter.newBuilder((Command.CancelSendAfter) command_)
              .mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        if (commandCase_ == 7) {
          cancelSendAfterBuilder_.mergeFrom(value);
        }
        cancelSendAfterBuilder_.setMessage(value);
      }
      commandCase_ = 7;
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.CancelSendAfter cancel_send_after = 7;</code>
     */
    public Builder clearCancelSendAfter() {
      if (cancelSendAfterBuilder_ == null) {
        if (commandCase_ == 7) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
      } else {
        if (commandCase_ == 7) {
          commandCase_ = 0;
          command_ = null;
        }
        cancelSendAfterBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.CancelSendAfter cancel_send_after = 7;</code>
     */
    public Command.CancelSendAfter.Builder getCancelSendAfterBuilder() {
      return getCancelSendAfterFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.CancelSendAfter cancel_send_after = 7;</code>
     */
    public Command.CancelSendAfterOrBuilder getCancelSendAfterOrBuilder() {
      if ((commandCase_ == 7) && (cancelSendAfterBuilder_ != null)) {
        return cancelSendAfterBuilder_.getMessageOrBuilder();
      } else {
        if (commandCase_ == 7) {
          return (Command.CancelSendAfter) command_;
        }
        return Command.CancelSendAfter.getDefaultInstance();
      }
    }
    /**
     * <code>.org.apache.flink.statefun.e2e.smoke.Command.CancelSendAfter cancel_send_after = 7;</code>
     */
    private org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
        Command.CancelSendAfter, Command.CancelSendAfter.Builder, Command.CancelSendAfterOrBuilder>
        getCancelSendAfterFieldBuilder() {
      if (cancelSendAfterBuilder_ == null) {
        if (!(commandCase_ == 7)) {
          command_ = Command.CancelSendAfter.getDefaultInstance();
        }
        cancelSendAfterBuilder_ = new org.apache.flink.com.google.protobuf.SingleFieldBuilderV3<
            Command.CancelSendAfter, Command.CancelSendAfter.Builder, Command.CancelSendAfterOrBuilder>(
                (Command.CancelSendAfter) command_,
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      commandCase_ = 7;
      onChanged();;
      return cancelSendAfterBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final org.apache.flink.com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:org.apache.flink.statefun.e2e.smoke.Command)
  }

  // @@protoc_insertion_point(class_scope:org.apache.flink.statefun.e2e.smoke.Command)
  private static final Command DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new Command();
  }

  public static Command getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final org.apache.flink.com.google.protobuf.Parser<Command>
      PARSER = new org.apache.flink.com.google.protobuf.AbstractParser<Command>() {
    @Override
    public Command parsePartialFrom(
        org.apache.flink.com.google.protobuf.CodedInputStream input,
        org.apache.flink.com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.apache.flink.com.google.protobuf.InvalidProtocolBufferException {
      return new Command(input, extensionRegistry);
    }
  };

  public static org.apache.flink.com.google.protobuf.Parser<Command> parser() {
    return PARSER;
  }

  @Override
  public org.apache.flink.com.google.protobuf.Parser<Command> getParserForType() {
    return PARSER;
  }

  @Override
  public Command getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

